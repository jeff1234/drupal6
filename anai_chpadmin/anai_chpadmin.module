<?php
// $Id$
require_once("anai_chpadmin.inc");


/**
 * @file
 * ANAI CHP Admin
 *
 * CHP Administration
 *
 */



/**
 * Implementation of hook_init().
 * 
 */



/**
 * Implementation of hook_cron().
 * 
 */



/**
 * Implementation of hook_user().
 * 
 */



/**
 * Implementation of hook_perm().
 * 
 */
function anai_chpadmin_perm() {
  return array('anai chp admin',
	       // Vehicle options
	       'anai chp add vehicles',
	       'anai chp list vehicles',
	       'anai chp edit vehicles',
	       'anai chp delete vehicles',
	       // Apps options
	       'anai chp add apps',
	       'anai chp list apps',
	       'anai chp edit apps',
	       'anai chp delete apps',
	       // Server options
	       'anai chp edit server',
	       // Crypt options
	       'anai chp add crypt',
	       'anai chp list crypt',
	       'anai chp edit crypt',
	       'anai chp delete crypt',
	       // Name options
	       'anai chp list names',
	       'anai chp edit names',
	       // Classify options
	       'anai chp list classify',
	       'anai chp edit classify',
	       );
}



/**
 * Implementation of hook_theme().
 * 
 */
function anai_chpadmin_theme($existing, $type, $theme, $path) {
  return array
    ('chpadmin_status_table' =>
     array('arguments' => array('fieldset' => NULL)),
     'chpadmin_vehicles_table' =>
     array('arguments' => array('fieldset' => NULL)),
     'chpadmin_apps_table' =>
     array('arguments' => array('fieldset' => NULL)),
     'chpadmin_crypt_table' =>
     array('arguments' => array('fieldset' => NULL)),
     'chpadmin_names_table' =>
     array('arguments' => array('fieldset' => NULL)),
     'chpadmin_classify_table' =>
     array('arguments' => array('fieldset' => NULL)),
     );
}



/**
 * Implementation of hook_menu().
 * 
 */
function anai_chpadmin_menu() {
  $items = array();
  $items['chpadmin'] = array
    ('page callback' => 'drupal_get_form',
     'page arguments' => array('chpadmin_form'),
     'access arguments' => array('anai chp admin'),
     'type' => MENU_CALLBACK,
     );
  $items['chpadminvehicleadd'] = array
    ('page callback' => 'drupal_get_form',
     'page arguments' => array('chpadmin_vehicle_add_form'),
     'access arguments' => array('anai chp add vehicles'),
     'type' => MENU_CALLBACK,
     );
  $items['chpadminvehicles'] = array
    ('page callback' => 'drupal_get_form',
     'page arguments' => array('chpadmin_vehicles_form'),
     'access arguments' => array('anai chp list vehicles'),
     'type' => MENU_CALLBACK,
     );
  $items['chpadminappadd'] = array
    ('page callback' => 'drupal_get_form',
     'page arguments' => array('chpadmin_app_add_form'),
     'access arguments' => array('anai chp add apps'),
     'type' => MENU_CALLBACK,
     );
  $items['chpadminapps'] = array
    ('page callback' => 'drupal_get_form',
     'page arguments' => array('chpadmin_apps_form'),
     'access arguments' => array('anai chp list apps'),
     'type' => MENU_CALLBACK,
     );
  $items['chpadminserver'] = array
    ('page callback' => 'drupal_get_form',
     'page arguments' => array('chpadmin_server_form'),
     'access arguments' => array('anai chp edit server'),
     'type' => MENU_CALLBACK,
     );
  $items['chpadmincryptadd'] = array
    ('page callback' => 'drupal_get_form',
     'page arguments' => array('chpadmin_crypt_add_form'),
     'access arguments' => array('anai chp add crypt'),
     'type' => MENU_CALLBACK,
     );
  $items['chpadmincrypt'] = array
    ('page callback' => 'drupal_get_form',
     'page arguments' => array('chpadmin_crypt_form'),
     'access arguments' => array('anai chp list crypt'),
     'type' => MENU_CALLBACK,
     );
  $items['chpadminnames'] = array
    ('page callback' => 'drupal_get_form',
     'page arguments' => array('chpadmin_names_form'),
     'access arguments' => array('anai chp list names'),
     'type' => MENU_CALLBACK,
     );
  $items['chpadminclassify'] = array
    ('page callback' => 'drupal_get_form',
     'page arguments' => array('chpadmin_classify_form'),
     'access arguments' => array('anai chp list names'),
     'type' => MENU_CALLBACK,
     );
  return $items;
}



/**********
 ********** Admin
 ********** Address: chpadmin
 ********** Access:  'anai chp admin'
 *********/



function chpadmin_form($form_state) {
  global $user;
  drupal_set_title(t('Portal administration'));

  $form['back'] =
    array('#type' => 'image_button',
	  '#src' => drupal_get_path('module', 'anai').'/back.png',
	  '#submit' => array('chpadmin_form_submit_back'));

  if (user_access('administer users')) {
    $form['users'] =
      array('#type' => 'submit',
	    '#value' => t('Users'),
	    '#submit' => array('chpadmin_form_submit_users'));
  }

  if (user_access('anai chp list names')) {
    $form['names'] =
      array('#type' => 'submit',
	    '#value' => t('Names'),
	    '#submit' => array('chpadmin_form_submit_names'));
  }

  if (user_access('anai chp list classify')) {
    $form['classify'] =
      array('#type' => 'submit',
	    '#value' => t('Classify'),
	    '#submit' => array('chpadmin_form_submit_classify'));
  }

  if (user_access('anai chp list vehicles')) {
    $form['vehicles'] =
      array('#type' => 'submit',
	    '#value' => t('Vehicles'),
	    '#submit' => array('chpadmin_form_submit_vehicles'));
  }

  if (user_access('anai chp edit server')) {
    $form['server'] =
      array('#type' => 'submit',
	    '#value' => t('Server'),
	    '#submit' => array('chpadmin_form_submit_server'));
  }

  if (user_access('anai chp list apps')) {
    $form['apps'] =
      array('#type' => 'submit',
	    '#value' => t('Apps'),
	    '#submit' => array('chpadmin_form_submit_apps'));
  }

  if (user_access('anai chp list crypt')) {
    $form['crypt'] =
      array('#type' => 'submit',
	    '#value' => t('Crypt'),
	    '#submit' => array('chpadmin_form_submit_crypt'));
  }

  $status = chpadmin_investigate_status();
  $form['status'] = chpadmin_status_table_form($status);
  return $form;
}

function chpadmin_form_submit_back($form, &$form_state) {
  unset($form_state['storage']);
  $form_state['redirect'] = 'front_page';
}

function chpadmin_form_submit_users($form, &$form_state) {
  unset($form_state['storage']);
  $form_state['redirect'] = 'admin/user/user';
}

function chpadmin_form_submit_names($form, &$form_state) {
  unset($form_state['storage']);
  $form_state['redirect'] = 'chpadminnames';
}

function chpadmin_form_submit_classify($form, &$form_state) {
  unset($form_state['storage']);
  $form_state['redirect'] = 'chpadminclassify';
}

function chpadmin_form_submit_vehicles($form, &$form_state) {
  unset($form_state['storage']);
  $form_state['redirect'] = 'chpadminvehicles';
}

function chpadmin_form_submit_server($form, &$form_state) {
  unset($form_state['storage']);
  $form_state['redirect'] = 'chpadminserver';
}

function chpadmin_form_submit_apps($form, &$form_state) {
  unset($form_state['storage']);
  $form_state['redirect'] = 'chpadminapps';
}

function chpadmin_form_submit_crypt($form, &$form_state) {
  unset($form_state['storage']);
  $form_state['redirect'] = 'chpadmincrypt';
}

function chpadmin_status_table_form($entries) {
  $form['db'] =
    array('#type' => 'markup', '#theme' => 'chpadmin_status_table');

  $looper = 0;
  foreach ($entries as $entry) {
    $form['db']['item_'.$looper] = array('#value' => $entry['item']);

    $form['db']['system_'.$looper] = array('#value' => $entry['system']);

    $form['db']['status_'.$looper] =
      array('#value' =>
	    $entry['status'] === 'OK' ? theme('image', 'misc/watchdog-ok.png') :
	    ($entry['status'] === 'ERROR' ? theme('image', 'misc/watchdog-error.png') :
	     ($entry['status'] === 'WARNING' ? theme('image', 'misc/watchdog-warning.png') :
	      t('??'))),
	    '#prefix' => '<center>',
	    '#suffix' => '</center>');

    $form['db']['comment_'.$looper] = array('#value' => $entry['comment']);

    $looper++;
  }
  return $form;
}

function theme_chpadmin_status_table($form) {
  // Table Header
  $header = array(t('What'), t('Where'), t('Verdict'), t('Comment'));
  // Table Rows
  $rows = array();
  foreach ($form as $key => $value) {
    if (!strstr($key, 'item_')) {
      continue;
    }
    $looper = substr($key, strlen('item_'));
    $rows[] = array(drupal_render($form['item_'.$looper]),
		    drupal_render($form['system_'.$looper]),
		    array('data' => drupal_render($form['status_'.$looper]),
			  'width' => 1, 'height' => 1),
		    drupal_render($form['comment_'.$looper]));
  }
  // Render Table
  return theme_table($header, $rows);
}



/**********
 ********** Names
 ********** Address: chpadminnames
 ********** Access:  'anai chp list names'
 *********/


function chpadmin_names_form($form_state) {
  if (isset($form_state['storage']['add_names'])) {
    return chpadmin_names_add_form($form_state);
  }
  if (isset($form_state['storage']['names_edit'])) {
    return chpadmin_names_edit_form($form_state);
  }

  drupal_set_title(t('Names admin'));

  $form['back'] =
    array('#type' => 'image_button',
	  '#src' => drupal_get_path('module', 'anai').'/back.png',
	  '#submit' => array('chpadmin_names_form_submit_back'));
  $form['add'] =
    array('#type' => 'image_button',
	  '#src' => drupal_get_path('module', 'anai').'/add.png',
	  '#submit' => array('chpadmin_names_form_submit_add'));

  $entries = array();

  // Default nameopt
  $opt = chdbadmin_get_nameopt();
  $nameopt = array();
  if (!empty($opt)) {
    $nameopt[] = t('Prefix STATUS', array('STATUS' => $opt['Prename'] ? t('used') : t('not used')));
    $nameopt[] = t('First name STATUS', array('STATUS' => $opt['FirstName'] ? t('used') : t('not used')));
    $nameopt[] = t('Middle name STATUS', array('STATUS' => $opt['MiddleName'] ? t('used') : t('not used')));
    $nameopt[] = t('Last name STATUS', array('STATUS' => $opt['LastName'] ? t('used') : t('not used')));
    $nameopt[] = t('Suffix STATUS', array('STATUS' => $opt['Sufname'] ? t('used') : t('not used')));
    $nameopt[] = t('Phone is STATUS', array('STATUS' => $opt['Phone'] ? t('required') : t('not required')));
    $nameopt[] = t('Email is STATUS', array('STATUS' => $opt['Email'] ? t('required') : t('not required')));
    $nameopt[] = t('Email notification is STATUS',
		   array('STATUS' => $opt['Email'] ? t('asked for') : t('not asked for')));
    $nameopt[] = t('Role is STATUS', array('STATUS' => $opt['Role'] ? t('required') : t('not required')));
    $nameopt[] = t('Department is STATUS',
		   array('STATUS' => $opt['Department'] ? t('required') : t('not required')));
    $nameopt[] = t('Title is STATUS', array('STATUS' => $opt['Title'] ? t('required') : t('not required')));
  }
  $entries[] = array('Alias' => t('Default name options'),
		     'List' => theme_item_list($nameopt),
		     'Category' => 'nameopt',
		     'CompanyId' => 'Default');

  $companies = array();
  foreach (chdbprop_get_all_companies() as $company) {
    $companies[$company['CompanyId']] = decode_entities($company['Alias']);
  }

  // Company nameopt
  foreach (chdbadmin_get_all_nameopts() as $opt) {
    if (empty($opt['CompanyId'])) {
      continue;
    }
    if (!isset($companies[$opt['CompanyId']])) {
      // Cleanup
      chdbadmin_delete_nameopt($opt['CompanyId']);
      continue;
    }
    $nameopt = array();
    $nameopt[] = t('Prefix STATUS', array('STATUS' => $opt['Prename'] ? t('used') : t('not used')));
    $nameopt[] = t('First name STATUS', array('STATUS' => $opt['FirstName'] ? t('used') : t('not used')));
    $nameopt[] = t('Middle name STATUS', array('STATUS' => $opt['MiddleName'] ? t('used') : t('not used')));
    $nameopt[] = t('Last name STATUS', array('STATUS' => $opt['LastName'] ? t('used') : t('not used')));
    $nameopt[] = t('Suffix STATUS', array('STATUS' => $opt['Sufname'] ? t('used') : t('not used')));
    $nameopt[] = t('Phone is STATUS', array('STATUS' => $opt['Phone'] ? t('required') : t('not required')));
    $nameopt[] = t('Email is STATUS', array('STATUS' => $opt['Email'] ? t('required') : t('not required')));
    $nameopt[] = t('Email notification is STATUS',
		   array('STATUS' => $opt['Email'] ? t('asked for') : t('not asked for')));
    $nameopt[] = t('Role is STATUS', array('STATUS' => $opt['Role'] ? t('required') : t('not required')));
    $nameopt[] = t('Department is STATUS',
		   array('STATUS' => $opt['Department'] ? t('required') : t('not required')));
    $nameopt[] = t('Title is STATUS', array('STATUS' => $opt['Title'] ? t('required') : t('not required')));
    $entries[] = array('Alias' => t('Name option overrides for:<br>COMP',
				    array('COMP' => $companies[$opt['CompanyId']])),
		       'List' => theme_item_list($nameopt),
		       'Category' => 'nameopt',
		       'CompanyId' => $opt['CompanyId']);
  }

  // Default prenameopt
  $prenameopt = array();
  foreach (chdbadmin_get_prenameopt() as $opt) {
    if (!empty($opt['CompanyId'])) {
      continue;
    }
    $prenameopt[] = decode_entities($opt['Alias']);
  }
  $entries[] = array('Alias' => t('Default prefix options'),
		     'List' => theme_item_list($prenameopt),
		     'Category' => 'prenameopt',
		     'CompanyId' => 'Default');

  // Company prenameopt
  $prenameopt = array();
  foreach (chdbadmin_get_all_prenameopts() as $opt) {
    if (empty($opt['CompanyId'])) {
      continue;
    }
    if (!isset($companies[$opt['CompanyId']])) {
      // Cleanup
      chdbadmin_delete_prenameopt($opt['CompanyId']);
      continue;
    }
    $prenameopt[$opt['CompanyId']][] = decode_entities($opt['Alias']);
  }
  foreach ($prenameopt as $company_id => $opt) {
    $entries[] = array('Alias' => t('Prefix option overrides for:<br>COMP',
				    array('COMP' => $companies[$company_id])),
		       'List' => theme_item_list($opt),
		       'Category' => 'prenameopt',
		       'CompanyId' => $company_id);
  }

  // Default sufnameopt
  $sufnameopt = array();
  foreach (chdbadmin_get_sufnameopt() as $opt) {
    if (!empty($opt['CompanyId'])) {
      continue;
    }
    $sufnameopt[] = decode_entities($opt['Alias']);
  }
  $entries[] = array('Alias' => t('Default suffix options'),
		     'List' => theme_item_list($sufnameopt),
		     'Category' => 'sufnameopt',
		     'CompanyId' => 'Default');

  // Company sufnameopt
  $sufnameopt = array();
  foreach (chdbadmin_get_all_sufnameopts() as $opt) {
    if (empty($opt['CompanyId'])) {
      continue;
    }
    if (!isset($companies[$opt['CompanyId']])) {
      // Cleanup
      chdbadmin_delete_sufnameopt($opt['CompanyId']);
      continue;
    }
    $sufnameopt[$opt['CompanyId']][] = decode_entities($opt['Alias']);
  }
  foreach ($sufnameopt as $company_id => $opt) {
    $entries[] = array('Alias' => t('Suffix option overrides for:<br>COMP',
				    array('COMP' => $companies[$company_id])),
		       'List' => theme_item_list($opt),
		       'Category' => 'sufnameopt',
		       'CompanyId' => $company_id);
  }

  $form['list'] = chpadmin_names_table_form($entries);
  return $form;
}

function chpadmin_names_form_submit_back($form, &$form_state) {
  unset($form_state['storage']);
  $form_state['redirect'] = 'chpadmin';
}

function chpadmin_names_form_submit_add($form, &$form_state) {
  $form_state['storage']['add_names'] = TRUE;
}

function chpadmin_names_table_form($entries) {
  $form['db'] = array('#type' => 'markup', '#theme' => 'chpadmin_names_table');

  if (user_access('anai chp edit names')) {
    $readonly = FALSE;
  } else {
    $readonly = TRUE;
  }

  $looper = 0;
  foreach ($entries as $entry) {
    $form['db']['category_'.$looper] = array('#value' => $entry['Alias']);
    $form['db']['list_'.$looper] = array('#value' => $entry['List']);

    if ($readonly) {
      $form['db']['edit_'.$looper] = array('#value' => '');
    } else {
      $form['db']['edit_'.$looper] =
	array('#type' => 'image_button',
	      '#src' => drupal_get_path('module', 'anai').'/editsmall.png',
	      '#name' => 'op_edit'.$entry['Category'].'__'.$entry['CompanyId'],
	      '#submit' => array('chpadmin_names_form_submit'));
    }

    $looper++;
  }
  return $form;
}

function theme_chpadmin_names_table($form) {
  $header = array(t('Category'), t('Settings'), '');
  $rows = array();
  foreach ($form as $key => $value) {
    if (!strstr($key, 'category_')) {
      continue;
    }
    $looper = substr($key, strlen('category_'));
    $rows[] = array(drupal_render($form['category_'.$looper]),
                    drupal_render($form['list_'.$looper]),
                    array('data' => drupal_render($form['edit_'.$looper]),
			  'width' => 1, 'height' => 1));
  }
  return theme_table($header, $rows);
}

function chpadmin_names_add_form($form_state) {
  drupal_set_title(t('Add name option'));
  global $user;
  $form = array();
  ahah_helper_register($form, $form_state);

  $form['ajax'] =
    array('#prefix' => '<div id="ajax-wrapper">',
	  '#suffix' => '</div>',
	  '#tree' => TRUE);

  $options = array();
  $options['nameopt'] = t('Name options override for a company');
  $options['prenameopt'] = t('Name prefix override for a company');
  $options['sufnameopt'] = t('Name suffix override for a company');
  if (!isset($form_state['storage']['ajax']['Type'])) {
    $form_state['storage']['ajax']['Type'] = key($options);
  }
  $form['ajax']['Type'] =
    array('#type' => 'radios',
	  '#title' => t('Category to add'),
	  '#options' => $options,
	  '#default_value' => $form_state['storage']['ajax']['Type'],
	  '#ahah' => array('event' => 'change',
			   'path' => ahah_helper_path(array('ajax')),
			   'wrapper' => 'ajax-wrapper'));

  // Adding nameopt
  if ($form_state['storage']['ajax']['Type'] === 'nameopt') {
    $existing = array();
    foreach (chdbadmin_get_all_nameopts() as $opt) {
      if (empty($opt['CompanyId'])) {
	continue;
      }
      $existing[$opt['CompanyId']] = TRUE;
    }

    $options = array();
    foreach (chdbprop_get_all_companies() as $company) {
      if (isset($existing[$company['CompanyId']])) {
	continue;
      }
      $options[$company['CompanyId']] =
	decode_entities($company['Alias']).', '.
	decode_entities($company['Street']).', '.
	decode_entities($company['City']);
    }
    if (empty($options)) {
      $form['ajax']['empty'] = array('#value' => '<p>'.t('Company missing.').'<p>');
      $form['ajax']['cancel'] =
	array('#type' => 'image_button',
	      '#src' => drupal_get_path('module', 'anai').'/cancel.png',
	      '#submit' => array('chpadmin_names_add_form_submit_back'));
      return $form;
    }
    $form['ajax']['CompanyId'] =
      array('#type' => 'select',
	    '#title' => t('Company'),
	    '#options' => $options,
	    '#default_value' => $form_state['storage']['ajax']['CompanyId']);

    $options = array();
    $options['Mandatory'] = t('Mandatory');
    $options['Optional'] = t('Optional');
    $options['Select'] = t('Select');
    if (!isset($form_state['storage']['ajax']['Fields'])) {
      $form_state['storage']['ajax']['Fields'] = key($options);
    }
    $form['ajax']['Fields'] =
      array('#type' => 'select',
	    '#title' => t('Fields'),
	    '#options' => $options,
	    '#default_value' => $form_state['storage']['ajax']['Fields']);

    $options = array();
    $options['Prename'] = t('Use name prefix');
    $options['FirstName'] = t('Use first name');
    $options['MiddleName'] = t('Use middle name');
    $options['LastName'] = t('Use last name');
    $options['Sufname'] = t('Use name suffix');
    $options['Phone'] = t('Require phone number');
    $options['Email'] = t('Require email address');
    $options['EmailNotification'] = t('Ask for email notification');
    $options['Role'] = t('Require role');
    $options['Department'] = t('Require department');
    $options['Title'] = t('Require title');
    if (!isset($form_state['storage']['ajax']['nameopt'])) {
      $form_state['storage']['ajax']['nameopt'] = array();
    }
    $form['ajax']['nameopt'] =
      array('#type' => 'checkboxes',
	    '#title' => t('Company name options'),
	    '#options' => $options,
	    '#default_value' => $form_state['storage']['ajax']['nameopt']);
  }

  // Adding prenameopt
  if ($form_state['storage']['ajax']['Type'] === 'prenameopt') {
    $existing = array();
    foreach (chdbadmin_get_all_prenameopts() as $opt) {
      if (empty($opt['CompanyId'])) {
	continue;
      }
      $existing[$opt['CompanyId']] = TRUE;
    }

    $options = array();
    foreach (chdbprop_get_all_companies() as $company) {
      if (isset($existing[$company['CompanyId']])) {
	continue;
      }
      $options[$company['CompanyId']] =
	decode_entities($company['Alias']).', '.
	decode_entities($company['Street']).', '.
	decode_entities($company['City']);
    }
    if (empty($options)) {
      $form['ajax']['empty'] = array('#value' => '<p>'.t('Company missing.').'<p>');
      $form['ajax']['cancel'] =
	array('#type' => 'image_button',
	      '#src' => drupal_get_path('module', 'anai').'/cancel.png',
	      '#submit' => array('chpadmin_names_add_form_submit_back'));
      return $form;
    }
    $form['ajax']['CompanyId'] =
      array('#type' => 'select',
	    '#title' => t('Company'),
	    '#options' => $options,
	    '#default_value' => $form_state['storage']['ajax']['CompanyId']);

    $form['ajax']['prenameopt'] =
      array('#type' => 'fieldset',
	    '#title' => t('Prefixes'));

    if (!isset($form_state['storage']['ajax']['prenameopt']['List'])) {
      $form_state['storage']['ajax']['prenameopt']['List'] = array();
      $options = array();
    } else {
      $options = unserialize($form_state['storage']['ajax']['prenameopt']['List']);
    }

    // Place holder
    $form['ajax']['prenameopt']['Opts'] = array('#type' => 'value');

    // New option
    if (!isset($form_state['storage']['ajax']['prenameopt']['Opt'])) {
      $form_state['storage']['ajax']['prenameopt']['Opt'] = '';
    }
    $form['ajax']['prenameopt']['Opt'] =
      array('#type' => 'textfield',
	    '#title' => t('New prefix'),
	    '#maxlength' => 30,
	    '#default_value' => '');

    // Include new button
    $form['ajax']['prenameopt']['saveprenameoptbtn'] =
      array('#type' => 'button',
	    '#value' => t('Include'),
	    '#ahah' => array('event' => 'change',
			     'path' => ahah_helper_path(array('ajax')),
			     'wrapper' => 'ajax-wrapper'));

    if (strpos($form_state['clicked_button']['#id'], 'saveprenameoptbtn') !== FALSE) {
      if (!empty($form_state['storage']['ajax']['prenameopt']['Opt'])) {
	$options[chpprop_genRandomString20()] =
	  $form_state['storage']['ajax']['prenameopt']['Opt'];
	if (isset($form_state['storage']['ajax']['prenameopt']['Opts'])) {
	  unset($form_state['storage']['ajax']['prenameopt']['Opts']);
	}
      }
    }

    // Remove the unchecked ones from the option list before building the list again
    if (isset($form_state['storage']['ajax']['prenameopt']['Opts']) and
    	!empty($form_state['storage']['ajax']['prenameopt']['Opts'])) {
      $result = array();
      foreach ($form_state['storage']['ajax']['prenameopt']['Opts'] as $key => $value) {
    	if (!$value) {
    	  continue;
    	}
    	$result[$key] = $options[$key];
      }
      $options = $result;
      $form_state['storage']['ajax']['prenameopt']['Opts'] = $options;
    }

    // Regardless of situation, all visible options shall be checked
    $default = array();
    if (!empty($options)) {
      foreach ($options as $key => $value) {
	$default[$key] = $key;
      }
    }
    $form_state['storage']['ajax']['prenameopt']['Opts'] = $default;
    $form['ajax']['prenameopt']['Opts'] =
      array('#type' => 'checkboxes',
	    '#options' => $options,
	    '#default_value' => $form_state['storage']['ajax']['prenameopt']['Opts'],
	    '#ahah' => array('event' => 'change',
			     'path' => ahah_helper_path(array('ajax')),
			     'wrapper' => 'ajax-wrapper'));

    // Save for next round
    $form['ajax']['prenameopt']['List'] =
      array('#type' => 'value',
	    '#value' => serialize($options));
  }

  // Adding sufnameopt
  if ($form_state['storage']['ajax']['Type'] === 'sufnameopt') {
    $existing = array();
    foreach (chdbadmin_get_all_sufnameopts() as $opt) {
      if (empty($opt['CompanyId'])) {
	continue;
      }
      $existing[$opt['CompanyId']] = TRUE;
    }

    $options = array();
    foreach (chdbprop_get_all_companies() as $company) {
      if (isset($existing[$company['CompanyId']])) {
	continue;
      }
      $options[$company['CompanyId']] =
	decode_entities($company['Alias']).', '.
	decode_entities($company['Street']).', '.
	decode_entities($company['City']);
    }
    if (empty($options)) {
      $form['ajax']['empty'] = array('#value' => '<p>'.t('Company missing.').'<p>');
      $form['ajax']['cancel'] =
	array('#type' => 'image_button',
	      '#src' => drupal_get_path('module', 'anai').'/cancel.png',
	      '#submit' => array('chpadmin_names_add_form_submit_back'));
      return $form;
    }
    $form['ajax']['CompanyId'] =
      array('#type' => 'select',
	    '#title' => t('Company'),
	    '#options' => $options,
	    '#default_value' => $form_state['storage']['ajax']['CompanyId']);

    $form['ajax']['sufnameopt'] =
      array('#type' => 'fieldset',
	    '#title' => t('Suffixes'));

    if (!isset($form_state['storage']['ajax']['sufnameopt']['List'])) {
      $form_state['storage']['ajax']['sufnameopt']['List'] = array();
      $options = array();
    } else {
      $options = unserialize($form_state['storage']['ajax']['sufnameopt']['List']);
    }

    // Place holder
    $form['ajax']['sufnameopt']['Opts'] = array('#type' => 'value');

    // New option
    if (!isset($form_state['storage']['ajax']['sufnameopt']['Opt'])) {
      $form_state['storage']['ajax']['sufnameopt']['Opt'] = '';
    }
    $form['ajax']['sufnameopt']['Opt'] =
      array('#type' => 'textfield',
	    '#title' => t('New suffix'),
	    '#maxlength' => 30,
	    '#default_value' => '');

    // Include new button
    $form['ajax']['sufnameopt']['savesufnameoptbtn'] =
      array('#type' => 'button',
	    '#value' => t('Include'),
	    '#ahah' => array('event' => 'change',
			     'path' => ahah_helper_path(array('ajax')),
			     'wrapper' => 'ajax-wrapper'));

    if (strpos($form_state['clicked_button']['#id'], 'savesufnameoptbtn') !== FALSE) {
      if (!empty($form_state['storage']['ajax']['sufnameopt']['Opt'])) {
	$options[chpprop_genRandomString20()] =
	  $form_state['storage']['ajax']['sufnameopt']['Opt'];
	if (isset($form_state['storage']['ajax']['sufnameopt']['Opts'])) {
	  unset($form_state['storage']['ajax']['sufnameopt']['Opts']);
	}
      }
    }

    // Remove the unchecked ones from the option list before building the list again
    if (isset($form_state['storage']['ajax']['sufnameopt']['Opts']) and
    	!empty($form_state['storage']['ajax']['sufnameopt']['Opts'])) {
      $result = array();
      foreach ($form_state['storage']['ajax']['sufnameopt']['Opts'] as $key => $value) {
    	if (!$value) {
    	  continue;
    	}
    	$result[$key] = $options[$key];
      }
      $options = $result;
      $form_state['storage']['ajax']['sufnameopt']['Opts'] = $options;
    }

    // Regardless of situation, all visible options shall be checked
    $default = array();
    if (!empty($options)) {
      foreach ($options as $key => $value) {
	$default[$key] = $key;
      }
    }
    $form_state['storage']['ajax']['sufnameopt']['Opts'] = $default;
    $form['ajax']['sufnameopt']['Opts'] =
      array('#type' => 'checkboxes',
	    '#options' => $options,
	    '#default_value' => $form_state['storage']['ajax']['sufnameopt']['Opts'],
	    '#ahah' => array('event' => 'change',
			     'path' => ahah_helper_path(array('ajax')),
			     'wrapper' => 'ajax-wrapper'));

    // Save for next round
    $form['ajax']['sufnameopt']['List'] =
      array('#type' => 'value',
	    '#value' => serialize($options));
  }

  $form['ajax']['save'] =
    array('#type' => 'image_button',
	  '#src' => drupal_get_path('module', 'anai').'/save.png',
	  '#validate' => array('chpadmin_names_add_form_validate_save'),
	  '#submit' => array('chpadmin_names_add_form_submit_save'));
  $form['ajax']['cancel'] =
    array('#type' => 'image_button',
	  '#src' => drupal_get_path('module', 'anai').'/cancel.png',
	  '#submit' => array('chpadmin_names_add_form_submit_back'));
  return $form;
}

function chpadmin_names_add_form_validate_save($form, &$form_state) {
}

function chpadmin_names_add_form_submit_back($form, &$form_state) {
  unset($form_state['storage']);
  $form_state['redirect'] = 'chpadminnames';
}

function chpadmin_names_add_form_submit_save($form, &$form_state) {
  if ($form_state['values']['ajax']['Type'] === 'nameopt') {
    $company_id = $form_state['values']['ajax']['CompanyId'];
    $nameopt = chdbadmin_get_nameopt($company_id);
    if (empty($nameopt)) {
      if (chdbadmin_insert_nameopt
	  ($form_state['values']['ajax']['Fields'],
	   $form_state['values']['ajax']['nameopt']['Prename'],
	   $form_state['values']['ajax']['nameopt']['FirstName'],
	   $form_state['values']['ajax']['nameopt']['MiddleName'],
	   $form_state['values']['ajax']['nameopt']['LastName'],
	   $form_state['values']['ajax']['nameopt']['Sufname'],
	   $form_state['values']['ajax']['nameopt']['Phone'],
	   $form_state['values']['ajax']['nameopt']['Email'],
	   $form_state['values']['ajax']['nameopt']['EmailNotification'],
	   $form_state['values']['ajax']['nameopt']['Role'],
	   $form_state['values']['ajax']['nameopt']['Department'],
	   $form_state['values']['ajax']['nameopt']['Title'],
	   $company_id)) {
	drupal_set_message('Couldn\'t insert company name options', 'error');
	return;
      }
    } else {
      if (chdbadmin_update_nameopt
	  ($form_state['values']['ajax']['Fields'],
	   $form_state['values']['ajax']['nameopt']['Prename'],
	   $form_state['values']['ajax']['nameopt']['FirstName'],
	   $form_state['values']['ajax']['nameopt']['MiddleName'],
	   $form_state['values']['ajax']['nameopt']['LastName'],
	   $form_state['values']['ajax']['nameopt']['Sufname'],
	   $form_state['values']['ajax']['nameopt']['Phone'],
	   $form_state['values']['ajax']['nameopt']['Email'],
	   $form_state['values']['ajax']['nameopt']['EmailNotification'],
	   $form_state['values']['ajax']['nameopt']['Role'],
	   $form_state['values']['ajax']['nameopt']['Department'],
	   $form_state['values']['ajax']['nameopt']['Title'],
	   $company_id)) {
	drupal_set_message('Couldn\'t update company name options', 'error');
	return;
      }
    }
  }

  if ($form_state['values']['ajax']['Type'] === 'prenameopt') {
    $company_id = $form_state['values']['ajax']['CompanyId'];
    $prenameopt = chdbadmin_get_prenameopt($company_id);
    $prenameopts = unserialize($form_state['values']['ajax']['prenameopt']['List']);
    if (empty($prenameopt)) {
      foreach ($prenameopts as $prename_id => $alias) {
	if (chdbadmin_insert_prenameopt
	    ($prename_id,
	     check_plain($alias),
	     $company_id)) {
	  drupal_set_message('Couldn\'t insert company prefix options', 'error');
	  return;
	}
      }
    } else {
      foreach ($prenameopts as $prename_id => $alias) {
	if (chdbadmin_update_prenameopt
	    ($prename_id,
	     check_plain($alias),
	     $company_id)) {
	  drupal_set_message('Couldn\'t update company prefix options', 'error');
	  return;
	}
      }
    }
  }

  if ($form_state['values']['ajax']['Type'] === 'sufnameopt') {
    $company_id = $form_state['values']['ajax']['CompanyId'];
    $sufnameopt = chdbadmin_get_sufnameopt($company_id);
    $sufnameopts = unserialize($form_state['values']['ajax']['sufnameopt']['List']);
    if (empty($sufnameopt)) {
      foreach ($sufnameopts as $sufname_id => $alias) {
	if (chdbadmin_insert_sufnameopt
	    ($sufname_id,
	     check_plain($alias),
	     $company_id)) {
	  drupal_set_message('Couldn\'t insert company suffix options', 'error');
	  return;
	}
      }
    } else {
      foreach ($sufnameopts as $sufname_id => $alias) {
	if (chdbadmin_update_sufnameopt
	    ($sufname_id,
	     check_plain($alias),
	     $company_id)) {
	  drupal_set_message('Couldn\'t update company suffix options', 'error');
	  return;
	}
      }
    }
  }

  unset($form_state['storage']);
  $form_state['redirect'] = 'chpadminnames';
}

function chpadmin_names_edit_form($form_state) {
  if ($form_state['storage']['confirm_delete']) {
    return confirm_form($form, 'Are you sure?', 'chpadminnames',
			'The company override will be deleted from the system.');
  }

  drupal_set_title(t('Edit name options'));
  $category = $form_state['storage']['Category'];
  $company_id = $form_state['storage']['CompanyId'];
  global $user;
  $form = array();
  ahah_helper_register($form, $form_state);

  if ($category === 'nameopt' and $company_id === 'Default') {
    $opt = chdbadmin_get_nameopt();
    $options = array();
    $options['Mandatory'] = t('Mandatory');
    $options['Optional'] = t('Optional');
    $options['Select'] = t('Select');
    $form['Fields'] =
      array('#type' => 'select',
	    '#title' => t('Fields'),
	    '#options' => $options,
	    '#default_value' => $opt['Fields']);

    $options = array();
    $options['Prename'] = t('Use name prefix');
    $options['FirstName'] = t('Use first name');
    $options['MiddleName'] = t('Use middle name');
    $options['LastName'] = t('Use last name');
    $options['Sufname'] = t('Use name suffix');
    $options['Phone'] = t('Require phone number');
    $options['Email'] = t('Require email address');
    $options['EmailNotification'] = t('Ask for email notification');
    $options['Role'] = t('Require role');
    $options['Department'] = t('Require department');
    $options['Title'] = t('Require title');
    $default = array();
    $default['Prename'] = $opt['Prename'] ? 'Prename' : FALSE;
    $default['FirstName'] = $opt['FirstName'] ? 'FirstName' : FALSE;
    $default['MiddleName'] = $opt['MiddleName'] ? 'MiddleName' : FALSE;
    $default['LastName'] = $opt['LastName'] ? 'LastName' : FALSE;
    $default['Sufname'] = $opt['Sufname'] ? 'Sufname' : FALSE;
    $default['Phone'] = $opt['Phone'] ? 'Phone' : FALSE;
    $default['Email'] = $opt['Email'] ? 'Email' : FALSE;
    $default['EmailNotification'] = $opt['EmailNotification'] ? 'EmailNotification' : FALSE;
    $default['Role'] = $opt['Role'] ? 'Role' : FALSE;
    $default['Department'] = $opt['Department'] ? 'Department' : FALSE;
    $default['Title'] = $opt['Title'] ? 'Title' : FALSE;
    $form['nameopt'] =
      array('#type' => 'checkboxes',
	    '#title' => t('Default name options'),
	    '#options' => $options,
	    '#default_value' => $default);
  }

  if ($category === 'nameopt' and $company_id !== 'Default') {
    $opt = chdbadmin_get_nameopt($company_id);
    $options = array();
    $options['Mandatory'] = t('Mandatory');
    $options['Optional'] = t('Optional');
    $options['Select'] = t('Select');
    $form['Fields'] =
      array('#type' => 'select',
	    '#title' => t('Fields'),
	    '#options' => $options,
	    '#default_value' => $opt['Fields']);

    $options = array();
    $options['Prename'] = t('Use name prefix');
    $options['FirstName'] = t('Use first name');
    $options['MiddleName'] = t('Use middle name');
    $options['LastName'] = t('Use last name');
    $options['Sufname'] = t('Use name suffix');
    $options['Phone'] = t('Require phone number');
    $options['Email'] = t('Require email address');
    $options['EmailNotification'] = t('Ask for email notification');
    $options['Role'] = t('Require role');
    $options['Department'] = t('Require department');
    $options['Title'] = t('Require title');
    $default = array();
    $default['Prename'] = $opt['Prename'] ? 'Prename' : FALSE;
    $default['FirstName'] = $opt['FirstName'] ? 'FirstName' : FALSE;
    $default['MiddleName'] = $opt['MiddleName'] ? 'MiddleName' : FALSE;
    $default['LastName'] = $opt['LastName'] ? 'LastName' : FALSE;
    $default['Sufname'] = $opt['Sufname'] ? 'Sufname' : FALSE;
    $default['Phone'] = $opt['Phone'] ? 'Phone' : FALSE;
    $default['Email'] = $opt['Email'] ? 'Email' : FALSE;
    $default['EmailNotification'] = $opt['EmailNotification'] ? 'EmailNotification' : FALSE;
    $default['Role'] = $opt['Role'] ? 'Role' : FALSE;
    $default['Department'] = $opt['Department'] ? 'Department' : FALSE;
    $default['Title'] = $opt['Title'] ? 'Title' : FALSE;
    $form['nameopt'] =
      array('#type' => 'checkboxes',
	    '#title' => t('Default name options'),
	    '#options' => $options,
	    '#default_value' => $default);
  }

  if ($category === 'prenameopt' and $company_id === 'Default') {
    $form['ajax'] =
      array('#prefix' => '<div id="ajax-wrapper">',
	    '#suffix' => '</div>',
	    '#tree' => TRUE);

    $form['ajax']['prenameopt'] =
      array('#type' => 'fieldset',
	    '#title' => t('Prefixes'));

    if (!isset($form_state['storage']['ajax']['prenameopt']['List'])) {
      $options = array();
      foreach (chdbadmin_get_prenameopt() as $opt) {
	$options[$opt['PrenameId']] = decode_entities($opt['Alias']);
      }
      $form_state['storage']['ajax']['prenameopt']['List'] = $options;
    } else {
      $options = unserialize($form_state['storage']['ajax']['prenameopt']['List']);
    }

    // Place holder
    $form['ajax']['prenameopt']['Opts'] = array('#type' => 'value');

    // New option
    if (!isset($form_state['storage']['ajax']['prenameopt']['Opt'])) {
      $form_state['storage']['ajax']['prenameopt']['Opt'] = '';
    }
    $form['ajax']['prenameopt']['Opt'] =
      array('#type' => 'textfield',
	    '#title' => t('New prefix'),
	    '#maxlength' => 30,
	    '#default_value' => '');

    // Include new button
    $form['ajax']['prenameopt']['saveprenameoptbtn'] =
      array('#type' => 'button',
	    '#value' => t('Include'),
	    '#ahah' => array('event' => 'change',
			     'path' => ahah_helper_path(array('ajax')),
			     'wrapper' => 'ajax-wrapper'));

    if (strpos($form_state['clicked_button']['#id'], 'saveprenameoptbtn') !== FALSE) {
      if (!empty($form_state['storage']['ajax']['prenameopt']['Opt'])) {
	$options[chpprop_genRandomString20()] =
	  $form_state['storage']['ajax']['prenameopt']['Opt'];
	unset($form_state['storage']['ajax']['prenameopt']['Opts']);
      }
    }

    // Remove the unchecked ones from the option list before building the list again
    if (isset($form_state['storage']['ajax']['prenameopt']['Opts']) and
    	!empty($form_state['storage']['ajax']['prenameopt']['Opts'])) {
      $result = array();
      foreach ($form_state['storage']['ajax']['prenameopt']['Opts'] as $key => $value) {
    	if (!$value) {
    	  continue;
    	}
    	$result[$key] = $options[$key];
      }
      $options = $result;
      $form_state['storage']['ajax']['prenameopt']['Opts'] = $options;
    }

    // Regardless of situation, all visible options shall be checked
    $default = array();
    if (!empty($options)) {
      foreach ($options as $key => $value) {
	$default[$key] = $key;
      }
    }
    $form_state['storage']['ajax']['prenameopt']['Opts'] = $default;
    $form['ajax']['prenameopt']['Opts'] =
      array('#type' => 'checkboxes',
	    '#options' => $options,
	    '#default_value' => $form_state['storage']['ajax']['prenameopt']['Opts'],
	    '#ahah' => array('event' => 'change',
			     'path' => ahah_helper_path(array('ajax')),
			     'wrapper' => 'ajax-wrapper'));

    // Save for next round
    $form['ajax']['prenameopt']['List'] =
      array('#type' => 'value',
	    '#value' => serialize($options));
  }

  if ($category === 'prenameopt' and $company_id !== 'Default') {
    $form['ajax'] =
      array('#prefix' => '<div id="ajax-wrapper">',
	    '#suffix' => '</div>',
	    '#tree' => TRUE);

    $form['ajax']['prenameopt'] =
      array('#type' => 'fieldset',
	    '#title' => t('Prefixes'));

    if (!isset($form_state['storage']['ajax']['prenameopt']['List'])) {
      $options = array();
      foreach (chdbadmin_get_prenameopt($company_id) as $opt) {
	$options[$opt['PrenameId']] = decode_entities($opt['Alias']);
      }
      $form_state['storage']['ajax']['prenameopt']['List'] = $options;
    } else {
      $options = unserialize($form_state['storage']['ajax']['prenameopt']['List']);
    }

    // Place holder
    $form['ajax']['prenameopt']['Opts'] = array('#type' => 'value');

    // New option
    if (!isset($form_state['storage']['ajax']['prenameopt']['Opt'])) {
      $form_state['storage']['ajax']['prenameopt']['Opt'] = '';
    }
    $form['ajax']['prenameopt']['Opt'] =
      array('#type' => 'textfield',
	    '#title' => t('New prefix'),
	    '#maxlength' => 30,
	    '#default_value' => '');

    // Include new button
    $form['ajax']['prenameopt']['saveprenameoptbtn'] =
      array('#type' => 'button',
	    '#value' => t('Include'),
	    '#ahah' => array('event' => 'change',
			     'path' => ahah_helper_path(array('ajax')),
			     'wrapper' => 'ajax-wrapper'));

    if (strpos($form_state['clicked_button']['#id'], 'saveprenameoptbtn') !== FALSE) {
      if (!empty($form_state['storage']['ajax']['prenameopt']['Opt'])) {
	$options[chpprop_genRandomString20()] =
	  $form_state['storage']['ajax']['prenameopt']['Opt'];
	unset($form_state['storage']['ajax']['prenameopt']['Opts']);
      }
    }

    // Remove the unchecked ones from the option list before building the list again
    if (isset($form_state['storage']['ajax']['prenameopt']['Opts']) and
    	!empty($form_state['storage']['ajax']['prenameopt']['Opts'])) {
      $result = array();
      foreach ($form_state['storage']['ajax']['prenameopt']['Opts'] as $key => $value) {
    	if (!$value) {
    	  continue;
    	}
    	$result[$key] = $options[$key];
      }
      $options = $result;
      $form_state['storage']['ajax']['prenameopt']['Opts'] = $options;
    }

    // Regardless of situation, all visible options shall be checked
    $default = array();
    if (!empty($options)) {
      foreach ($options as $key => $value) {
	$default[$key] = $key;
      }
    }
    $form_state['storage']['ajax']['prenameopt']['Opts'] = $default;
    $form['ajax']['prenameopt']['Opts'] =
      array('#type' => 'checkboxes',
	    '#options' => $options,
	    '#default_value' => $form_state['storage']['ajax']['prenameopt']['Opts'],
	    '#ahah' => array('event' => 'change',
			     'path' => ahah_helper_path(array('ajax')),
			     'wrapper' => 'ajax-wrapper'));

    // Save for next round
    $form['ajax']['prenameopt']['List'] =
      array('#type' => 'value',
	    '#value' => serialize($options));
  }

  if ($category === 'sufnameopt' and $company_id === 'Default') {
    $form['ajax'] =
      array('#prefix' => '<div id="ajax-wrapper">',
	    '#suffix' => '</div>',
	    '#tree' => TRUE);

    $form['ajax']['sufnameopt'] =
      array('#type' => 'fieldset',
	    '#title' => t('Suffixes'));

    if (!isset($form_state['storage']['ajax']['sufnameopt']['List'])) {
      $options = array();
      foreach (chdbadmin_get_sufnameopt() as $opt) {
	$options[$opt['SufnameId']] = decode_entities($opt['Alias']);
      }
      $form_state['storage']['ajax']['sufnameopt']['List'] = $options;
    } else {
      $options = unserialize($form_state['storage']['ajax']['sufnameopt']['List']);
    }

    // Place holder
    $form['ajax']['sufnameopt']['Opts'] = array('#type' => 'value');

    // New option
    if (!isset($form_state['storage']['ajax']['sufnameopt']['Opt'])) {
      $form_state['storage']['ajax']['sufnameopt']['Opt'] = '';
    }
    $form['ajax']['sufnameopt']['Opt'] =
      array('#type' => 'textfield',
	    '#title' => t('New suffix'),
	    '#maxlength' => 30,
	    '#default_value' => '');

    // Include new button
    $form['ajax']['sufnameopt']['savesufnameoptbtn'] =
      array('#type' => 'button',
	    '#value' => t('Include'),
	    '#ahah' => array('event' => 'change',
			     'path' => ahah_helper_path(array('ajax')),
			     'wrapper' => 'ajax-wrapper'));

    if (strpos($form_state['clicked_button']['#id'], 'savesufnameoptbtn') !== FALSE) {
      if (!empty($form_state['storage']['ajax']['sufnameopt']['Opt'])) {
	$options[chpprop_genRandomString20()] =
	  $form_state['storage']['ajax']['sufnameopt']['Opt'];
	unset($form_state['storage']['ajax']['sufnameopt']['Opts']);
      }
    }

    // Remove the unchecked ones from the option list before building the list again
    if (isset($form_state['storage']['ajax']['sufnameopt']['Opts']) and
    	!empty($form_state['storage']['ajax']['sufnameopt']['Opts'])) {
      $result = array();
      foreach ($form_state['storage']['ajax']['sufnameopt']['Opts'] as $key => $value) {
    	if (!$value) {
    	  continue;
    	}
    	$result[$key] = $options[$key];
      }
      $options = $result;
      $form_state['storage']['ajax']['sufnameopt']['Opts'] = $options;
    }

    // Regardless of situation, all visible options shall be checked
    $default = array();
    if (!empty($options)) {
      foreach ($options as $key => $value) {
	$default[$key] = $key;
      }
    }
    $form_state['storage']['ajax']['sufnameopt']['Opts'] = $default;
    $form['ajax']['sufnameopt']['Opts'] =
      array('#type' => 'checkboxes',
	    '#options' => $options,
	    '#default_value' => $form_state['storage']['ajax']['sufnameopt']['Opts'],
	    '#ahah' => array('event' => 'change',
			     'path' => ahah_helper_path(array('ajax')),
			     'wrapper' => 'ajax-wrapper'));

    // Save for next round
    $form['ajax']['sufnameopt']['List'] =
      array('#type' => 'value',
	    '#value' => serialize($options));
  }

  if ($category === 'sufnameopt' and $company_id !== 'Default') {
    $form['ajax'] =
      array('#prefix' => '<div id="ajax-wrapper">',
	    '#suffix' => '</div>',
	    '#tree' => TRUE);

    $form['ajax']['sufnameopt'] =
      array('#type' => 'fieldset',
	    '#title' => t('Suffixes'));

    if (!isset($form_state['storage']['ajax']['sufnameopt']['List'])) {
      $options = array();
      foreach (chdbadmin_get_sufnameopt($company_id) as $opt) {
	$options[$opt['SufnameId']] = decode_entities($opt['Alias']);
      }
      $form_state['storage']['ajax']['sufnameopt']['List'] = $options;
    } else {
      $options = unserialize($form_state['storage']['ajax']['sufnameopt']['List']);
    }

    // Place holder
    $form['ajax']['sufnameopt']['Opts'] = array('#type' => 'value');

    // New option
    if (!isset($form_state['storage']['ajax']['sufnameopt']['Opt'])) {
      $form_state['storage']['ajax']['sufnameopt']['Opt'] = '';
    }
    $form['ajax']['sufnameopt']['Opt'] =
      array('#type' => 'textfield',
	    '#title' => t('New suffix'),
	    '#maxlength' => 30,
	    '#default_value' => '');

    // Include new button
    $form['ajax']['sufnameopt']['savesufnameoptbtn'] =
      array('#type' => 'button',
	    '#value' => t('Include'),
	    '#ahah' => array('event' => 'change',
			     'path' => ahah_helper_path(array('ajax')),
			     'wrapper' => 'ajax-wrapper'));

    if (strpos($form_state['clicked_button']['#id'], 'savesufnameoptbtn') !== FALSE) {
      if (!empty($form_state['storage']['ajax']['sufnameopt']['Opt'])) {
	$options[chpprop_genRandomString20()] =
	  $form_state['storage']['ajax']['sufnameopt']['Opt'];
	unset($form_state['storage']['ajax']['sufnameopt']['Opts']);
      }
    }

    // Remove the unchecked ones from the option list before building the list again
    if (isset($form_state['storage']['ajax']['sufnameopt']['Opts']) and
    	!empty($form_state['storage']['ajax']['sufnameopt']['Opts'])) {
      $result = array();
      foreach ($form_state['storage']['ajax']['sufnameopt']['Opts'] as $key => $value) {
    	if (!$value) {
    	  continue;
    	}
    	$result[$key] = $options[$key];
      }
      $options = $result;
      $form_state['storage']['ajax']['sufnameopt']['Opts'] = $options;
    }

    // Regardless of situation, all visible options shall be checked
    $default = array();
    if (!empty($options)) {
      foreach ($options as $key => $value) {
	$default[$key] = $key;
      }
    }
    $form_state['storage']['ajax']['sufnameopt']['Opts'] = $default;
    $form['ajax']['sufnameopt']['Opts'] =
      array('#type' => 'checkboxes',
	    '#options' => $options,
	    '#default_value' => $form_state['storage']['ajax']['sufnameopt']['Opts'],
	    '#ahah' => array('event' => 'change',
			     'path' => ahah_helper_path(array('ajax')),
			     'wrapper' => 'ajax-wrapper'));

    // Save for next round
    $form['ajax']['sufnameopt']['List'] =
      array('#type' => 'value',
	    '#value' => serialize($options));
  }

  $form['save'] =
    array('#type' => 'image_button',
	  '#src' => drupal_get_path('module', 'anai').'/save.png',
	  '#submit' => array('chpadmin_names_edit_form_submit_save'));
  $form['back'] =
    array('#type' => 'image_button',
	  '#src' => drupal_get_path('module', 'anai').'/cancel.png',
	  '#submit' => array('chpadmin_names_edit_form_submit_back'));
  if ($company_id !== 'Default') {
    $form['delete'] =
      array('#type' => 'image_button',
	    '#src' => drupal_get_path('module', 'anai').'/delete.png',
	    '#submit' => array('chpadmin_names_edit_form_submit_delete'));
  }
  return $form;
}

function chpadmin_names_edit_form_submit_save($form, &$form_state) {
  $category = $form_state['storage']['Category'];
  $company_id = $form_state['storage']['CompanyId'];

  if ($category === 'nameopt' and $company_id === 'Default') {
    $nameopt = chdbadmin_get_nameopt();
    if (empty($nameopt)) {
      if (chdbadmin_insert_nameopt
	  ($form_state['values']['Fields'],
	   $form_state['values']['nameopt']['Prename'],
	   $form_state['values']['nameopt']['FirstName'],
	   $form_state['values']['nameopt']['MiddleName'],
	   $form_state['values']['nameopt']['LastName'],
	   $form_state['values']['nameopt']['Sufname'],
	   $form_state['values']['nameopt']['Phone'],
	   $form_state['values']['nameopt']['Email'],
	   $form_state['values']['nameopt']['EmailNotification'],
	   $form_state['values']['nameopt']['Role'],
	   $form_state['values']['nameopt']['Department'],
	   $form_state['values']['nameopt']['Title'])) {
	drupal_set_message('Couldn\'t insert default name options', 'error');
	return;
      }
    } else {
      if (chdbadmin_update_nameopt
	  ($form_state['values']['Fields'],
	   $form_state['values']['nameopt']['Prename'],
	   $form_state['values']['nameopt']['FirstName'],
	   $form_state['values']['nameopt']['MiddleName'],
	   $form_state['values']['nameopt']['LastName'],
	   $form_state['values']['nameopt']['Sufname'],
	   $form_state['values']['nameopt']['Phone'],
	   $form_state['values']['nameopt']['Email'],
	   $form_state['values']['nameopt']['EmailNotification'],
	   $form_state['values']['nameopt']['Role'],
	   $form_state['values']['nameopt']['Department'],
	   $form_state['values']['nameopt']['Title'])) {
	drupal_set_message('Couldn\'t update default name options', 'error');
	return;
      }
    }
  }

  if ($category === 'nameopt' and $company_id !== 'Default') {
    $nameopt = chdbadmin_get_nameopt($company_id);
    if (empty($nameopt)) {
      if (chdbadmin_insert_nameopt
	  ($form_state['values']['Fields'],
	   $form_state['values']['nameopt']['Prename'],
	   $form_state['values']['nameopt']['FirstName'],
	   $form_state['values']['nameopt']['MiddleName'],
	   $form_state['values']['nameopt']['LastName'],
	   $form_state['values']['nameopt']['Sufname'],
	   $form_state['values']['nameopt']['Phone'],
	   $form_state['values']['nameopt']['Email'],
	   $form_state['values']['nameopt']['EmailNotification'],
	   $form_state['values']['nameopt']['Role'],
	   $form_state['values']['nameopt']['Department'],
	   $form_state['values']['nameopt']['Title'],
	   $company_id)) {
	drupal_set_message('Couldn\'t insert company name options', 'error');
	return;
      }
    } else {
      if (chdbadmin_update_nameopt
	  ($form_state['values']['Fields'],
	   $form_state['values']['nameopt']['Prename'],
	   $form_state['values']['nameopt']['FirstName'],
	   $form_state['values']['nameopt']['MiddleName'],
	   $form_state['values']['nameopt']['LastName'],
	   $form_state['values']['nameopt']['Sufname'],
	   $form_state['values']['nameopt']['Phone'],
	   $form_state['values']['nameopt']['Email'],
	   $form_state['values']['nameopt']['EmailNotification'],
	   $form_state['values']['nameopt']['Role'],
	   $form_state['values']['nameopt']['Department'],
	   $form_state['values']['nameopt']['Title'],
	   $company_id)) {
	drupal_set_message('Couldn\'t update company name options', 'error');
	return;
      }
    }
  }

  if ($category === 'prenameopt' and $company_id === 'Default') {
    $prenameopt = array();
    foreach (chdbadmin_get_prenameopt() as $opt) {
      $prenameopt[$opt['PrenameId']] = TRUE;
    }
    $list = unserialize($form_state['values']['ajax']['prenameopt']['List']);
    foreach ($list as $prename_id => $alias) {
      if (!isset($prenameopt[$prename_id])) {
	if (chdbadmin_insert_prenameopt
	    ($prename_id,
	     check_plain($alias))) {
	  drupal_set_message('Couldn\'t insert default prefix options', 'error');
	  return;
	}
      } else {
	if (chdbadmin_update_prenameopt
	    ($prename_id,
	     check_plain($alias))) {
	  drupal_set_message('Couldn\'t update default prefix options', 'error');
	  return;
	}
      }
    }
  }

  if ($category === 'prenameopt' and $company_id !== 'Default') {
    $prenameopt = array();
    foreach (chdbadmin_get_prenameopt($company_id) as $opt) {
      $prenameopt[$opt['PrenameId']] = TRUE;
    }
    $list = unserialize($form_state['values']['ajax']['prenameopt']['List']);
    foreach ($list as $prename_id => $alias) {
      if (!isset($prenameopt[$prename_id])) {
	if (chdbadmin_insert_prenameopt
	    ($prename_id,
	     check_plain($alias),
	     $company_id)) {
	  drupal_set_message('Couldn\'t insert company prefix options', 'error');
	  return;
	}
      } else {
	if (chdbadmin_update_prenameopt
	    ($prename_id,
	     check_plain($alias),
	     $company_id)) {
	  drupal_set_message('Couldn\'t update company prefix options', 'error');
	  return;
	}
      }
    }
  }

  if ($category === 'sufnameopt' and $company_id === 'Default') {
    $sufnameopt = array();
    foreach (chdbadmin_get_sufnameopt() as $opt) {
      $sufnameopt[$opt['SufnameId']] = TRUE;
    }
    $list = unserialize($form_state['values']['ajax']['sufnameopt']['List']);
    foreach ($list as $sufname_id => $alias) {
      if (!isset($sufnameopt[$sufname_id])) {
	if (chdbadmin_insert_sufnameopt
	    ($sufname_id,
	     check_plain($alias))) {
	  drupal_set_message('Couldn\'t insert default prefix options', 'error');
	  return;
	}
      } else {
	if (chdbadmin_update_sufnameopt
	    ($sufname_id,
	     check_plain($alias))) {
	  drupal_set_message('Couldn\'t update default prefix options', 'error');
	  return;
	}
      }
    }
  }

  if ($category === 'sufnameopt' and $company_id !== 'Default') {
    $sufnameopt = array();
    foreach (chdbadmin_get_sufnameopt($company_id) as $opt) {
      $sufnameopt[$opt['SufnameId']] = TRUE;
    }
    $list = unserialize($form_state['values']['ajax']['sufnameopt']['List']);
    foreach ($list as $sufname_id => $alias) {
      if (!isset($sufnameopt[$sufname_id])) {
	if (chdbadmin_insert_sufnameopt
	    ($sufname_id,
	     check_plain($alias),
	     $company_id)) {
	  drupal_set_message('Couldn\'t insert company prefix options', 'error');
	  return;
	}
      } else {
	if (chdbadmin_update_sufnameopt
	    ($sufname_id,
	     check_plain($alias),
	     $company_id)) {
	  drupal_set_message('Couldn\'t update company prefix options', 'error');
	  return;
	}
      }
    }
  }

  unset($form_state['storage']);
  $form_state['redirect'] = 'chpadminnames';
}

function chpadmin_names_edit_form_submit_back($form, &$form_state) {
  unset($form_state['storage']);
  $form_state['redirect'] = 'chpadminnames';
}

function chpadmin_names_edit_form_submit_delete($form, &$form_state) {
  $form_state['storage']['confirm_delete'] = TRUE;
}

function chpadmin_names_form_submit($form, &$form_state) {
  if (isset($form_state['storage']['confirm_delete'])) {
    $category = $form_state['storage']['Category'];
    $company_id = $form_state['storage']['CompanyId'];
    if ($category === 'nameopt') {
      chdbadmin_delete_nameopt($company_id);
    }
    if ($category === 'prenameopt') {
      chdbadmin_delete_prenameopt($company_id);
    }
    if ($category === 'sufnameopt') {
      chdbadmin_delete_sufnameopt($company_id);
    }
    unset($form_state['storage']);
    $form_state['redirect'] = 'chpadminnames';
    return;
  }

  $company_id = NULL;
  foreach ($form_state['values'] as $key => $value) {
    if (FALSE !== strpos($key, 'op_edit')) {
      $category = substr($key, strlen('op_edit'), strpos($key, '__') - strlen('op_edit'));
      $company_id = substr($key, 2 + strpos($key, '__'));
      break;
    }
  }
  if ($company_id !== NULL) {
    //drupal_set_message('Detailed view of id:'.$id);
    $form_state['storage']['Category'] = $category;
    $form_state['storage']['CompanyId'] = $company_id;
    $form_state['storage']['names_edit'] = TRUE;
    return;
  }
}



/**********
 ********** Classify
 ********** Address: chpadminclassify
 ********** Access:  'anai chp list classify'
 *********/



function chpadmin_classify_form($form_state) {
  if (isset($form_state['storage']['classify_edit'])) {
    return chpadmin_classify_edit_form($form_state);
  }

  drupal_set_title(t('Classify admin'));

  $form['back'] =
    array('#type' => 'image_button',
	  '#src' => drupal_get_path('module', 'anai').'/back.png',
	  '#submit' => array('chpadmin_classify_form_submit_back'));

  $entries = array();

  // Default lot types
  $options = array();
  foreach (chdbadmin_get_lottypeopt() as $opt) {
    $options[] = decode_entities($opt['Alias']);
  }
  $entries[] = array('Alias' => t('Lot type options'),
		     'List' => theme_item_list($options),
		     'Category' => 'lottypeopt',
		     'CompanyId' => 'Default');

  // Default lot class
  $options = array();
  foreach (chdbadmin_get_lotclassopt() as $opt) {
    $options[] = decode_entities($opt['Alias']);
  }
  $entries[] = array('Alias' => t('Lot classification options'),
		     'List' => theme_item_list($options),
		     'Category' => 'lotclassopt',
		     'CompanyId' => 'Default');

  //anai_dbg($entries, '$entries');
  $form['list'] = chpadmin_classify_table_form($entries);
  return $form;
}

function chpadmin_classify_form_submit_back($form, &$form_state) {
  unset($form_state['storage']);
  $form_state['redirect'] = 'chpadmin';
}

function chpadmin_classify_table_form($entries) {
  $form['db'] = array('#type' => 'markup', '#theme' => 'chpadmin_classify_table');

  if (user_access('anai chp edit classify')) {
    $readonly = FALSE;
  } else {
    $readonly = TRUE;
  }

  $looper = 0;
  foreach ($entries as $entry) {
    $form['db']['category_'.$looper] = array('#value' => $entry['Alias']);
    $form['db']['list_'.$looper] = array('#value' => $entry['List']);

    if ($readonly) {
      $form['db']['edit_'.$looper] = array('#value' => '');
    } else {
      $form['db']['edit_'.$looper] =
	array('#type' => 'image_button',
	      '#src' => drupal_get_path('module', 'anai').'/editsmall.png',
	      '#name' => 'op_edit'.$entry['Category'].'__'.$entry['CompanyId'],
	      '#submit' => array('chpadmin_classify_form_submit'));
    }

    $looper++;
  }
  return $form;
}

function theme_chpadmin_classify_table($form) {
  $header = array(t('Category'), t('Settings'), '');
  $rows = array();
  foreach ($form as $key => $value) {
    if (!strstr($key, 'category_')) {
      continue;
    }
    $looper = substr($key, strlen('category_'));
    $rows[] = array(drupal_render($form['category_'.$looper]),
                    drupal_render($form['list_'.$looper]),
                    array('data' => drupal_render($form['edit_'.$looper]),
			  'width' => 1, 'height' => 1));
  }
  return theme_table($header, $rows);
}

function chpadmin_classify_edit_form($form_state) {
  drupal_set_title(t('Edit classify option'));
  $category = $form_state['storage']['Category'];
  global $user;
  $form = array();
  ahah_helper_register($form, $form_state);

  if ($category === 'lotclassopt') {
    $form['ajax'] =
      array('#prefix' => '<div id="ajax-wrapper">',
	    '#suffix' => '</div>',
	    '#tree' => TRUE);

    $form['ajax']['lotclassopt'] =
      array('#type' => 'fieldset',
	    '#title' => t('Lot classifications'));

    // Create the list of options
    if (!isset($form_state['storage']['ajax']['lotclassopt']['ListLeft']) or
	!isset($form_state['storage']['ajax']['lotclassopt']['ListRight'])) {
      $options_left = array();
      $options_right = array();
      foreach (chdbadmin_get_lotclassopt() as $opt) {
	$options_left[$opt['LotclassId']] = '';
	$options_right[$opt['LotclassId']] = decode_entities($opt['Alias']);
      }
      $form_state['storage']['ajax']['lotclassopt']['ListLeft'] = $options_left;
      $form_state['storage']['ajax']['lotclassopt']['ListRight'] = $options_right;
    } else {
      $options_left = unserialize($form_state['storage']['ajax']['lotclassopt']['ListLeft']);
      $options_right = unserialize($form_state['storage']['ajax']['lotclassopt']['ListRight']);
    }

    // Result table
    $form['ajax']['lotclassopt']['AllOpts'] = array('#prefix' => '<table>', '#suffix' => '</table>');

    // New option
    if (!isset($form_state['storage']['ajax']['lotclassopt']['NewOpt'])) {
      $form_state['storage']['ajax']['lotclassopt']['NewOpt'] = '';
    }
    $form['ajax']['lotclassopt']['NewOpt'] =
      array('#type' => 'textfield',
	    '#title' => t('New option'),
	    '#maxlength' => 30,
	    '#default_value' => '');

    // Include new button
    $form['ajax']['lotclassopt']['savelotclassoptbtn'] =
      array('#type' => 'button',
	    '#value' => t('Include'),
	    '#ahah' => array('event' => 'change',
			     'path' => ahah_helper_path(array('ajax')),
			     'wrapper' => 'ajax-wrapper'));

    // Append new option to the list
    if (strpos($form_state['clicked_button']['#id'], 'savelotclassoptbtn') !== FALSE) {
      if (!empty($form_state['storage']['ajax']['lotclassopt']['NewOpt'])) {
	$lotclass_id = chpprop_genRandomString20();
	$options_left[$lotclass_id] = '';
	$options_right[$lotclass_id] =
	  $form_state['storage']['ajax']['lotclassopt']['NewOpt'];
      }
    }

    // Remove the unchecked ones from the option list before building the list again
    if (!empty($options_left)) {
      $result_left = array();
      $result_right = array();
      foreach ($options_left as $key => $value) {
	if (isset($form_state['storage']['ajax']['lotclassopt']['AllOpts'][$key]) and
	    !$form_state['storage']['ajax']['lotclassopt']['AllOpts'][$key]['Left']) {
	  continue;
	}
	$result_left[$key] = $options_left[$key];
	$result_right[$key] = $options_right[$key];
      }
      $options_left = $result_left;
      $options_right = $result_right;
    }

    // Update with any changes made from the textfields
    foreach ($options_right as $key => $value) {
      if (isset($form_state['storage']['ajax']['lotclassopt']['AllOpts'][$key]['Right']) and
	  empty($form_state['storage']['ajax']['lotclassopt']['AllOpts'][$key]['Right'])) {
	form_set_error('ajax][lotclassopt][AllOpts]['.$key.'][Right',
		       t('Option name field is required.'));
      } elseif (isset($form_state['storage']['ajax']['lotclassopt']['AllOpts'][$key]['Right'])) {
	$options_right[$key] = $form_state['storage']['ajax']['lotclassopt']['AllOpts'][$key]['Right'];
      }
    }

    // Regardless of situation, all visible options shall be checked
    $default_left = array();
    $default_right = array();
    if (!empty($options_left)) {
      foreach ($options_left as $key => $value) {
	$default_left[$key] = $key;
      }
    }
    if (!empty($options_right)) {
      foreach ($options_right as $key => $value) {
	$default_right[$key] = $value;
      }
    }

    // Fill the reult table placed above
    if (!empty($options_left)) {
      foreach ($options_left as $lotclass_id => $value) {
	$form_state['storage']['ajax']['lotclassopt']['AllOpts'][$lotclass_id]['Left'] =
	  $default_left[$lotclass_id];
	$form['ajax']['lotclassopt']['AllOpts'][$lotclass_id]['Left'] =
	  array('#type' => 'checkbox',
		'#default_value' => $default_left[$lotclass_id],
		'#ahah' => array('event' => 'change',
				 'path' => ahah_helper_path(array('ajax')),
				 'wrapper' => 'ajax-wrapper'),
		'#prefix' => '<tr><td>',
		'#suffix' => '</td>');
	$form_state['storage']['ajax']['lotclassopt']['AllOpts'][$lotclass_id]['Right'] =
	  $default_right[$lotclass_id];
	$form['ajax']['lotclassopt']['AllOpts'][$lotclass_id]['Right'] =
	  array('#type' => 'textfield',
		'#maxlength' => 30,
		'#default_value' => $default_right[$lotclass_id],
		'#prefix' => '<td>',
		'#suffix' => '</td></tr>');
      }
    }

    // Save for next round
    $form['ajax']['lotclassopt']['ListLeft'] =
      array('#type' => 'value',
	    '#value' => serialize($options_left));
    $form['ajax']['lotclassopt']['ListRight'] =
      array('#type' => 'value',
	    '#value' => serialize($options_right));
  }

  if ($category === 'lottypeopt') {
    $form['ajax'] =
      array('#prefix' => '<div id="ajax-wrapper">',
	    '#suffix' => '</div>',
	    '#tree' => TRUE);

    $form['ajax']['lottypeopt'] =
      array('#type' => 'fieldset',
	    '#title' => t('Lot types'));

    // Create the list of options
    if (!isset($form_state['storage']['ajax']['lottypeopt']['ListLeft']) or
	!isset($form_state['storage']['ajax']['lottypeopt']['ListRight'])) {
      $options_left = array();
      $options_right = array();
      foreach (chdbadmin_get_lottypeopt() as $opt) {
	$options_left[$opt['LottypeId']] = '';
	$options_right[$opt['LottypeId']] = decode_entities($opt['Alias']);
      }
      $form_state['storage']['ajax']['lottypeopt']['ListLeft'] = $options_left;
      $form_state['storage']['ajax']['lottypeopt']['ListRight'] = $options_right;
    } else {
      $options_left = unserialize($form_state['storage']['ajax']['lottypeopt']['ListLeft']);
      $options_right = unserialize($form_state['storage']['ajax']['lottypeopt']['ListRight']);
    }

    // Result table
    $form['ajax']['lottypeopt']['AllOpts'] = array('#prefix' => '<table>', '#suffix' => '</table>');

    // New option
    if (!isset($form_state['storage']['ajax']['lottypeopt']['NewOpt'])) {
      $form_state['storage']['ajax']['lottypeopt']['NewOpt'] = '';
    }
    $form['ajax']['lottypeopt']['NewOpt'] =
      array('#type' => 'textfield',
	    '#title' => t('New option'),
	    '#maxlength' => 30,
	    '#default_value' => '');

    // Include new button
    $form['ajax']['lottypeopt']['savelottypeoptbtn'] =
      array('#type' => 'button',
	    '#value' => t('Include'),
	    '#ahah' => array('event' => 'change',
			     'path' => ahah_helper_path(array('ajax')),
			     'wrapper' => 'ajax-wrapper'));

    // Append new option to the list
    if (strpos($form_state['clicked_button']['#id'], 'savelottypeoptbtn') !== FALSE) {
      if (!empty($form_state['storage']['ajax']['lottypeopt']['NewOpt'])) {
	$lottype_id = chpprop_genRandomString20();
	$options_left[$lottype_id] = '';
	$options_right[$lottype_id] =
	  $form_state['storage']['ajax']['lottypeopt']['NewOpt'];
      }
    }

    // Remove the unchecked ones from the option list before building the list again
    if (!empty($options_left)) {
      $result_left = array();
      $result_right = array();
      foreach ($options_left as $key => $value) {
	if (isset($form_state['storage']['ajax']['lottypeopt']['AllOpts'][$key]) and
	    !$form_state['storage']['ajax']['lottypeopt']['AllOpts'][$key]['Left']) {
	  continue;
	}
	$result_left[$key] = $options_left[$key];
	$result_right[$key] = $options_right[$key];
      }
      $options_left = $result_left;
      $options_right = $result_right;
    }

    // Update with any changes made from the textfields
    foreach ($options_right as $key => $value) {
      if (isset($form_state['storage']['ajax']['lottypeopt']['AllOpts'][$key]['Right']) and
	  empty($form_state['storage']['ajax']['lottypeopt']['AllOpts'][$key]['Right'])) {
	form_set_error('ajax][lottypeopt][AllOpts]['.$key.'][Right',
		       t('Option name field is required.'));
      } elseif (isset($form_state['storage']['ajax']['lottypeopt']['AllOpts'][$key]['Right'])) {
	$options_right[$key] = $form_state['storage']['ajax']['lottypeopt']['AllOpts'][$key]['Right'];
      }
    }

    // Regardless of situation, all visible options shall be checked
    $default_left = array();
    $default_right = array();
    if (!empty($options_left)) {
      foreach ($options_left as $key => $value) {
	$default_left[$key] = $key;
      }
    }
    if (!empty($options_right)) {
      foreach ($options_right as $key => $value) {
	$default_right[$key] = $value;
      }
    }

    // Fill the reult table placed above
    if (!empty($options_left)) {
      foreach ($options_left as $lottype_id => $value) {
	$form_state['storage']['ajax']['lottypeopt']['AllOpts'][$lottype_id]['Left'] =
	  $default_left[$lottype_id];
	$form['ajax']['lottypeopt']['AllOpts'][$lottype_id]['Left'] =
	  array('#type' => 'checkbox',
		'#default_value' => $default_left[$lottype_id],
		'#ahah' => array('event' => 'change',
				 'path' => ahah_helper_path(array('ajax')),
				 'wrapper' => 'ajax-wrapper'),
		'#prefix' => '<tr><td>',
		'#suffix' => '</td>');
	$form_state['storage']['ajax']['lottypeopt']['AllOpts'][$lottype_id]['Right'] =
	  $default_right[$lottype_id];
	$form['ajax']['lottypeopt']['AllOpts'][$lottype_id]['Right'] =
	  array('#type' => 'textfield',
		'#maxlength' => 30,
		'#default_value' => $default_right[$lottype_id],
		'#prefix' => '<td>',
		'#suffix' => '</td></tr>');
      }
    }

    // Save for next round
    $form['ajax']['lottypeopt']['ListLeft'] =
      array('#type' => 'value',
	    '#value' => serialize($options_left));
    $form['ajax']['lottypeopt']['ListRight'] =
      array('#type' => 'value',
	    '#value' => serialize($options_right));
  }

  $form['save'] =
    array('#type' => 'image_button',
	  '#src' => drupal_get_path('module', 'anai').'/save.png',
	  '#submit' => array('chpadmin_classify_edit_form_submit_save'));
  $form['back'] =
    array('#type' => 'image_button',
	  '#src' => drupal_get_path('module', 'anai').'/cancel.png',
	  '#submit' => array('chpadmin_classify_edit_form_submit_back'));
  return $form;
}

function chpadmin_classify_edit_form_submit_back($form, &$form_state) {
  unset($form_state['storage']);
  $form_state['redirect'] = 'chpadminclassify';
}

function chpadmin_classify_edit_form_submit_save($form, &$form_state) {
  $category = $form_state['storage']['Category'];

  if ($category === 'lotclassopt') {
    $lotclassopt = array();
    foreach (chdbadmin_get_lotclassopt() as $opt) {
      $lotclassopt[$opt['LotclassId']] = TRUE;
    }
    $list = unserialize($form_state['values']['ajax']['lotclassopt']['ListRight']);

    // Update with any changes made from the textfields
    foreach ($list as $key => $alias) {
      $list[$key] = $form_state['values']['ajax']['lotclassopt']['AllOpts'][$key]['Right'];
    }
 
    foreach ($list as $key => $alias) {
      if (!isset($lotclassopt[$key])) {
	if (chdbadmin_insert_lotclassopt
	    ($key,
	     check_plain($alias))) {
	  drupal_set_message('Couldn\'t insert lot class options', 'error');
	  return;
	}
      } else {
	if (chdbadmin_update_lotclassopt
	    ($key,
	     check_plain($alias))) {
	  drupal_set_message('Couldn\'t update lot class options', 'error');
	  return;
	}
      }
      $lotclassopt[$key] = FALSE;
    }

    // Delete those not used anymore
    foreach ($lotclassopt as $key => $value) {
      if ($value) {
	chdbadmin_delete_lotclassopt($key);
      }
    }
  }


  if ($category === 'lottypeopt') {
    $lottypeopt = array();
    foreach (chdbadmin_get_lottypeopt() as $opt) {
      $lottypeopt[$opt['LottypeId']] = TRUE;
    }
    $list = unserialize($form_state['values']['ajax']['lottypeopt']['ListRight']);

    // Update with any changes made from the textfields
    foreach ($list as $key => $alias) {
      $list[$key] = $form_state['values']['ajax']['lottypeopt']['AllOpts'][$key]['Right'];
    }
 
    foreach ($list as $key => $alias) {
      if (!isset($lottypeopt[$key])) {
	if (chdbadmin_insert_lottypeopt
	    ($key,
	     check_plain($alias))) {
	  drupal_set_message('Couldn\'t insert lot type options', 'error');
	  return;
	}
      } else {
	if (chdbadmin_update_lottypeopt
	    ($key,
	     check_plain($alias))) {
	  drupal_set_message('Couldn\'t update lot type options', 'error');
	  return;
	}
      }
      $lottypeopt[$key] = FALSE;
    }

    // Delete those not used anymore
    foreach ($lottypeopt as $key => $value) {
      if ($value) {
	chdbadmin_delete_lottypeopt($key);
      }
    }
  }

  unset($form_state['storage']);
  $form_state['redirect'] = 'chpadminclassify';
}

function chpadmin_classify_form_submit($form, &$form_state) {
  $category = NULL;
  foreach ($form_state['values'] as $key => $value) {
    if (FALSE !== strpos($key, 'op_edit')) {
      $category = substr($key, strlen('op_edit'), strpos($key, '__') - strlen('op_edit'));
      $company_id = substr($key, 2 + strpos($key, '__'));
      break;
    }
  }
  if ($category !== NULL) {
    //drupal_set_message('Detailed view of id:'.$id);
    $form_state['storage']['Category'] = $category;
    $form_state['storage']['CompanyId'] = $company_id;
    $form_state['storage']['classify_edit'] = TRUE;
    return;
  }
}



/**********
 ********** Add vehicle
 ********** Address: chpadminvehicleadd
 ********** Access:  'anai chp add vehicles'
 *********/



function chpadmin_vehicle_add_form($form_state) {
  drupal_set_title(t('Add vehicle'));

  $form['Make'] =
    array('#type' => 'textfield',
	  '#title' => t('Make'),
	  '#maxlength' => 30);

  $form['save'] =
    array('#type' => 'image_button',
	  '#src' => drupal_get_path('module', 'anai').'/save.png',
	  '#validate' => array('chpadmin_vehicle_add_form_validate_save'),
	  '#submit' => array('chpadmin_vehicle_add_form_submit_save'));

  $form['cancel'] =
    array('#type' => 'image_button',
	  '#src' => drupal_get_path('module', 'anai').'/cancel.png',
	  '#submit' => array('chpadmin_vehicle_add_form_submit_back'));

  return $form;
}

function chpadmin_vehicle_add_form_submit_back($form, &$form_state) {
  unset($form_state['storage']);
  $form_state['redirect'] = 'chpadminvehicles';
}

function chpadmin_vehicle_add_form_validate_save($form, &$form_state) {
  if (empty($form_state['values']['Make'])) {
    form_set_error('Make', t('Make field is required.'));
    return;
  }
  $make = trim($form_state['values']['Make']);
  if (chdbadmin_make_exists($make)) {
    form_set_error('Make', t('Make already registered.'));
    return;
  }
}

function chpadmin_vehicle_add_form_submit_save($form, &$form_state) {
  $make = trim($form_state['values']['Make']);
  $model = trim($form_state['values']['Model']);
  if (chdbadmin_insert_vehicle($make, $model)) {
    drupal_set_message('Could not insert vehicle', 'error');
    return;
  }

  if (chdbprop_insert_agentpoll_makes()) {
    drupal_set_message('Could not insert vehicle poll', 'error');
    return;
  }

  unset($form_state['storage']);
  $form_state['redirect'] = 'chpadminvehicles';
}



/**********
 ********** Vehicles
 ********** Address: chpadminvehicles
 ********** Access:  'anai chp list vehicles'
 *********/



function chpadmin_vehicles_form($form_state) {
  if (isset($form_state['storage']['detailed_edit'])) {
    return chpadmin_vehicles_edit_form($form_state);
  }

  drupal_set_title(t('Vehicle admin'));

  $form['back'] =
    array('#type' => 'image_button',
	  '#src' => drupal_get_path('module', 'anai').'/back.png',
	  '#submit' => array('chpadmin_vehicles_form_submit_back'));

  $form['add'] =
    array('#type' => 'image_button',
	  '#src' => drupal_get_path('module', 'anai').'/add.png',
	  '#submit' => array('chpadmin_vehicles_form_submit_add'));

  $vehicles = array();
  foreach (chdbadmin_get_all_vehicles() as $vehicle) {
    $vehicles[$vehicle['Make']][] = $vehicle['Model'];
  }

  if (sizeof($vehicles) == 0) {
    if (chdbadmin_insert_default_vehicles()) {
      $form['empty'] =
	array('#value' => '<p>'.t('Empty. No makes registered.').'<p>');
      return $form;
    }
    foreach (chdbadmin_get_all_vehicles() as $vehicle) {
      $vehicles[$vehicle['Make']][] = $vehicle['Model'];
    }
  }

  $form['vehicles'] = chpadmin_vehicles_table_form($vehicles);
  return $form;
}

function chpadmin_vehicles_form_submit_add($form, &$form_state) {
  unset($form_state['storage']);
  $form_state['redirect'] = 'chpadminvehicleadd';
}

function chpadmin_vehicles_form_submit_back($form, &$form_state) {
  unset($form_state['storage']);
  $form_state['redirect'] = 'chpadmin';
}

function chpadmin_vehicles_table_form($entries) {
  $form['db'] =
    array('#type' => 'markup', '#theme' => 'chpadmin_vehicles_table');

  if (user_access('anai chp edit vehicles')) {
    $readonly = FALSE;
  } else {
    $readonly = TRUE;
  }

  $looper = 0;
  foreach ($entries as $make => $models) {
    $form['db']['make_'.$looper] =
      array('#value' => $make);

    $form['db']['numfrags_'.$looper.'_'.count($models)] =
      array('#type' => 'hidden', '#value' => '');

    $frag = 0;
    foreach ($models as $model) {
      $form['db']['model_'.$looper.'_'.$frag] =	array('#value' => $model);
      $frag++;
    }

    if ($readonly) {
      $form['db']['edit_'.$looper] = array('#value' => '');
    } else {
      $form['db']['edit_'.$looper] =
	array('#type' => 'image_button',
	      '#src' => drupal_get_path('module', 'anai').'/editsmall.png',
	      '#name' => 'op_edit'.$make,
	      '#submit' => array('chpadmin_vehicles_form_submit'));
    }
    $looper++;
  }
  return $form;
}

function theme_chpadmin_vehicles_table($form) {
  // Table Header
  $header = array('Make', 'Models', '');
  // Table Rows
  $rows = array();
  foreach ($form as $key => $value) {
    if (!strstr($key, 'numfrags_')) {
      continue;
    }
    $looper = substr($key, strlen('numfrags_'));
    $looper = substr($looper, 0, strpos($looper, '_'));
    $numfrags = substr($key, strlen('numfrags_'.$looper.'_'));
    $rows[] = array(array('data' => drupal_render($form['make_'.$looper]),
			  'rowspan' => $numfrags),
		    drupal_render($form['model_'.$looper.'_0']),
		    array('data' => drupal_render($form['edit_'.$looper]),
			  'rowspan' => $numfrags,
			  'width' => 1, 'height' => 1),
		    );
    for ($i = 1; $i < $numfrags; $i++) {
      $rows[] = array(drupal_render($form['model_'.$looper.'_'.$i]));
    }
  }
  // Render Table
  return theme_table($header, $rows);
}

function chpadmin_vehicles_form_submit($form, &$form_state) {
  if ($form_state['storage']['delete']) {
    unset($form_state['storage']['delete']);
    $form_state['storage']['confirm_delete'] = TRUE;
    return;
  }
  if ($form_state['storage']['confirm_delete']) {
    $make = $form_state['storage']['make'];
    if (chdbadmin_delete_vehicle($make)) {
      drupal_set_message('Could not delete vehicle', 'error');
      return;
    }

    unset($form_state['storage']);
    $form_state['redirect'] = 'chpadminvehicles';
  }
  // Retrieve which table button
  $make = '';
  foreach ($form_state['values'] as $key => $value) {
    if (strstr($key, 'op_edit')) {
      $make = substr($key, strlen('op_edit'));
      break;
    }
  }
  if (strlen($make) > 0) {
    //drupal_set_message('Detailed edit of id:'.$id);
    $form_state['storage']['make'] = $make;
    $form_state['storage']['detailed_edit'] = TRUE;
    return;
  }
}

function chpadmin_vehicles_edit_form($form_state) {
  if ($form_state['storage']['confirm_delete']) {
    return confirm_form($form, 'Are you sure?', 'chpadminvehicles',
			'Vehicle will be deleted from the system.');
  }

  $make = $form_state['storage']['make'];
  drupal_set_title(t('Edit - MAKE', array('MAKE' => $make)));

  $form['save'] =
    array('#type' => 'image_button',
	  '#src' => drupal_get_path('module', 'anai').'/save.png',
	  '#validate' => array('chpadmin_vehicle_edit_form_validate_save'),
	  '#submit' => array('chpadmin_vehicle_edit_form_submit_save'));

  $form['cancel'] =
    array('#type' => 'image_button',
	  '#src' => drupal_get_path('module', 'anai').'/cancel.png',
	  '#submit' => array('chpadmin_vehicle_edit_form_submit_back'));

  if (user_access('anai chp delete vehicles')) {
    $form['delete'] =
      array('#type' => 'image_button',
	    '#src' => drupal_get_path('module', 'anai').'/delete.png',
  	    '#submit' => array('chpadmin_vehicle_edit_form_submit_delete'));
  }
  return $form;
}

function chpadmin_vehicle_edit_form_submit_back($form, &$form_state) {
  unset($form_state['storage']);
  $form_state['redirect'] = 'chpadminvehicles';
}

function chpadmin_vehicle_edit_form_validate_save($form, &$form_state) {
}

function chpadmin_vehicle_edit_form_submit_delete($form, &$form_state) {
  $form_state['storage']['confirm_delete'] = TRUE;
}

function chpadmin_vehicle_edit_form_submit_save($form, &$form_state) {
  $make = $form_state['storage']['make'];

  unset($form_state['storage']);
  $form_state['redirect'] = 'chpadminvehicles';
}



/**********
 ********** Add apps
 ********** Address: chpadminappadd
 ********** Access:  'anai chp add apps'
 *********/



function chpadmin_app_add_form($form_state) {
  drupal_set_title(t('Add app'));

  $form['Alias'] =
    array('#type' => 'textfield',
	  '#title' => t('APP Name'),
	  '#maxlength' => 64);

  // Create policy options
  $options = array();
  $options['Enforcement'] = chpadmin_app_name('Enforcement');
  $options['Valet'] = chpadmin_app_name('Valet');
  $options['Securepark'] = chpadmin_app_name('Securepark');
  $options['Videopark'] = chpadmin_app_name('Videopark');

  // Layout policy options
  $form['Policy'] =
    array('#type' => 'checkboxes',
	  '#title' => t('Type'),
	  '#options' => $options);

  $form['save'] =
    array('#type' => 'image_button',
	  '#src' => drupal_get_path('module', 'anai').'/save.png',
	  '#validate' => array('chpadmin_app_add_form_validate_save'),
	  '#submit' => array('chpadmin_app_add_form_submit_save'));

  $form['cancel'] =
    array('#type' => 'image_button',
	  '#src' => drupal_get_path('module', 'anai').'/cancel.png',
	  '#submit' => array('chpadmin_app_add_form_submit_back'));

  return $form;
}

function chpadmin_app_add_form_submit_back($form, &$form_state) {
  unset($form_state['storage']);
  $form_state['redirect'] = 'chpadminapps';
}

function chpadmin_app_add_form_validate_save($form, &$form_state) {
  if (empty($form_state['values']['Alias'])) {
    form_set_error('Alias', t('APP Name field is required.'));
    return;
  }
}

function chpadmin_app_add_form_submit_save($form, &$form_state) {
  $app_id = chpprop_genRandomString20();
  $alias = $form_state['values']['Alias'];
  $enforcement = $form_state['values']['Policy']['Enforcement'];
  $valet = $form_state['values']['Policy']['Valet'];
  $securepark = $form_state['values']['Policy']['Securepark'];
  $videopark = $form_state['values']['Policy']['Videopark'];

  if (chdbprop_insert_app
      ($app_id,
       check_plain($alias),
       $enforcement,
       $valet,
       $securepark,
       $videopark)) {
    drupal_set_message('Could not insert app', 'error');
    return;
  }

  unset($form_state['storage']);
  $form_state['redirect'] = 'chpadminapps';
}



/**********
 ********** Apps
 ********** Address: chpadminapps
 ********** Access:  'anai chp list apps'
 *********/



function chpadmin_apps_form($form_state) {
  if ($form_state['storage']['detailed_edit']) {
    return chpadmin_apps_edit_form($form_state);
  }

  drupal_set_title(t('Mobile APP admin'));

  $form['back'] =
    array('#type' => 'image_button',
	  '#src' => drupal_get_path('module', 'anai').'/back.png',
	  '#submit' => array('chpadmin_apps_form_submit_back'));

  $form['add'] =
    array('#type' => 'image_button',
	  '#src' => drupal_get_path('module', 'anai').'/add.png',
	  '#submit' => array('chpadmin_apps_form_submit_add'));

  $apps = chdbprop_get_all_apps();

  if (sizeof($apps) == 0) {
    $form['empty'] =
      array('#value' => '<p>'.t('Empty. No apps registered.'));
    return $form;
  }

  $form['apps'] = chpadmin_apps_table_form($apps);
  return $form;
}

function chpadmin_apps_form_submit_add($form, &$form_state) {
  unset($form_state['storage']);
  $form_state['redirect'] = 'chpadminappadd';
}

function chpadmin_apps_form_submit_back($form, &$form_state) {
  unset($form_state['storage']);
  $form_state['redirect'] = 'chpadmin';
}

function chpadmin_apps_table_form($entries) {
  $form['db'] =
    array('#type' => 'markup', '#value' => '',
	  '#theme' => 'chpadmin_apps_table');

  if (user_access('anai chp edit apps')) {
    $readonly = FALSE;
  } else {
    $readonly = TRUE;
  }

  $looper = 0;
  foreach ($entries as $entry) {
    $form['db']['alias_'.$looper] = array('#value' => decode_entities($entry['Alias']));

    $list = array();
    if ($entry['EnforcementPolicy']) {
      $list[] = chpadmin_app_name('Enforcement');
    }
    if ($entry['ValetPolicy']) {
      $list[] = chpadmin_app_name('Valet');
    }
    if ($entry['SecureparkPolicy']) {
      $list[] = chpadmin_app_name('Securepark');
    }
    if ($entry['VideoparkPolicy']) {
      $list[] = chpadmin_app_name('Videopark');
    }
    $form['db']['type_'.$looper] = array('#value' => theme_item_list($list));

    if ($readonly) {
      $form['db']['edit_'.$looper] = array('#value' => '');
    } else {
      $form['db']['edit_'.$looper] =
	array('#type' => 'image_button',
	      '#src' => drupal_get_path('module', 'anai').'/editsmall.png',
	      '#name' => 'op_edit'.$entry['Id'],
	      '#submit' => array('chpadmin_apps_form_submit'));
    }
    $looper++;
  }
  return $form;
}

function theme_chpadmin_apps_table($form) {
  // Table Header
  $header = array('App', 'Type', '');
  // Table Rows
  $rows = array();
  foreach ($form as $key => $value) {
    if (!strstr($key, 'alias_')) {
      continue;
    }
    $looper = substr($key, strlen('alias_'));
    $rows[] = array(drupal_render($form['alias_'.$looper]),
		    drupal_render($form['type_'.$looper]),
		    array('data' => drupal_render($form['edit_'.$looper]),
			  'width' => 1, 'height' => 1),
		    );
  }
  // Render Table
  return theme_table($header, $rows);
}

function chpadmin_apps_form_submit($form, &$form_state) {
  if ($form_state['storage']['delete']) {
    unset($form_state['storage']['delete']);
    $form_state['storage']['confirm_delete'] = TRUE;
    return;
  }
  if ($form_state['storage']['confirm_delete']) {
    $id = $form_state['storage']['id'];
    if (chdbprop_delete_app_id($id)) {
      drupal_set_message('Could not delete app', 'error');
      return;
    }

    unset($form_state['storage']);
    $form_state['redirect'] = 'chpadminapps';
  }
  $id = -1;
  foreach ($form_state['values'] as $key => $value) {
    if (strstr($key, 'op_edit')) {
      $id = substr($key, strlen('op_edit'));
      break;
    }
  }
  if ($id > 0) {
    //drupal_set_message('Detailed edit of id:'.$id);
    $form_state['storage']['id'] = $id;
    $form_state['storage']['detailed_edit'] = TRUE;
    return;
  }
}

function chpadmin_apps_edit_form($form_state) {
  if ($form_state['storage']['confirm_delete']) {
    return confirm_form($form, 'Are you sure?', 'chpadminapps',
			'APP will be deleted from the system.');
  }

  drupal_set_title(t('Edit app'));
  $id = $form_state['storage']['id'];
  $app = chdbprop_get_app_id($id);

  $form['Alias'] =
    array('#type' => 'textfield',
	  '#title' => t('APP Name'),
	  '#maxlength' => 64,
	  '#default_value' => decode_entities($app['Alias']));

  // Create policy options
  $options = array();
  $options['Enforcement'] = chpadmin_app_name('Enforcement');
  $options['Valet'] = chpadmin_app_name('Valet');
  $options['Securepark'] = chpadmin_app_name('Securepark');
  $options['Videopark'] = chpadmin_app_name('Videopark');

  $default = array();
  $default['Enforcement'] = $app['EnforcementPolicy'] ? 'Enforcement' : FALSE;
  $default['Valet'] = $app['ValetPolicy'] ? 'Valet' : FALSE;
  $default['Securepark'] = $app['SecureparkPolicy'] ? 'Securepark' : FALSE;
  $default['Videopark'] = $app['VideoparkPolicy'] ? 'Videopark' : FALSE;

  // Layout policy options
  $form['Policy'] =
    array('#type' => 'checkboxes',
	  '#options' => $options,
	  '#default_value' => $default);

  $form['save'] =
    array('#type' => 'image_button',
	  '#src' => drupal_get_path('module', 'anai').'/save.png',
	  '#validate' => array('chpadmin_app_edit_form_validate_save'),
	  '#submit' => array('chpadmin_app_edit_form_submit_save'));

  $form['cancel'] =
    array('#type' => 'image_button',
	  '#src' => drupal_get_path('module', 'anai').'/cancel.png',
	  '#submit' => array('chpadmin_app_edit_form_submit_back'));

  if (user_access('anai chp delete apps')) {
    $form['delete'] =
      array('#type' => 'image_button',
	    '#src' => drupal_get_path('module', 'anai').'/delete.png',
  	    '#validate' => array('chpadmin_app_edit_form_validate_delete'));
  }
  return $form;
}

function chpadmin_app_edit_form_submit_back($form, &$form_state) {
  unset($form_state['storage']);
  $form_state['redirect'] = 'chpadminapps';
}

function chpadmin_app_edit_form_validate_save($form, &$form_state) {
  if (empty($form_state['values']['Alias'])) {
    form_set_error('Alias', t('APP Name field is required.'));
    return;
  }
}

function chpadmin_app_edit_form_validate_delete($form, &$form_state) {
  $form_state['storage']['delete'] = TRUE;
}

function chpadmin_app_edit_form_submit_save($form, &$form_state) {
  $id = $form_state['storage']['id'];
  $alias = $form_state['values']['Alias'];
  $enforcement_policy = $form_state['values']['Policy']['Enforcement'];
  $valet_policy = $form_state['values']['Policy']['Valet'];

  if (chdbprop_update_app
      ($id, $alias, $enforcement_policy, $valet_policy)) {
    drupal_set_message('Could not update app', 'error');
    return;
  }

  unset($form_state['storage']);
  $form_state['redirect'] = 'chpadminapps';
}



/**********
 ********** Add crypt
 ********** Address: chpadmincryptadd
 ********** Access:  'anai chp add crypt'
 *********/



function chpadmin_crypt_add_form($form_state) {
  drupal_set_title(t('Add encryption'));

  $form['KEK'] =
    array('#type' => 'textfield',
	  '#title' => t('KEK'),
	  '#maxlength' => 64);

  $form['DEK'] =
    array('#type' => 'textfield',
	  '#title' => t('DEK'),
	  '#maxlength' => 64);

  $form['save'] =
    array('#type' => 'image_button',
	  '#src' => drupal_get_path('module', 'anai').'/save.png',
	  '#validate' => array('chpadmin_crypt_add_form_validate_save'),
	  '#submit' => array('chpadmin_crypt_add_form_submit_save'));

  $form['cancel'] =
    array('#type' => 'image_button',
	  '#src' => drupal_get_path('module', 'anai').'/cancel.png',
	  '#submit' => array('chpadmin_crypt_add_form_submit_back'));

  return $form;
}

function chpadmin_crypt_add_form_submit_back($form, &$form_state) {
  unset($form_state['storage']);
  $form_state['redirect'] = 'chpadmincrypt';
}

function chpadmin_crypt_add_form_validate_save($form, &$form_state) {
  if (empty($form_state['values']['KEK'])) {
    form_set_error('KEK', t('KEK field is required.'));
    return;
  }
  if (empty($form_state['values']['DEK'])) {
    form_set_error('DEK', t('DEK field is required.'));
    return;
  }
}

function chpadmin_crypt_add_form_submit_save($form, &$form_state) {
  $kek = $form_state['values']['KEK'];
  $dek = $form_state['values']['DEK'];

  if (chdbprop_insert_agentcrypt($kek, $dek)) {
    drupal_set_message('Could not insert crypt', 'error');
    return;
  }

  unset($form_state['storage']);
  $form_state['redirect'] = 'chpadmincrypt';
}



/**********
 ********** Crypt
 ********** Address: chpadmincrypt
 ********** Access:  'anai chp list crypt'
 *********/



function chpadmin_crypt_form($form_state) {
  if ($form_state['storage']['detailed_edit']) {
    return chpadmin_crypt_edit_form($form_state);
  }

  drupal_set_title(t('Encryption admin'));

  $form['back'] =
    array('#type' => 'image_button',
	  '#src' => drupal_get_path('module', 'anai').'/back.png',
	  '#submit' => array('chpadmin_crypt_form_submit_back'));

  $form['add'] =
    array('#type' => 'image_button',
	  '#src' => drupal_get_path('module', 'anai').'/add.png',
	  '#submit' => array('chpadmin_crypt_form_submit_add'));

  $crypt = chdbprop_get_agentcrypts();

  if (sizeof($crypt) == 0) {
    $form['empty'] =
      array('#value' => '<p>'.t('Empty.'));
    return $form;
  }

  $form['crypt'] = chpadmin_crypt_table_form($crypt);
  return $form;
}

function chpadmin_crypt_form_submit_add($form, &$form_state) {
  unset($form_state['storage']);
  $form_state['redirect'] = 'chpadmincryptadd';
}

function chpadmin_crypt_form_submit_back($form, &$form_state) {
  unset($form_state['storage']);
  $form_state['redirect'] = 'chpadmin';
}

function chpadmin_crypt_table_form($entries) {
  $form['db'] =
    array('#type' => 'markup', '#value' => '',
	  '#theme' => 'chpadmin_crypt_table');

  if (user_access('anai chp edit crypt')) {
    $readonly = FALSE;
  } else {
    $readonly = TRUE;
  }

  $looper = 0;
  foreach ($entries as $entry) {
    $form['db']['kek_'.$looper] = array('#value' => $entry['KEK']);
    $form['db']['dek_'.$looper] = array('#value' => $entry['DEK']);

    if ($readonly) {
      $form['db']['edit_'.$looper] = array('#value' => '');
    } else {
      $form['db']['edit_'.$looper] =
	array('#type' => 'image_button',
	      '#src' => drupal_get_path('module', 'anai').'/editsmall.png',
	      '#name' => 'op_edit'.$entry['Id'],
	      '#submit' => array('chpadmin_crypt_form_submit'));
    }
    $looper++;
  }
  return $form;
}

function theme_chpadmin_crypt_table($form) {
  // Table Header
  $header = array('KEK', 'DEK', '');
  // Table Rows
  $rows = array();
  foreach ($form as $key => $value) {
    if (!strstr($key, 'kek_')) {
      continue;
    }
    $looper = substr($key, strlen('kek_'));
    $rows[] = array(drupal_render($form['kek_'.$looper]),
		    drupal_render($form['dek_'.$looper]),
		    array('data' => drupal_render($form['edit_'.$looper]),
			  'width' => 1, 'height' => 1),
		    );
  }
  // Render Table
  return theme_table($header, $rows);
}

function chpadmin_crypt_form_submit($form, &$form_state) {
  if ($form_state['storage']['confirm_delete']) {
    $id = $form_state['storage']['id'];
    if (chdbprop_delete_agentcrypt_id($id)) {
      drupal_set_message('Could not delete crypt', 'error');
      return;
    }

    unset($form_state['storage']);
    $form_state['redirect'] = 'chpadmincrypt';
  }
  $id = -1;
  foreach ($form_state['values'] as $key => $value) {
    if (strstr($key, 'op_edit')) {
      $id = substr($key, strlen('op_edit'));
      break;
    }
  }
  if ($id > 0) {
    //drupal_set_message('Detailed edit of id:'.$id);
    $form_state['storage']['id'] = $id;
    $form_state['storage']['detailed_edit'] = TRUE;
    return;
  }
}

function chpadmin_crypt_edit_form($form_state) {
  if ($form_state['storage']['confirm_delete']) {
    return confirm_form($form, 'Are you sure?', 'chpadmincrypt',
			'Crypt will be deleted from the system.');
  }

  drupal_set_title(t('Edit crypt'));
  $id = $form_state['storage']['id'];
  $crypt = chdbprop_get_agentcrypt_id($id);

  $form['DEK'] =
    array('#type' => 'textfield',
	  '#title' => t('DEK'),
	  '#maxlength' => 64,
	  '#default_value' => $crypt['DEK']);

  $form['save'] =
    array('#type' => 'image_button',
	  '#src' => drupal_get_path('module', 'anai').'/save.png',
	  '#validate' => array('chpadmin_crypt_add_form_validate_save'),
	  '#submit' => array('chpadmin_crypt_edit_form_submit_save'));

  $form['cancel'] =
    array('#type' => 'image_button',
	  '#src' => drupal_get_path('module', 'anai').'/cancel.png',
	  '#submit' => array('chpadmin_crypt_edit_form_submit_back'));

  if (user_access('anai chp delete crypt')) {
    $form['delete'] =
      array('#type' => 'image_button',
	    '#src' => drupal_get_path('module', 'anai').'/delete.png',
  	    '#validate' => array('chpadmin_crypt_edit_form_validate_delete'));
  }
  return $form;
}

function chpadmin_crypt_edit_form_submit_back($form, &$form_state) {
  unset($form_state['storage']);
  $form_state['redirect'] = 'chpadmincrypt';
}

function chpadmin_crypt_edit_form_submit_delete($form, &$form_state) {
  $form_state['storage']['confirm_delete'] = TRUE;
}

function chpadmin_crypt_edit_form_submit_save($form, &$form_state) {
  $id = $form_state['storage']['id'];
  $dek = $form_state['values']['DEK'];

  if (chdbprop_update_agentcrypt($id, $dek)) {
    drupal_set_message('Could not update crypt', 'error');
    return;
  }

  unset($form_state['storage']);
  $form_state['redirect'] = 'chpadmincrypt';
}



/**********
 ********** Server
 ********** Address: chpadminserver
 ********** Access:  'anai chp edit server'
 *********/



function chpadmin_server_form($form_state) {
  drupal_set_title(t('Mobile Unit Server'));
  global $base_root;

  $server = chdbadmin_get_server();

  if (empty($server)) {
    substr($base_root, strpos($base_root, '//') + 2);
  } else {
    $domain = decode_entities($server['Domain']);
  }

  $form['Domain'] =
    array('#type' => 'textfield',
	  '#title' => t('Domain'),
	  '#maxlength' => 128,
	  '#default_value' => $domain);

  $form['Port'] =
    array('#type' => 'textfield',
	  '#title' => t('Port'),
	  '#maxlength' => 10,
	  '#default_value' => decode_entities($server['Port']));

  $form['save'] =
    array('#type' => 'image_button',
	  '#src' => drupal_get_path('module', 'anai').'/save.png',
	  '#submit' => array('chpadmin_server_form_submit_save'));

  $form['cancel'] =
    array('#type' => 'image_button',
	  '#src' => drupal_get_path('module', 'anai').'/cancel.png',
	  '#submit' => array('chpadmin_server_form_submit_back'));

  return $form;
}

function chpadmin_server_form_validate_save($form, &$form_state) {
  if (empty($form_state['values']['Domain'])) {
    form_set_error('Make', t('Domain field is required.'));
    return;
  }
  if (empty($form_state['values']['Port'])) {
    form_set_error('Make', t('Port field is required.'));
    return;
  }
  if (!preg_match('/\d+/', $form_state['values']['Port'])) {
    form_set_error('Port', t('Port must be an integer value.'));
    return;
  }
  if ($form_state['values']['Port'] < 0) {
    form_set_error('Port', t('Port must be a positive value.'));
    return;
  }
}

function chpadmin_server_form_submit_back($form, &$form_state) {
  unset($form_state['storage']);
  $form_state['redirect'] = 'chpadmin';
}

function chpadmin_server_form_submit_save($form, &$form_state) {
  if (chdbadmin_delete_server()) {
    drupal_set_message('Could not delete old server settings', 'error');
    return;
  }
  $domain = check_plain($form_state['values']['Domain']);
  $port = check_plain($form_state['values']['Port']);
  if (chdbadmin_insert_server($domain, $port)) {
    drupal_set_message('Could not insert server settings', 'error');
    return;
  }
  unset($form_state['storage']);
  $form_state['redirect'] = 'chpadmin';
}




