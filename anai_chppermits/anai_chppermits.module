<?php
// $Id$
require_once("anai_chppermits.inc");
require_once("anai_chppermits_container.inc");
require_once("anai_chppermits_account.inc");
require_once("anai_chppermits_validation.inc");

drupal_add_js(drupal_get_path('module', 'anai_chppermits').'/anytime.js');
drupal_add_css(drupal_get_path('module', 'anai_chppermits').'/anytime.css');



/**
 * @file
 * ANAI CHP Permits
 *
 * Permit management.
 *
 */



/**
 * Implementation of hook_init().
 * 
 */



/**
 * Implementation of hook_cron().
 * 
 */
function anai_chppermits_cron() {
  $now = chpuser_datetime_utc_to_utc('now');
  // Standalone permits
  $skip_delete = FALSE;
  if (chdbperm_cron_retire_permits($now->format("Y-m-d H:i:s"))) {
    watchdog('anai_chpperm',
	     'cron_retire_permits('.$now->format("Y-m-d H:i:s").') failed');
  }
  if (chdbperm_cron_purge_history($now->format("Y-m-d H:i:s"))) {
    watchdog('anai_chpperm',
	     'cron_purge_history('.$now->format("Y-m-d H:i:s").') failed');
    $skip_delete = TRUE;
  }
  if (!$skip_delete) {
    if (chdbperm_cron_delete_permits($now->format("Y-m-d H:i:s"))) {
      watchdog('anai_chpperm',
	       'cron_delete_permits('.$now->format("Y-m-d H:i:s").') failed');
    }
  }
}



/**
 * Implementation of hook_user().
 * 
 */



/**
 * Implementation of hook_perm().
 * 
 */
function anai_chppermits_perm() {
  return array(// Containers
	       'anai chp add permit container',
	       'anai chp list permit container',
	       'anai chp edit permit container',
	       'anai chp delete permit container',
	       // Permits
	       'anai chp add permits',
	       'anai chp edit permits',
	       'anai chp list permits',
	       'anai chp search permits',
	       'anai chp search retention permits',
	       'anai chp early checkout permits',
	       'anai chp delete permits',
	       // Accounts
	       'anai chp add permit account',
	       'anai chp list permit account',
	       'anai chp edit permit account',
	       'anai chp delete permit account',
	       // Validations
	       'anai chp add permit validation',
	       'anai chp list permit validation',
	       'anai chp edit permit validation',
	       'anai chp delete permit validation',
	       // Notes
	       'anai chp add permit notes',
	       'anai chp edit permit notes',
	       'anai chp solve permit notes',
	       'anai chp list permit notes',
	       'anai chp delete permit notes',
	       // Payments
	       'anai chp add permit payments',
	       'anai chp list permit payments',
	       );
}



/**
 * Implementation of hook_theme().
 * 
 */
function anai_chppermits_theme($existing, $type, $theme, $path) {
  return array
    ('chpperm_conttype_table' =>
     array('arguments' => array('fieldset' => NULL)),
     'chpperm_conttype_view_table' =>
     array('arguments' => array('fieldset' => NULL)),
     'chpperm_permit_list_table' =>
     array('arguments' => array('fieldset' => NULL)),
     'chpperm_account_table' =>
     array('arguments' => array('fieldset' => NULL)),
     'chpperm_account_list_table' =>
     array('arguments' => array('fieldset' => NULL)),
     'chpperm_account_notes_table' =>
     array('arguments' => array('fieldset' => NULL)),
     'chpperm_account_money_table' =>
     array('arguments' => array('fieldset' => NULL)),
     'chpperm_validation_list_table' =>
     array('arguments' => array('fieldset' => NULL)),
     );
}



/**
 * Implementation of hook_menu().
 * 
 */
function anai_chppermits_menu() {
  $items = array();
  $items['chppermcontadd'] = array
    ('page callback' => 'drupal_get_form',
     'page arguments' => array('chpperm_container_add_form'),
     'access arguments' => array('anai chp add permit container'),
     'type' => MENU_CALLBACK,
     );
  $items['chppermtypeedit/%'] = array
    ('page callback' => 'drupal_get_form',
     'page arguments' => array('chpperm_conttype_edit_form', 1),
     'access arguments' => array('anai chp edit permit container'),
     'type' => MENU_CALLBACK,
     );
  $items['chppermrateedit/%'] = array
    ('page callback' => 'drupal_get_form',
     'page arguments' => array('chpperm_meterrate_edit_form', 1),
     'access arguments' => array('anai chp edit permit container'),
     'type' => MENU_CALLBACK,
     );
  $items['chppermmaxedit/%'] = array
    ('page callback' => 'drupal_get_form',
     'page arguments' => array('chpperm_metermax_edit_form', 1),
     'access arguments' => array('anai chp edit permit container'),
     'type' => MENU_CALLBACK,
     );
  $items['chppermpassedit/%'] = array
    ('page callback' => 'drupal_get_form',
     'page arguments' => array('chpperm_meterpass_edit_form', 1),
     'access arguments' => array('anai chp edit permit container'),
     'type' => MENU_CALLBACK,
     );
  $items['chppermmcedit/%'] = array
    ('page callback' => 'drupal_get_form',
     'page arguments' => array('chpperm_merchantcode_edit_form', 1),
     'access arguments' => array('anai chp edit permit container'),
     'type' => MENU_CALLBACK,
     );
  $items['chppermtypes'] = array
    ('page callback' => 'drupal_get_form',
     'page arguments' => array('chpperm_conttype_form'),
     'access arguments' => array('anai chp list permit container'),
     'type' => MENU_CALLBACK,
     );
  $items['chppermadd'] = array
    ('page callback' => 'drupal_get_form',
     'page arguments' => array('chpperm_permit_add_form'),
     'access arguments' => array('anai chp add permits'),
     'type' => MENU_CALLBACK,
     );
  $items['chppermedit/%'] = array
    ('page callback' => 'drupal_get_form',
     'page arguments' => array('chpperm_permit_edit_form', 1),
     'access arguments' => array('anai chp edit permits'),
     'type' => MENU_CALLBACK,
     );
  $items['chppermlist'] = array
    ('page callback' => 'drupal_get_form',
     'page arguments' => array('chpperm_permit_list_form'),
     'access arguments' => array('anai chp list permits'),
     'type' => MENU_CALLBACK,
     );
  $items['chppermsearch'] = array
    ('page callback' => 'drupal_get_form',
     'page arguments' => array('chpperm_search_form'),
     'access arguments' => array('anai chp search permits'),
     'type' => MENU_CALLBACK,
     );
  $items['chppermcheckout'] = array
    ('page callback' => 'drupal_get_form',
     'page arguments' => array('chpperm_permit_checkout_form'),
     'access arguments' => array('anai chp early checkout permits'),
     'type' => MENU_CALLBACK,
     );
  $items['chppermgrpadd'] = array
    ('page callback' => 'drupal_get_form',
     'page arguments' => array('chpperm_account_add_form'),
     'access arguments' => array('anai chp add permit account'),
     'type' => MENU_CALLBACK,
     );
  $items['chppermgrpassign'] = array
    ('page callback' => 'drupal_get_form',
     'page arguments' => array('chpperm_account_assign_form'),
     'access arguments' => array('anai chp add permit account'),
     'type' => MENU_CALLBACK,
     );
  $items['chppermgrp'] = array
    ('page callback' => 'drupal_get_form',
     'page arguments' => array('chpperm_account_form'),
     'access arguments' => array('anai chp list permit account'),
     'type' => MENU_CALLBACK,
     );
   $items['chppermgrppayadd/%'] = array
    ('page callback' => 'drupal_get_form',
     'page arguments' => array('chpperm_account_payadd_form', 1),
     'access arguments' => array('anai chp add permit payments'),
     'type' => MENU_CALLBACK,
     );
  $items['chppermvaladd'] = array
    ('page callback' => 'drupal_get_form',
     'page arguments' => array('chpperm_validation_add_form'),
     'access arguments' => array('anai chp add permit validation'),
     'type' => MENU_CALLBACK,
     );
  $items['chppermval'] = array
    ('page callback' => 'drupal_get_form',
     'page arguments' => array('chpperm_validation_list_form'),
     'access arguments' => array('anai chp list permit validation'),
     'type' => MENU_CALLBACK,
     );
 return $items;
}



/**
 * Implementation of local functions
 * 
 */



/**********
 ********** Permit add
 ********** Address: chppermadd
 ********** Access:  'anai chp add permits'
 *********/



function chpperm_permit_add_form($form_state) {
  if ($form_state['storage']['saved']) {
    return chpperm_confirm_form($form_state);
  }

  /* A happy way to test CRON functions :) */
  /* $now = chpuser_datetime_utc_to_utc('now'); */
  /* chdbperm_cron_retire_permits($now->format("Y-m-d H:i:s")); */
  /* chdbperm_cron_purge_history($now->format("Y-m-d H:i:s")); */
  /* chdbperm_cron_delete_permits($now->format("Y-m-d H:i:s")); */
  /* return $form; */

  drupal_set_title(t('Add permit'));

  global $user;
  $account = user_load(array('uid' => $user->uid));
  $form = array();
  ahah_helper_register($form, $form_state);

  // Clients are needed becasue of the group/member permits
  $settings = array();
  $settings['tag'] = 'ajax';
  $settings['show_companies'] = TRUE;
  $settings['show_clients'] = TRUE;
  $settings['show_properties'] = TRUE;
  $settings['show_lots'] = TRUE;
  if (chpprop_produce_header(&$form, &$form_state, $settings)) {
    return $form;
  }
  $company_id = $form_state['storage']['ajax']['CompanyId'];
  $client_id = $form_state['storage']['ajax']['ClientId'];
  $property_id = $form_state['storage']['ajax']['PropertyId'];
  $lot_id = $form_state['storage']['ajax']['LotId'];

  $policy = $form_state['storage']['ajax']['Lots'][$property_id][$lot_id];
  $profile_id = $policy['data']['ProfileId'];
  $profile = chdbprop_get_profile($profile_id);

  $enforcement_id = $policy['data']['EnforcementId'];
  if (!empty($enforcement_id)) {
    $enforcement = chdbprop_get_enforcement($enforcement_id);
  } else {
    $enforcement = array();
  }

  $equipment_id = $policy['data']['EquipmentId'];
  if (!empty($equipment_id)) {
    $equipment = chdbprop_get_equipment($equipment_id);
  } else {
    $equipment = array();
  }

  // Check to see if groups or single members are subscribed to property/lot.
  $group_options = array();
  $member_options = array();
  $group_props = chpperm_retrieve_group_props($user->uid, $company_id, $client_id);
  if (isset($group_props[$property_id])) {
    foreach ($group_props[$property_id] as $key => $values1) {
      if ($key !== $lot_id and $key !== 'ANY') {
	continue;
      }
      foreach ($values1 as $group_id => $values2) {
	if (isset($group_options[$group_id]) or isset($member_options[$group_id])) {
	  continue;
	}
	$groupdef = chdbperm_get_groupdef($company_id, $group_id);
	if ($groupdef['Single']) {
	  $member_options[$group_id] = decode_entities($groupdef['Alias']);
	} else {
	  $group_options[$group_id] = decode_entities($groupdef['Alias']);
	}
      }
    }
  }

  // Build permit type selection
  $policy_options = array();
  if ($profile['ShortPolicy']) {
    $policy_options['ShortPolicy'] = $profile['ShortPolicyAlias'];
  }
  if ($profile['LongPolicy']) {
    $policy_options['LongPolicy'] = $profile['LongPolicyAlias'];
  }
  if ($profile['LongShortPolicy']) {
    $policy_options['ShortPolicy'] = $profile['ShortPolicyAlias'];
    $policy_options['LongPolicy'] = $profile['LongPolicyAlias'];
  }
  /* if (chpprop_property_allows_valet($profile)) { */
  /*   $policy_options['ValetPolicy'] = t('Valet'); */
  /* } */

  if (empty($policy_options)) {
    $form['ajax']['empty'] =
      array('#value' => '<p>'.t('Property don\'t allow any type of permits.').'<p>');
    $form['ajax']['cancel'] =
      array('#type' => 'image_button',
	    '#src' => drupal_get_path('module', 'anai').'/cancel.png',
	    '#submit' => array('chpperm_permit_add_form_submit_cancel'));
    return $form;
  }

  // Changes shall only be allowed in first wizard stage,
  // hence resetting the wizard when changed.
  if (isset($form_state['storage']['ajax']['Wizard']) and
      $form_state['storage']['ajax']['CompanyChanged'] or
      $form_state['storage']['ajax']['RegionChanged'] or
      $form_state['storage']['ajax']['ClientChanged'] or
      $form_state['storage']['ajax']['PropertyChanged'] or
      $form_state['storage']['ajax']['LotChanged']) {
    unset($form_state['storage']['ajax']['Wizard']);
  }

  // Layout permit registration selection
  $options = array();
  if (chpprop_property_allow_regular_permit($profile) or
      chpprop_property_allow_container($profile))  {
    $options['Transient'] = chpperm_registration_name('Transient');
  }
  if (chpprop_property_allow_hotel_permit($profile))  {
    $options['Hotel'] = chpperm_registration_name('Hotel');
  }
  if (chpprop_property_allow_loading_dock($profile))  {
    $options['Dock'] = chpperm_registration_name('Dock');
  }
  if (!empty($group_options)) {
    $options['Group'] = chpperm_registration_name('Group');
  }
  if (!empty($member_options)) {
    $options['Member'] = chpperm_registration_name('Member');
  }
  if ((isset($equipment['PAD']) and $equipment['PAD']) or
      (isset($equipment['LPR']) and $equipment['LPR'])) {
    // TBD to decide if this is a place to include validation
    //$options['Validation'] = chpperm_registration_name('Validation');
  }

  if (isset($form_state['storage']['ajax']['Registration']) and
      !in_array($form_state['storage']['ajax']['Registration'],
		array_keys($options))) {
    unset($form_state['storage']['ajax']['Registration']);
  }
  if (!isset($form_state['storage']['ajax']['Registration'])) {
    $form_state['storage']['ajax']['Registration'] = key($options);
  }
  if (1 < count($options)) {
    // Adding a pre-step to the wizard for selection of Registration type
    if (!isset($form_state['storage']['ajax']['Wizard'])) {
      $form_state['storage']['ajax']['Wizard'] = 0;
    }
    $form['ajax']['Registration'] =
      array('#type' => 'radios',
	    '#title' => t('Permit registration category'),
	    '#options' => $options,
	    '#default_value' => $form_state['storage']['ajax']['Registration'],
	    '#ahah' => array('event' => 'change',
			     'path' => ahah_helper_path(array('ajax')),
			     'wrapper' => 'ajax-wrapper'));

    if ($form_state['storage']['ajax']['Registration'] === 'Group') {
      if (!isset($form_state['storage']['ajax']['GroupId'])) {
	$form_state['storage']['ajax']['GroupId'] = key($group_options);
      }
      $form['ajax']['GroupId'] =
	array('#type' => 'select',
	      '#title' => t('Group'),
	      '#options' => $group_options,
	      '#default_value' => $form_state['storage']['ajax']['GroupId'],
	      '#ahah' => array('event' => 'change',
			       'path' => ahah_helper_path(array('ajax')),
			       'wrapper' => 'ajax-wrapper'));

      $group_id = $form_state['storage']['ajax']['GroupId'];

      $header = array(t('Created'), t('By'), t('Id'), t('Note'));
      $row = array();
      $notes = array();
      foreach (chdbperm_get_groupnotes($company_id, $client_id, $group_id) as $note) {
	if (!$note['Fragment']) {
	  $notes[$note['NoteId']]['master'] = $note;
	  $notes[$note['NoteId']]['fragments'] = array();
	} else {
	  $notes[$note['NoteId']]['fragments'][] = $note;
	}
      }
      if (!empty($notes)) {
	foreach ($notes as $note_id => $entry) {
	  $created = chpuser_datetime_utc_to_usertimezone($entry['master']['CreateTime']);
	  $account = user_load(array('uid' => $entry['master']['CreatorUID']));
	  $numfrags = count($entry['fragments']);
	  $row[] = array(array('data' => $created->format("M j,y H:i"),
			       'rowspan' => 1 + $numfrags),
			 array('data' => $account->name,
			       'rowspan' => 1 + $numfrags),
			 array('data' => $entry['master']['NoteId'],
			       'rowspan' => 1 + $numfrags),
			 nl2br(decode_entities($entry['master']['Note'])));
	  foreach ($entry['fragments'] as $fragment) {
	    $created = chpuser_datetime_utc_to_usertimezone($fragment['CreateTime']);
	    $account = user_load(array('uid' => $fragment['CreatorUID']));
	    $row[] = array('<b>Added '.$created->format("M j,y H:i").' by '.$account->name.':</b><br>'.
			   nl2br(decode_entities($fragment['Note'])));
	  }
	}
      }
      if (!empty($notes)) {
	$form['ajax']['GroupNotes'] =
	  array('#type' => 'fieldset', '#title' => t('Group notes'));
	$form['ajax']['GroupNotes']['list'] =
	  array('#value' => theme('table', $header, $row));
      }
    }

    if ($form_state['storage']['ajax']['Registration'] === 'Member') {
      if (!isset($form_state['storage']['ajax']['MemberId'])) {
	$form_state['storage']['ajax']['MemberId'] = key($member_options);
      }
      $form['ajax']['MemberId'] =
	array('#type' => 'select',
	      '#title' => t('Individual'),
	      '#options' => $member_options,
	      '#default_value' => $form_state['storage']['ajax']['MemberId'],
	      '#ahah' => array('event' => 'change',
			       'path' => ahah_helper_path(array('ajax')),
			       'wrapper' => 'ajax-wrapper'));

      $member_id = $form_state['storage']['ajax']['MemberId'];

      $header = array(t('Created'), t('By'), t('Id'), t('Note'));
      $row = array();
      $notes = array();
      foreach (chdbperm_get_groupnotes($company_id, $client_id, $member_id) as $note) {
	if (!$note['Fragment']) {
	  $notes[$note['NoteId']]['master'] = $note;
	  $notes[$note['NoteId']]['fragments'] = array();
	} else {
	  $notes[$note['NoteId']]['fragments'][] = $note;
	}
      }
      if (!empty($notes)) {
	foreach ($notes as $note_id => $entry) {
	  $created = chpuser_datetime_utc_to_usertimezone($entry['master']['CreateTime']);
	  $account = user_load(array('uid' => $entry['master']['CreatorUID']));
	  $numfrags = count($entry['fragments']);
	  $row[] = array(array('data' => $created->format("M j,y H:i"),
			       'rowspan' => 1 + $numfrags),
			 array('data' => $account->name,
			       'rowspan' => 1 + $numfrags),
			 array('data' => $entry['master']['NoteId'],
			       'rowspan' => 1 + $numfrags),
			 nl2br(decode_entities($entry['master']['Note'])));
	  foreach ($entry['fragments'] as $fragment) {
	    $created = chpuser_datetime_utc_to_usertimezone($fragment['CreateTime']);
	    $account = user_load(array('uid' => $fragment['CreatorUID']));
	    $row[] = array('<b>Added '.$created->format("M j,y H:i").' by '.$account->name.':</b><br>'.
			   nl2br(decode_entities($fragment['Note'])));
	  }
	}
      }
      if (!empty($notes)) {
	$form['ajax']['GroupNotes'] = array('#type' => 'fieldset', '#title' => t('Group notes'));
	$form['ajax']['GroupNotes']['list'] = array('#value' => theme('table', $header, $row));
      }
    }

    if (strpos($form_state['clicked_button']['#id'], 'nextfsPre') !== FALSE) {
      $form_state['storage']['ajax']['Wizard'] = 1;
    }

    if (0 == $form_state['storage']['ajax']['Wizard']) {
      $form['ajax']['nextfsPre'] =
	array('#type' => 'image_button',
	      '#src' => drupal_get_path('module', 'anai').'/next.png',
	      '#ahah' => array('event' => 'click',
			       'path' => ahah_helper_path(array('ajax')),
			       'wrapper' => 'ajax-wrapper'));
      
      $form['ajax']['cancel'] =
	array('#type' => 'image_button',
	      '#src' => drupal_get_path('module', 'anai').'/cancel.png',
	      '#submit' => array('chpperm_permit_add_form_submit_cancel'));
      return $form;
    } else {
      $form['ajax']['CompanyId']['#disabled'] = TRUE;
      $form['ajax']['RegionId']['#disabled'] = TRUE;
      $form['ajax']['ClientId']['#disabled'] = TRUE;
      $form['ajax']['PropertyId']['#disabled'] = TRUE;
      $form['ajax']['LotId']['#disabled'] = TRUE;
      $form['ajax']['Registration']['#disabled'] = TRUE;
      $form['ajax']['GroupId']['#disabled'] = TRUE;
      $form['ajax']['MemberId']['#disabled'] = TRUE;
    }
  } elseif (1 == count($options)) {
    $form['ajax']['Registration'] =
      array('#type' => 'hidden',
	    '#value' => $form_state['storage']['ajax']['Registration']);
  } else {
    $form['ajax']['empty'] =
      array('#value' => '<p>'.t('Lot is not configured to allow any permit, impossible to continue.').'<p>');
    $form['ajax']['cancel'] =
      array('#type' => 'image_button',
	    '#src' => drupal_get_path('module', 'anai').'/cancel.png',
	    '#submit' => array('chpperm_permit_add_form_submit_cancel'));
    return $form;
  }

  /**
   * Wizard initiate
   */

  if (strpos($form_state['clicked_button']['#id'], 'nextfs1') !== FALSE) {
    if (chpperm_permit_add_form_validate_save_person_helper($form_state)) {
      $form_state['storage']['ajax']['Wizard'] = 2;
    }
  } elseif (strpos($form_state['clicked_button']['#id'], 'nextfs2') !== FALSE) {
    if (chpperm_permit_add_form_validate_save_permit_helper($form_state)) {
      $form_state['storage']['ajax']['Wizard'] = 3;
    }
  } elseif (strpos($form_state['clicked_button']['#id'], 'nextfs3') !== FALSE) {
    if (chpperm_permit_add_form_validate_save_vehicle_helper($form_state)) {
      $form_state['storage']['ajax']['Wizard'] = 4;
    }
  } elseif (strpos($form_state['clicked_button']['#id'], 'nextfs4') !== FALSE) {
    $form_state['storage']['ajax']['Wizard'] = 5;
  } elseif (strpos($form_state['clicked_button']['#id'], 'nextfs5') !== FALSE) {
    $form_state['storage']['ajax']['Wizard'] = 6;
  }
  if (!isset($form_state['storage']['ajax']['Wizard'])) {
    $form_state['storage']['ajax']['Wizard'] = 1;
  }
  $form['ajax']['Wizard'] =
    array('#type' => 'hidden',
	  '#value' => $form_state['storage']['ajax']['Wizard']);
  if (1 < $form_state['storage']['ajax']['Wizard']) {
    $form['ajax']['CompanyId']['#disabled'] = TRUE;
    $form['ajax']['RegionId']['#disabled'] = TRUE;
    $form['ajax']['ClientId']['#disabled'] = TRUE;
    $form['ajax']['PropertyId']['#disabled'] = TRUE;
    $form['ajax']['LotId']['#disabled'] = TRUE;
    $form['ajax']['Registration']['#disabled'] = TRUE;
  }

  /**
   * Wizard field person
   */

  // Permit user/owner
  $settings = array();
  $settings['tag'] = 'ajax';
  $settings['subtag'] = 'person';
  $settings['subframe'] = TRUE;
  $settings['subframetitle'] = t('Permit owner');
  $settings['subframecollapsible'] = TRUE;
  $settings['option']['skipemailnotification'] = TRUE;
  $settings['option']['skiprole'] = TRUE;
  $settings['option']['skipdepartment'] = TRUE;
  $settings['option']['skiptitle'] = TRUE;
  $settings['option']['skiplogin'] = TRUE;
  $settings['option']['wizard'] = 1;
  if ($form_state['storage']['ajax']['Registration'] === 'Transient') {
    $settings['default']['NotRequired'] = FALSE;
  } else {
    $settings['option']['skipnotrequired'] = TRUE;
  }
  if ($form_state['storage']['ajax']['Registration'] === 'Member') {
    $groupdef = chdbperm_get_groupdef($company_id,
				      $form_state['storage']['ajax']['MemberId']);
    if (!empty($groupdef['PrenameId'])) {
      $settings['default']['PrenameId'] = $groupdef['PrenameId'];
    }
    if (!empty($groupdef['FirstName'])) {
      $settings['default']['FirstName'] = decode_entities($groupdef['FirstName']);
    }
    if (!empty($groupdef['MiddleName'])){
      $settings['default']['MiddleName'] = decode_entities($groupdef['MiddleName']);
    }
    if (!empty($groupdef['LastName'])) {
      $settings['default']['LastName'] = decode_entities($groupdef['LastName']);
    }
    if (!empty($groupdef['SufnameId'])) {
      $settings['default']['SufnameId'] = $groupdef['SufnameId'];
    }
    if (!empty($groupdef['Street'])) {
      $settings['default']['Street'] = decode_entities($groupdef['Street']);
    }
    if (!empty($groupdef['City'])) {
      $settings['default']['City'] = decode_entities($groupdef['City']);
    }
    if (!empty($groupdef['PostalCode'])) {
      $settings['default']['PostalCode'] = decode_entities($groupdef['PostalCode']);
    }
    if (!empty($groupdef['Province'])) {
      $settings['default']['Province'] = $groupdef['Province'];
    }
    if (!empty($groupdef['Country'])) {
      $settings['default']['Country'] = $groupdef['Country'];
    }
    if (!empty($groupdef['Phone'])) {
      $settings['default']['Phone'] = decode_entities($groupdef['Phone']);
    }
    if (!empty($groupdef['Email'])) {
      $settings['default']['Email'] = decode_entities($groupdef['Email']);
    }
  }
  if ($form_state['storage']['ajax']['Registration'] !== 'Hotel') {
    chpprop_produce_person($form, $form_state, $settings);
  }

  if ($form_state['storage']['ajax']['Registration'] !== 'Hotel' and
      1 == $form_state['storage']['ajax']['Wizard']) {
    $form['ajax']['nextfs1'] =
      array('#type' => 'image_button',
	    '#src' => drupal_get_path('module', 'anai').'/next.png',
	    '#ahah' => array('event' => 'click',
			     'path' => ahah_helper_path(array('ajax')),
			     'wrapper' => 'ajax-wrapper'));
  }

  /**
   * Wizard field permit
   */

  if ($form_state['storage']['ajax']['Registration'] !== 'Hotel' and
      2 > $form_state['storage']['ajax']['Wizard']) {
    $form['ajax']['cancel'] =
      array('#type' => 'image_button',
	    '#src' => drupal_get_path('module', 'anai').'/cancel.png',
	    '#submit' => array('chpperm_permit_add_form_submit_cancel'));
    return $form;
  }

  $form['ajax']['permit'] =
    array('#type' => 'fieldset',
	  '#title' => t('Permit type'));
  if ($form_state['storage']['ajax']['Registration'] !== 'Hotel') {
    $form['ajax']['permit']['#collapsible'] = TRUE;
    $form['ajax']['permit']['#collapsed'] = $form_state['storage']['ajax']['Wizard'] !== 2;
  }

  // Layout permit type selection
  if (!isset($form_state['storage']['ajax']['permit']['PermitPolicy'])) {
    $form_state['storage']['ajax']['permit']['PermitPolicy'] = key($policy_options);
  }
  if (count($policy_options) > 1) {
    $form['ajax']['permit']['PermitPolicy'] =
      array('#type' => 'select',
	    '#title' => t('Permit policy'),
	    '#options' => $policy_options,
	    '#default_value' => $form_state['storage']['ajax']['permit']['PermitPolicy'],
	    '#ahah' => array('event' => 'change',
			     'path' => ahah_helper_path(array('ajax')),
			     'wrapper' => 'ajax-wrapper'));
  } else {
    $form['ajax']['permit']['PermitPolicy'] =
      array('#type' => 'hidden',
	    '#value' => $form_state['storage']['ajax']['permit']['PermitPolicy']);
  }

  $permit_policy = $form_state['storage']['ajax']['permit']['PermitPolicy'];

  // Layout suite
  if (!isset($form_state['storage']['ajax']['permit']['SuiteId'])) {
    $form_state['storage']['ajax']['permit']['SuiteId'] = '';
  }
  $form['ajax']['permit']['SuiteId'] =
    array('#type' => 'textfield',
	  '#title' => t('Suite'),
	  '#maxlength' => 30,
	  '#default_value' => $form_state['storage']['ajax']['permit']['SuiteId'],
	  '#description' => t('Suite, apartment, room, id, unit, etc.'));

  // Layout parking level and stall
  if (($permit_policy === 'LongPolicy' and chpprop_long_managed_stalls($profile)) or
      ($permit_policy === 'ShortPolicy' and chpprop_short_managed_stalls($profile)) or
      ($permit_policy === 'ValetPolicy' and chpprop_valet_managed_stalls($profile))) {

    // Create parking level options
    $level_options = array();
    $stallevels = chdbprop_get_stallevels
      ($property_id, $lot_id,
       ($permit_policy === 'LongPolicy'),
       ($permit_policy === 'ShortPolicy'),
       ($permit_policy === 'ValetPolicy'));
    foreach ($stallevels as $level) {
      $level_options[$level['LevelId']] = $level['Level'].': '.decode_entities($level['Alias']);
    }
    $stallevels = NULL;

    if (empty($level_options)) {
      $form['ajax']['permit']['error'] =
	array('#value' => t('Parking levels yet to be configured, impossible to continue.').'<p>');
      $form['ajax']['permit']['cancel'] =
	array('#type' => 'image_button',
	      '#src' => drupal_get_path('module', 'anai').'/cancel.png',
	      '#submit' => array('chpperm_permit_add_form_submit_cancel'));
      return $form;
    }

    // Layout parking level options
    if (isset($form_state['storage']['ajax']['permit']['LevelId']) and
	!in_array($form_state['storage']['ajax']['permit']['LevelId'],
		  array_keys($level_options))) {
      unset($form_state['storage']['ajax']['permit']['LevelId']);
    }
    if (!isset($form_state['storage']['ajax']['permit']['LevelId'])) {
      $form_state['storage']['ajax']['permit']['LevelId'] = key($level_options);
    }
    $form['ajax']['permit']['LevelId'] =
      array('#type' => 'select',
	    '#title' => t('Parking level'),
	    '#options' => $level_options,
	    '#default_value' => $form_state['storage']['ajax']['permit']['LevelId'],
	    '#ahah' => array('event' => 'change',
			     'path' => ahah_helper_path(array('ajax')),
			     'wrapper' => 'ajax-wrapper'));

    // Create stall options
    $stall_options = chpperm_create_stall_options
      ($company_id, $property_id, $lot_id,
       $form_state['storage']['ajax']['permit']['LevelId']);

    if (empty($stall_options)) {
      $form['ajax']['permit']['error'] =
	array('#value' => t('Parking stall yet to be configured, impossible to continue.').'<p>');
      $form['ajax']['permit']['cancel'] =
	array('#type' => 'image_button',
	      '#src' => drupal_get_path('module', 'anai').'/cancel.png',
	      '#submit' => array('chpperm_permit_add_form_submit_cancel'));
      return $form;
    }

    // Layout stall options
    if (isset($form_state['storage']['ajax']['permit']['StallId']) and
	!in_array($form_state['storage']['ajax']['permit']['StallId'],
		  array_keys($stall_options))) {
      unset($form_state['storage']['ajax']['permit']['StallId']);
    }
    if (!isset($form_state['storage']['ajax']['permit']['StallId'])) {
      $form_state['storage']['ajax']['permit']['StallId'] = key($stall_options);
    }
    $form['ajax']['permit']['StallId'] =
      array('#type' => 'select',
	    '#title' => t('Stall'),
	    '#options' => $stall_options,
	    '#default_value' => $form_state['storage']['ajax']['permit']['StallId'],
	    '#ahah' => array('event' => 'change',
			     'path' => ahah_helper_path(array('ajax')),
			     'wrapper' => 'ajax-wrapper'));

    // Layout stall notes if any
    $notes = array();
    foreach (chdbprop_get_stallnotes
	     ($property_id, $lot_id,
	      $form_state['storage']['ajax']['permit']['LevelId'],
	      $form_state['storage']['ajax']['permit']['StallId']) as $note) {
      if (!$note['Fragment']) {
	$notes[$note['NoteId']]['master'] = $note;
	$notes[$note['NoteId']]['fragments'] = array();
      } else {
	$notes[$note['NoteId']]['fragments'][] = $note;
      }
    }

    if (!empty($notes)) {
      $header = array(t('Created'), t('By'), t('Id'), t('Note'));
      $row = array();
      foreach ($notes as $note_id => $entry) {
	$created = chpuser_datetime_utc_to_usertimezone($entry['master']['CreateTime']);
	$account = user_load(array('uid' => $entry['master']['CreatorUID']));
	$numfrags = count($entry['fragments']);
	$row[] = array(array('data' => $created->format("M j,y H:i"),
			     'rowspan' => 1 + $numfrags),
		       array('data' => $account->name,
			     'rowspan' => 1 + $numfrags),
		       array('data' => $entry['master']['NoteId'],
			     'rowspan' => 1 + $numfrags),
		       nl2br(decode_entities($entry['master']['Note'])));
	foreach ($entry['fragments'] as $fragment) {
	  $created = chpuser_datetime_utc_to_usertimezone($fragment['CreateTime']);
	  $account = user_load(array('uid' => $fragment['CreatorUID']));
	  $row[] = array('<b>Added '.$created->format("M j,y H:i").' by '.$account->name.':</b><br>'.
			 nl2br(decode_entities($fragment['Note'])));
	}
      }

      $form['ajax']['permit']['StallNotes'] =
	array('#type' => 'fieldset',
	      '#title' => t('Stall notes'));
      $form['ajax']['permit']['StallNotes']['List'] = array('#value' => theme('table', $header, $row));
    }
  }

  if ($form_state['storage']['ajax']['Registration'] === 'Group') {
    $group_id = $form_state['storage']['ajax']['GroupId'];
    $groupdef = chdbperm_get_groupdef($company_id, $group_id);
  } else {
    $group_id = NULL;
  }

  if ($form_state['storage']['ajax']['Registration'] === 'Member') {
    $member_id = $form_state['storage']['ajax']['MemberId'];
  } else {
    $member_id = NULL;
  }

  // Retrieve the permits from current context
  $permits = chdbperm_get_permits
    ($company_id,
     $form_state['storage']['ajax']['Registration'] === 'Group', $group_id,
     TRUE, $property_id,
     TRUE, $lot_id,
     FALSE, NULL, // LPN
     TRUE, TRUE, // Active
     TRUE, FALSE, // Suspended
     $permit_policy === 'LongPolicy', TRUE,
     $permit_policy === 'ShortPolicy', TRUE,
     $permit_policy === 'ValetPolicy', TRUE);

  // Determine if room for complementary
  $complementary_allowed = FALSE;
  $complementary_used = 0;
  foreach ($permits as $permit) {
    if (!$permit['Complementary']) {
      continue;
    }
    $complementary_used++;
  }
  if ($form_state['storage']['ajax']['Registration'] === 'Group' and
      $complementary_used < $groupdef['Complementary']) {
    $complementary_allowed = TRUE;
  }

  // Build permit selection
  $options = array();
  // Starting with regular transient permits if used
  if ($form_state['storage']['ajax']['Registration'] === 'Transient' and
      chpprop_property_allow_regular_permit($profile)) {
    if ($permit_policy === 'ShortPolicy') {
      $tag = t('Regular transient permit');
      if (!empty($profile['RegularComment'])) {
	$tag .= ' ['.decode_entities($profile['RegularComment']).']';
      }
      $options['Regular'] = $tag;
    } elseif ($permit_policy === 'LongPolicy') {
      $options['Regular'] = t('Regular transient permit');
    }
  }
  // Regular hotel permits if used
  if ($form_state['storage']['ajax']['Registration'] === 'Hotel' and
      chpprop_property_allow_hotel_permit($profile)) {
    if ($permit_policy === 'ShortPolicy') {
      $tag = t('Regular hotel permit');
      if (!empty($profile['RegularComment'])) {
	$tag .= ' ['.decode_entities($profile['RegularComment']).']';
      }
      $options['Hotel'] = $tag;
    } elseif ($permit_policy === 'LongPolicy') {
      $options['Hotel'] = t('Regular hotel permit');
    }
  }
  // Regular validation permits if used
  if ($form_state['storage']['ajax']['Registration'] === 'Validation' and
      ((isset($equipment['PAD']) and $equipment['PAD']) or
       (isset($equipment['LPR']) and $equipment['LPR']))) {
    $options['Validation'] = t('Regular validation permit');
  }

  // Adding container permits
  if (chpprop_property_allow_container($profile)) {
    $containers = chpperm_retrieve_containers($user->uid, $company_id, $property_id, $lot_id);
    if (!empty($containers)) {
      foreach ($containers as $container_id => $container) {
	$conttypes = chpperm_retrieve_container_types($user->uid, $company_id, $container_id);
	if (!empty($conttypes)) {
	  foreach ($conttypes as $type_id => $conttype) {
	    // Policy filtering
	    if ($conttype['data']['Short'] and $permit_policy !== 'ShortPolicy') {
	      // Limited to short term lots only
	      continue;
	    }
	    if ($conttype['data']['Long'] and $permit_policy !== 'LongPolicy') {
	      // Limited to long term lots only
	      continue;
	    }
	    if ($conttype['data']['Valet'] and $permit_policy !== 'ValetPolicy') {
	      // Limited to valet lots only
	      continue;
	    }
	    /* // Policy filtering */
	    /* if ($permit_policy === 'ShortPolicy' and !$conttype['data']['Short']) { */
	    /*   continue; */
	    /* } elseif ($permit_policy === 'LongPolicy' and !$conttype['data']['Long']) { */
	    /*   continue; */
	    /* } elseif ($permit_policy === 'ValetPolicy' and !$conttype['data']['Valet']) { */
	    /*   continue; */
	    /* } */
	    // Context filtering
	    if ($form_state['storage']['ajax']['Registration'] === 'Transient' and
		!$conttype['data']['Transients']) {
	      continue;
	    } elseif ($form_state['storage']['ajax']['Registration'] === 'Group' and
		      !$conttype['data']['Groups']) {
	      continue;
	    } elseif ($form_state['storage']['ajax']['Registration'] === 'Member' and
		      !$conttype['data']['Members']) {
	      continue;
	    }
	    // Type filtering
	    if ($form_state['storage']['ajax']['Registration'] === 'Group' and
		!$complementary_allowed and $conttype['GroupType'] === 'Complementary') {
	      continue;
	    }
	    // Include option when passing the filters
	    $tag =
	      decode_entities($container['data']['Alias']).': '.
	      decode_entities($conttype['data']['Alias']);
	    if (!empty($conttype['data']['Comment'])) {
	      $tag .= ' ['.decode_entities($conttype['data']['Comment']).']';
	    }
	    $options[$container_id.'__'.$type_id] = $tag;
	  }
	}
      }
    }
  }

  if (chpprop_property_allow_container($profile) and empty($options)) {
    $form['ajax']['permit']['error'] =
      array('#value' => t('Containers yet to be configured, impossible to continue.').'<p>');
    $form['ajax']['permit']['cancel'] =
      array('#type' => 'image_button',
	    '#src' => drupal_get_path('module', 'anai').'/cancel.png',
	    '#submit' => array('chpperm_permit_add_form_submit_cancel'));
    return $form;
  }

  // Layout permit selection
  if (isset($form_state['storage']['ajax']['permit']['PermitType']) and
      !in_array($form_state['storage']['ajax']['permit']['PermitType'],
		array_keys($options))) {
    unset($form_state['storage']['ajax']['permit']['PermitType']);
    // Reset PermitContext when PermitType is out of bounds
    if (isset($form_state['storage']['ajax']['permit']['PermitContext'])) {
      unset($form_state['storage']['ajax']['permit']['PermitContext']);
    }
  }
  if (!isset($form_state['storage']['ajax']['permit']['PermitType'])) {
    $form_state['storage']['ajax']['permit']['PermitType'] = key($options);
  }
  if ($form_state['storage']['ajax']['Registration'] === 'Group' and
      0 < $groupdef['Complementary'] and !$complementary_allowed) {
    $title = t('Permit type (maximum number of complementary permits reached)');
  } else {
    $title = t('Permit type');
  }
  $form['ajax']['permit']['PermitType'] =
    array('#type' => 'radios',
	  '#title' => $title,
	  '#options' => $options,
	  '#default_value' => $form_state['storage']['ajax']['permit']['PermitType'],
	  '#ahah' => array('event' => 'change',
			   'path' => ahah_helper_path(array('ajax')),
			   'wrapper' => 'ajax-wrapper'));

  $permit_type = $form_state['storage']['ajax']['permit']['PermitType'];

  // Layout overnight parking if configured on regular transient permit
  if ($form_state['storage']['ajax']['Registration'] === 'Transient' and
      $permit_policy === 'ShortPolicy' and $permit_type === 'Regular' and
      chpprop_property_allow_overnight_permit($profile)) {
    if (!isset($form_state['storage']['ajax']['permit']['Overnight'])) {
      $form_state['storage']['ajax']['permit']['Overnight'] = FALSE;
    }
    $form['ajax']['permit']['Overnight'] =
      array('#type' => 'checkbox',
	    '#title' => t('Overnight extension'),
	    '#description' =>
	    t('(Make sure agreement, payment, etc, is in place when selecting this)'),
	    '#default_value' => $form_state['storage']['ajax']['permit']['Overnight'],
	    '#ahah' => array('event' => 'change',
			     'path' => ahah_helper_path(array('ajax')),
			     'wrapper' => 'ajax-wrapper'));
  }

  // Layout shared permit options
  if (chpprop_property_allow_shared_permits($profile)) {
    // List already shared ones
    $shared = array();
    $singles = 0;
    foreach ($permits as $permit) {
      if (empty($permit['SharedId'])) {
	$singles++;
	continue;
      }
      $shared[$permit['SharedId']][$permit['LPN']] = $permit['LPN'];
    }

    // Layout permit context
    $options = array();
    $title = t('Permit context');
    // ...decide standalone options
    if ($form_state['storage']['ajax']['Registration'] === 'Transient' or
	$form_state['storage']['ajax']['Registration'] === 'Member' or
	$form_state['storage']['ajax']['Registration'] === 'Validation') {
      $options['Standalone'] = t('Standalone permit');
    } elseif ($form_state['storage']['ajax']['Registration'] === 'Group' and
	      (0 > $groupdef['MaxEntries'] or // Unlimited
	       ($singles + count($shared)) < $groupdef['MaxEntries'])) {
      $options['Standalone'] = t('Standalone permit');
    } else {
      $title = t('Permit context (maximum number of standalone entries reached)');
    }
    // ...decide shared options
    if ($form_state['storage']['ajax']['Registration'] === 'Transient' or
	$form_state['storage']['ajax']['Registration'] === 'Group') {
      $options['Shared'] = t('Shared permit with another vehicle');
    }
    // ...layout options
    if (isset($form_state['storage']['ajax']['permit']['PermitContext']) and
	!in_array($form_state['storage']['ajax']['permit']['PermitContext'],
		  array_keys($options))) {
      unset($form_state['storage']['ajax']['permit']['PermitContext']);
    }
    if (!isset($form_state['storage']['ajax']['permit']['PermitContext'])) {
      $form_state['storage']['ajax']['permit']['PermitContext'] = key($options);
    }
    $form['ajax']['permit']['PermitContext'] =
      array('#type' => 'radios',
	    '#title' => t('Permit context'),
	    '#options' => $options,
	    '#default_value' => $form_state['storage']['ajax']['permit']['PermitContext'],
	    '#ahah' => array('event' => 'change',
			     'path' => ahah_helper_path(array('ajax')),
			     'wrapper' => 'ajax-wrapper'));

    $permit_context = $form_state['storage']['ajax']['permit']['PermitContext'];

    // Sharing vehicle options
    if ($permit_context === 'Shared') {
      $options = array();
      foreach ($permits as $entry) {
	if ($form_state['storage']['ajax']['Registration'] === 'Group' and
	    !empty($entry['SharedId']) and
	    count($shared[$entry['SharedId']]) >= $groupdef['Shared']) {
	  continue;
	}
	$options[$entry['LPN']] = $entry['LPN'];
      }
      if (empty($options)) {
	$form['ajax']['permit']['empty'] =
	  array('#value' => '<p>'.t('There are no available License Plate Numbers to share with.').'<p>');
      } else {
	if (!isset($form_state['storage']['ajax']['permit']['PermitLink'])) {
	  $form_state['storage']['ajax']['permit']['PermitLink'] = key($options);
	}
	$form['ajax']['permit']['PermitLink'] =
	  array('#type' => 'select',
		'#title' => t('Available vehicles to share permit with'),
		'#options' => $options,
		'#default_value' => $form_state['storage']['ajax']['permit']['PermitLink']);
      }
    }

    // Option for setting relationship to linked vehicle
    if ($permit_context === 'Shared' and
	isset($form_state['storage']['ajax']['permit']['PermitLink'])) {
      // Layout relationship field
      $options = array();
      $options['Unspecified'] = t('Unspecified');
      $options['Wife'] = t('Wife');
      $options['Husband'] = t('Husband');
      $options['Girlfriend'] = t('Girlfriend');
      $options['Boyfriend'] = t('Boyfriend');
      $options['Relative'] = t('Relative');
      $options['Friend'] = t('Friend');
      $options['Other'] = t('Other');
      if (!isset($form_state['storage']['ajax']['permit']['Role'])) {
	if (in_array($permit['Role'], array_keys($options))) {
	  $form_state['storage']['ajax']['permit']['Role'] = $permit['Role'];
	} else {
	  $form_state['storage']['ajax']['permit']['Role'] = 'Other';
	}
      }
      $form['ajax']['permit']['Role'] =
	array('#type' => 'select',
	      '#title' => t('Relationship to owner of shared permit'),
	      '#options' => $options,
	      '#default_value' => $form_state['storage']['ajax']['permit']['Role'],
	      '#ahah' => array('event' => 'change',
			       'path' => ahah_helper_path(array('ajax')),
			       'wrapper' => 'ajax-wrapper'));

      if ($form_state['storage']['ajax']['permit']['Role'] === 'Other') {
	if (!isset($form_state['storage']['ajax']['permit']['RoleOther'])) {
	  $form_state['storage']['ajax']['permit']['RoleOther'] =
	    decode_entities($permit['Role']);
	}
	$form['ajax']['permit']['RoleOther'] =
	  array('#type' => 'textfield',
		'#title' => t('Other relationship'),
		'#maxlength' => 80,
		'#default_value' => $form_state['storage']['ajax']['permit']['RoleOther']);
      }
    }
  }

  // Layout duplication options
  $other_group_options = array();
  $other_member_options = array();
  $options = array();
  foreach ($form_state['storage']['ajax']['Lots'][$property_id] as $key => $value) {
    // Only include the "other" lots
    if ($key === $lot_id) {
      continue;
    }
    // Make sure only listing those lots with same settings as selected
    $other_profile = chdbprop_get_profile($value['data']['ProfileId']);
    if ($form_state['storage']['ajax']['permit']['PermitPolicy'] === 'ShortPolicy' and
	!$other_profile['ShortPolicy'] and !$other_profile['LongShortPolicy']) {
      continue;
    }
    if ($form_state['storage']['ajax']['permit']['PermitPolicy'] === 'LongPolicy' and
	!$other_profile['LongPolicy'] and !$other_profile['LongShortPolicy']) {
      continue;
    }
    if ($form_state['storage']['ajax']['Registration'] === 'Transient' and
	!chpprop_property_allow_regular_permit($other_profile) and
	!chpprop_property_allow_container($other_profile)) {
      continue;
    }
    if ($form_state['storage']['ajax']['Registration'] === 'Hotel' and
	!chpprop_property_allow_hotel_permit($other_profile)) {
      continue;
    }
    if ($form_state['storage']['ajax']['Registration'] === 'Dock' and
	!chpprop_property_allow_loading_dock($other_profile)) {
      continue;
    }
    if (isset($group_props[$property_id])) {
      foreach ($group_props[$property_id] as $key2 => $values2) {
	if ($key2 !== $key and $key2 !== 'ANY') {
	  continue;
	}
	foreach ($values2 as $group_id => $values3) {
	  if (isset($other_group_options[$group_id]) or
	      isset($other_member_options[$group_id])) {
	    continue;
	  }
	  $groupdef = chdbperm_get_groupdef($company_id, $group_id);
	  if ($groupdef['Single']) {
	    $other_member_options[$group_id] = decode_entities($groupdef['Alias']);
	  } else {
	    $other_group_options[$group_id] = decode_entities($groupdef['Alias']);
	  }
	}
      }
    }
    if ($form_state['storage']['ajax']['Registration'] === 'Group' and
	!in_array($form_state['storage']['ajax']['GroupId'],
		  array_keys($other_group_options))) {
      continue;
    }
    if ($form_state['storage']['ajax']['Registration'] === 'Member' and
	!in_array($form_state['storage']['ajax']['MemberId'],
		  array_keys($other_member_options))) {
      continue;
    }
    $options[$key] = decode_entities($value['data']['Alias']);
  }
  if (!empty($options)) {
    if (!isset($form_state['storage']['ajax']['permit']['DupLots'])) {
      $form_state['storage']['ajax']['permit']['DupLots'] = array();
    }
    $form['ajax']['permit']['DupLots'] =
      array('#type' => 'checkboxes',
	    '#title' => t('Duplicate permit to lot'),
	    '#options' => $options,
	    '#default_value' => $form_state['storage']['ajax']['permit']['DupLots']);
  }

  if ($form_state['storage']['ajax']['Registration'] !== 'Hotel' and
      2 == $form_state['storage']['ajax']['Wizard']) {
    $form['ajax']['nextfs2'] =
      array('#type' => 'image_button',
	    '#src' => drupal_get_path('module', 'anai').'/next.png',
	    '#ahah' => array('event' => 'click',
			     'path' => ahah_helper_path(array('ajax')),
			     'wrapper' => 'ajax-wrapper'));
  }

  /**
   * Wizard field vehicle
   */

  if ($form_state['storage']['ajax']['Registration'] !== 'Hotel' and
      3 > $form_state['storage']['ajax']['Wizard']) {
    $form['ajax']['cancel'] =
      array('#type' => 'image_button',
	    '#src' => drupal_get_path('module', 'anai').'/cancel.png',
	    '#submit' => array('chpperm_permit_add_form_submit_cancel'));
    return $form;
  }

  if ($permit_policy === 'ValetPolicy') {
    $form['ajax']['vehicle'] =
      array('#type' => 'fieldset',
	    '#title' => t('Vehicle information'));
    if ($form_state['storage']['ajax']['Registration'] !== 'Hotel') {
      $form['ajax']['vehicle']['#collapsible'] = TRUE;
      $form['ajax']['vehicle']['#collapsed'] = $form_state['storage']['ajax']['Wizard'] !== 3;
    }

    // Layout LPN retrieval from valet
    if (!isset($form_state['storage']['ajax']['vehicle']['LPN'])) {
      $form_state['storage']['ajax']['vehicle']['LPN'] = '';
    } elseif (strlen($form_state['storage']['ajax']['vehicle']['LPN']) > 0) {
      $form_state['storage']['ajax']['vehicle']['LPN'] =
	strtoupper($form_state['storage']['ajax']['vehicle']['LPN']);
    }
    $form['ajax']['vehicle']['LPN'] =
      array('#type' => 'textfield',
	    '#title' => t('License Plate Number'),
	    '#maxlength' => 10,
	    '#default_value' => $form_state['storage']['ajax']['vehicle']['LPN'],
	    '#description' => '(No spaces)',
	    '#attributes' => array('onBlur'=>'this.value=this.value.toUpperCase()'));

    $form['ajax']['vehicle']['searchvaletbtn'] =
      array('#type' => 'button',
	    '#value' => t('Search valet database'));

    if (strpos($form_state['clicked_button']['#id'], 'searchvaletbtn') !== FALSE and
	!empty($form_state['storage']['vehicle']['ajax']['LPN'])) {

      $valet = chdbvalet_get_valet_lpn
	($company_id, $property_id, $lot_id,
	 $form_state['storage']['ajax']['vehicle']['LPN']);

      $form['ajax']['LPN']['vehicle']['#field_suffix'] =
	theme('image',
	      sizeof($valet) > 0 ?
	      'misc/watchdog-ok.png' : 'misc/watchdog-error.png');

      if (sizeof($valet) > 0) {
	// Update already initated AHAH storage
	$form_state['storage']['ajax']['vehicle']['Make'] = $valet['Make'];
	$form_state['storage']['ajax']['vehicle']['Model'] = $valet['Model'];
	$form_state['storage']['ajax']['vehicle']['Color'] = $valet['Color'];

	// Save for later
	$form['ajax']['vehicle']['Make'] =
	  array('#type' => 'hidden',
		'#value' => $valet['Make']);
	$form['ajax']['vehicle']['Model'] =
	  array('#type' => 'hidden',
		'#value' => $valet['Model']);
	$form['ajax']['vehicle']['Color'] =
	  array('#type' => 'hidden',
		'#value' => $valet['Color']);

	// Layout static vehicle info
	$settings = array();
	$settings['tag'] = 'ajax';
	//$settings['disabled']['LPN'] = TRUE;
	$settings['disabled']['Make'] = TRUE;
	$settings['disabled']['Model'] = TRUE;
	$settings['disabled']['Color'] = TRUE;
	if (chpprop_produce_vehicle(&$form, &$form_state, $settings)) {
	  return $form;
	}
      } elseif (!empty($form_state['storage']['ajax']['vehicle']['LPN'])) {
	$form['ajax']['LPN']['vehicle']['#field_prefix'] =
	  t('Not found in valet database.');
      }
    }
  } else {
    // Layout vehicle
    $settings = array();
    $settings['tag'] = 'ajax';
    $settings['subtag'] = 'vehicle';
    $settings['subframe'] = TRUE;
    $settings['subframetitle'] = t('Vehicle information');
    if ($form_state['storage']['ajax']['Registration'] !== 'Hotel') {
      $settings['subframecollapsible'] = TRUE;
      $settings['option']['wizard'] = 3;
    }
    if (chpprop_produce_vehicle(&$form, &$form_state, $settings)) {
      return $form;
    }
  }

  if ($form_state['storage']['ajax']['Registration'] !== 'Hotel' and
      3 == $form_state['storage']['ajax']['Wizard']) {
    $form['ajax']['nextfs3'] =
      array('#type' => 'image_button',
	    '#src' => drupal_get_path('module', 'anai').'/next.png',
	    '#ahah' => array('event' => 'click',
			     'path' => ahah_helper_path(array('ajax')),
			     'wrapper' => 'ajax-wrapper'));
  }

  /**
   * Wizard field timing
   */

  if ($form_state['storage']['ajax']['Registration'] !== 'Hotel' and
      4 > $form_state['storage']['ajax']['Wizard']) {
    $form['ajax']['cancel'] =
      array('#type' => 'image_button',
	    '#src' => drupal_get_path('module', 'anai').'/cancel.png',
	    '#submit' => array('chpperm_permit_add_form_submit_cancel'));
    return $form;
  }

  /***
   * Design note by TBS:
   * For some strange reason, the jQuery date picker is not drawing correctly
   * if the fieldset is default collapsed, meaning an issue for wizards.
   * Workaround is to never build date pickers inside default collapsed filedsets.
   */

  $form['ajax']['timing'] =
    array('#type' => 'fieldset',
	  '#title' => t('Timing'));
  if ($form_state['storage']['ajax']['Registration'] !== 'Hotel') {
    $form['ajax']['timing']['#collapsible'] = TRUE;
    $form['ajax']['timing']['#collapsed'] = $form_state['storage']['ajax']['Wizard'] !== 4;
  }

  // Javascript date pickers
  drupal_add_js
    ('(function ($) {
          Drupal.behaviors.ANAIchppermits=function(context){
      	    $("#edit-ajax-timing-BeginTime:not(.BeginTime-processed)",
              context).addClass("BeginTime-processed")
              .AnyTime_picker({format:"%Y-%m-%d %H:%i:%s",hideInput:true,
                              placement:"inline",askSecond:false,
                              labelTitle:"Begin Date and Time"});
      	    $("#edit-ajax-timing-expiry-select-dateonly:not(.expiry-select-dateonly-processed)",
              context).addClass("expiry-select-dateonly-processed")
              .AnyTime_picker({format:"%Y-%m-%d",hideInput:true,placement:"inline",
                              labelTitle:"Expiry Date"});
      	    $("#edit-ajax-timing-expiry-select:not(.expiry-select-processed)",
              context).addClass("expiry-select-processed")
              .AnyTime_picker({format:"%Y-%m-%d %H:%i:%s",hideInput:true,
                              placement:"inline",askSecond:false,
                              labelTitle:"Expiry Date and Time"});
          };
       }(jQuery));', 'inline');

  // Layout BeginTime
  if (!isset($form_state['storage']['ajax']['timing']['BeginTimeNow'])) {
    $form_state['storage']['ajax']['timing']['BeginTimeNow'] = TRUE;
  }
  $form['ajax']['timing']['BeginTimeNow'] =
    array('#type' => 'checkbox',
	  '#title' => t('Activate permit immediately'),
	  '#default_value' => $form_state['storage']['ajax']['timing']['BeginTimeNow'],
	  '#ahah' => array('event' => 'change',
			   'path' => ahah_helper_path(array('ajax')),
			   'wrapper' => 'ajax-wrapper'));

  if (!$form_state['storage']['ajax']['timing']['BeginTimeNow']) {
    if (!isset($form_state['storage']['ajax']['timing']['BeginTime'])) {
      $now = chpuser_datetime_utc_to_usertimezone('now');
      $form_state['storage']['ajax']['timing']['BeginTime'] =
	$now->format("Y-m-d H:i:s");
    }
    $form['ajax']['timing']['BeginTime'] =
      array('#type' => 'textfield',
	    '#default_value' => $form_state['storage']['ajax']['timing']['BeginTime']);
  }

  if ($permit_policy === 'ShortPolicy') {
    if (chpprop_property_demands_permit_expiry_by_days($profile)) {
      // Layout expiry based on days settings if configured
      $options = array();
      for ($ii = 0; $ii < $profile['ExpireDays']; $ii++) {
	$options[$ii + 1] = sprintf("%02d days", $ii + 1);
      }
      if (!isset($form_state['storage']['ajax']['timing']['expiry_days'])) {
	$form_state['storage']['ajax']['timing']['expiry_days'] = key($options);
      }
      $form['ajax']['timing']['expiry_days'] =
	array('#type' => 'select',
	      '#title' => t('Permit duration'),
	      '#options' => $options,
	      '#default_value' => $form_state['storage']['ajax']['timing']['expiry_days'],
	      '#ahah' => array('event' => 'change',
			       'path' => ahah_helper_path(array('ajax')),
			       'wrapper' => 'ajax-wrapper'));
    } elseif (chpprop_property_demands_permit_expiry_select($profile)) {
      // Layout expiry date picker for regular and hotel permits
      //if ($permit_type === 'Regular' or $permit_type === 'Hotel' or $permit_type === 'Validation') {
      if ($permit_type === 'Regular') {
	if (!isset($form_state['storage']['ajax']['timing']['expiry_select_dateonly'])) {
	  $time = chpuser_datetime_utc_to_usertimezone('now');
	  $time->modify('+1 day');
	  $form_state['storage']['ajax']['timing']['expiry_select_dateonly'] =
	    $time->format("Y-m-d");
	}
	$form['ajax']['timing']['expiry_select_dateonly'] =
	  array('#type' => 'textfield',
		'#default_value' =>
		$form_state['storage']['ajax']['timing']['expiry_select_dateonly']);
	// Normalize a timetag
	$timetag = $form_state['storage']['ajax']['timing']['expiry_select_dateonly'];
	// Add HH:MM:SS
	$now = chpuser_datetime_utc_to_usertimezone('now');
	$timetag .= $now->format(' H:i:s');
      } else {
	// Layout expiry date picker for non-regular permit
	if (!isset($form_state['storage']['ajax']['timing']['expiry_select'])) {
	  $time = chpuser_datetime_utc_to_usertimezone('now');
	  $time->modify('+1 day');
	  $form_state['storage']['ajax']['timing']['expiry_select'] =
	    $time->format("Y-m-d H:i:s");
	}
	$form['ajax']['timing']['expiry_select'] =
	  array('#type' => 'textfield',
		'#default_value' => $form_state['storage']['ajax']['timing']['expiry_select']);
	// Normalize a timetag
	$timetag = $form_state['storage']['ajax']['timing']['expiry_select'];
      }
    }
  }

  if ($permit_policy === 'ValetPolicy') {
    // Layout expiry date picker
    if (!isset($form_state['storage']['ajax']['timing']['expiry_select'])) {
      $time = chpuser_datetime_utc_to_usertimezone('now');
      $time->modify('+1 day');
      $form_state['storage']['ajax']['timing']['expiry_select'] =
	$time->format("Y-m-d H:i:s");
    }
    $form['ajax']['timing']['expiry_select'] =
      array('#type' => 'textfield',
	    '#default_value' => $form_state['storage']['ajax']['timing']['expiry_select']);
  }

  if ($form_state['storage']['ajax']['Registration'] === 'Transient' and
      $permit_policy === 'ShortPolicy') {
    // Layout cost and info
    $form['ajax']['cost'] =
      array('#type' => 'fieldset',
	    '#title' => t('Calculated cost'));

    $form['ajax']['cost']['updatecostbtn'] =
      array('#type' => 'button',
	    '#value' => t('Update'));

    if (strpos($form_state['clicked_button']['#id'], 'updatecostbtn') !== FALSE) {
    }

    if ($permit_type === 'Regular') {
      $tmp = chpperm_calculate_cost
	($company_id,
	 $timetag,
	 $form_state['storage']['ajax']['timing']['expiry_days'],
	 $profile,
	 $form_state['storage']['ajax']['permit']['Overnight']);
    } else {
      $container_id = substr($permit_type, 0, strpos($permit_type, '__'));
      $type_id = substr($permit_type, strlen($container_id) + strlen('__'));
      $tmp = chpperm_calculate_cost
	($company_id,
	 $timetag,
	 $form_state['storage']['ajax']['timing']['expiry_days'],
	 $profile,
	 $form_state['storage']['ajax']['permit']['Overnight'],
	 TRUE,
	 $container_id,
	 $type_id);
    }

    $tmp = unserialize($tmp);
    $cost = $tmp['Cost'];
    $info = $tmp['Info'];

    $form['ajax']['cost']['info'] =
      array('#value' => '<center>'.$info.'<br><h2>'.$cost.'</h2></center>');
    $form['ajax']['Cost'] =
      array('#type' => 'hidden',
	    '#value' => $cost);
  }

  /**
   * Wizard completed
   */

  if ($form_state['storage']['ajax']['Registration'] === 'Hotel' or
      $form_state['storage']['ajax']['Wizard'] === 4) {
    $form['ajax']['save'] =
      array('#type' => 'image_button',
	    '#src' => drupal_get_path('module', 'anai').'/save.png',
	    '#validate' => array('chpperm_permit_add_form_validate_save'),
	    '#submit' => array('chpperm_permit_add_form_submit_save'));
  }

  $form['ajax']['cancel'] =
    array('#type' => 'image_button',
	  '#src' => drupal_get_path('module', 'anai').'/cancel.png',
	  '#submit' => array('chpperm_permit_add_form_submit_cancel'));
  return $form;
}

function chpperm_permit_add_form_submit_cancel($form, &$form_state) {
  unset($form_state['storage']);
  $form_state['redirect'] = 'front_page';
}

function chpperm_permit_add_form_validate_save_person_helper(&$form_state) {
  if (isset($form_state['values']['ajax']['person'])) {
    if (isset($form_state['values']['ajax']['person']['FirstName']) and
	empty($form_state['values']['ajax']['person']['FirstName'])) {
      form_set_error('ajax][person][FirstName', 'First name field is required.');
      return FALSE;
    }
    if (isset($form_state['values']['ajax']['person']['LastName']) and
	empty($form_state['values']['ajax']['person']['LastName'])) {
      form_set_error('ajax][person][LastName', 'Last name field is required.');
      return FALSE;
    }
    if (isset($form_state['values']['ajax']['person']['Street']) and
	empty($form_state['values']['ajax']['person']['Street'])) {
      form_set_error('ajax][person][Street', 'Street field is required.');
      return FALSE;
    }
    if (isset($form_state['values']['ajax']['person']['City']) and
	empty($form_state['values']['ajax']['person']['City'])) {
      form_set_error('ajax][person][City', 'City field is required.');
      return FALSE;
    }
    if (isset($form_state['values']['ajax']['person']['PostalCode']) and
	empty($form_state['values']['ajax']['person']['PostalCode'])) {
      form_set_error('ajax][person][PostalCode', 'Postal code field is required.');
      return FALSE;
    }
    if (isset($form_state['values']['ajax']['person']['Phone']) and
	empty($form_state['values']['ajax']['person']['Phone'])) {
      form_set_error('ajax][person][Phone', 'Phone field is required.');
      return FALSE;
    }
    if (isset($form_state['values']['ajax']['person']['Email']) and
	empty($form_state['values']['ajax']['person']['Email'])) {
      form_set_error('ajax][person][Email', 'Email field is required.');
      return FALSE;
    }

    // Check GEO Coding
    $location = array();
    $location['street'] = $form_state['values']['ajax']['person']['Street'];
    $location['city'] = $form_state['values']['ajax']['person']['City'];
    $location['postal_code'] = $form_state['values']['ajax']['person']['PostalCode'];
    $location['province'] = $form_state['values']['ajax']['person']['Province'];
    $location['country'] = $form_state['values']['ajax']['person']['Country'];
    $pos = location_latlon_exact($location);
    if ($pos) {
      $form_state['storage']['ajax']['person']['Lat'] = $pos['lat'];
      $form_state['storage']['ajax']['person']['Lon'] = $pos['lon'];
    }
  }
  return TRUE;
}

function chpperm_permit_add_form_validate_save_permit_helper(&$form_state) {
  if (isset($form_state['values']['ajax']['permit']['SuiteId']) and
      empty($form_state['values']['ajax']['permit']['SuiteId'])) {
    form_set_error('ajax][permit][SuiteId', t('Suite field is required.'));
    return FALSE;
  }
  if (isset($form_state['values']['ajax']['permit']['StallId']) and
      empty($form_state['values']['ajax']['permit']['StallId'])) {
    form_set_error('ajax][permit][StallId', t('Stall field is required.'));
    return FALSE;
  }
  if (isset($form_state['values']['ajax']['permit']['RoleOther']) and
      empty($form_state['values']['ajax']['permit']['RoleOther'])) {
    form_set_error('ajax][permit][RoleOther', t('Other relationship field is required.'));
    return FALSE;
  }

  return TRUE;
}

function chpperm_permit_add_form_validate_save_vehicle_helper(&$form_state) {
  if (empty($form_state['values']['ajax']['vehicle']['LPN'])) {
    form_set_error('ajax][vehicle][LPN', 'License plate number field is required.');
    return FALSE;
  }
  if (preg_match('/\s/', $form_state['values']['ajax']['vehicle']['LPN'])) {
    form_set_error('ajax][vehicle][LPN',
		   'License plate number shall be given without any spaces.');
    return FALSE;
  }

  // Preventing double booking of same LPN
  if (!isset($form_state['values']['OldLPN']) or
      (isset($form_state['values']['OldLPN']) and
       $form_state['values']['OldLPN'] !== $form_state['values']['ajax']['vehicle']['LPN'])) {
    if (chdbperm_permit_exists($form_state['values']['ajax']['CompanyId'],
			       $form_state['values']['ajax']['PropertyId'],
			       $form_state['values']['ajax']['LotId'],
			       $form_state['values']['ajax']['vehicle']['LPN'])) {
      form_set_error('ajax][vehicle][LPN',
		     t('License plate number already registered on lot.'));
      return FALSE;
    }
  }

  if (empty($form_state['values']['ajax']['vehicle']['Make'])) {
    form_set_error('ajax][vehicle][Make', 'Make field is required.');
    return FALSE;
  }
  if (empty($form_state['values']['ajax']['vehicle']['Model'])) {
    form_set_error('ajax][vehicle][Model', 'Model field is required.');
    return FALSE;
  }
  if (empty($form_state['values']['ajax']['vehicle']['Color'])) {
    form_set_error('ajax][vehicle][Color', 'Color field is required.');
    return FALSE;
  }

  return TRUE;
}

function chpperm_permit_add_form_validate_save($form, &$form_state) {
  if (!chpperm_permit_add_form_validate_save_person_helper($form_state)) {
    return;
  }
  if (!chpperm_permit_add_form_validate_save_permit_helper($form_state)) {
    return;
  }
  if (!chpperm_permit_add_form_validate_save_vehicle_helper($form_state)) {
    return;
  }
}

function chpperm_permit_add_form_submit_save($form, &$form_state) {
  global $user;
  $company_id = $form_state['values']['ajax']['CompanyId'];
  $property_id = $form_state['values']['ajax']['PropertyId'];
  $lot_id = $form_state['values']['ajax']['LotId'];

  $policy = chdbprop_get_policy($property_id, $lot_id);
  $profile_id = $policy['ProfileId'];
  $profile = chdbprop_get_profile($profile_id);

  $lpn = check_plain($form_state['values']['ajax']['vehicle']['LPN']);
  $make = check_plain($form_state['values']['ajax']['vehicle']['Make']);
  $model = check_plain($form_state['values']['ajax']['vehicle']['Model']);
  $color = check_plain($form_state['values']['ajax']['vehicle']['Color']);

  // PermitPolicy is lot policy, e.i. short, long, valet
  $permit_policy = $form_state['values']['ajax']['permit']['PermitPolicy'];

  // PermitType is Regular, Hotel, Validation, or CONT__TYPE
  $permit_type = $form_state['values']['ajax']['permit']['PermitType'];

  // Registration is Transient, Group, Member, Hotel, Dock, or Validation
  $permit_class = $form_state['values']['ajax']['Registration'];

  $expiry_date_only = FALSE;
  $container_permit = FALSE;
  $complementary = FALSE;
  $container_id = NULL;
  $type_id = NULL;
  $cost = '0.00';

  if ($permit_policy === 'ShortPolicy') {
    if ($permit_type === 'Regular') {
      $expiry_date_only = TRUE;
      $cost = $form_state['values']['ajax']['Cost'];
    }
    $container_id = substr($permit_type, 0, strpos($permit_type, '__'));
    if (empty($container_id)) {
      // ...not a container
      $container_id = NULL;
    } else {
      // ...container
      $container_permit = TRUE;
      $type_id = substr($permit_type, strlen($container_id) + strlen('__'));
      $conttype = chdbperm_get_conttype($company_id, $container_id, $type_id);
      $cost = $conttype['UnitValue'];
      if ($conttype['GroupType'] === 'Complementary') {
	$complementary = TRUE;
      }
    }
  } elseif ($permit_policy === 'LongPolicy') {
    $container_id = substr($permit_type, 0, strpos($permit_type, '__'));
    if (empty($container_id)) {
      // ...not a container
      $container_id = NULL;
    } else {
      // ...container
      $container_permit = TRUE;
      $type_id = substr($permit_type, strlen($container_id) + strlen('__'));
      $conttype = chdbperm_get_conttype($company_id, $container_id, $type_id);
      $cost = $conttype['UnitValue'];
      if ($conttype['GroupType'] === 'Complementary') {
	$complementary = TRUE;
      }
    }
  } elseif ($permit_policy === 'ValetPolicy') {
    $permit_class = 'Valet';
  }

  if (isset($form_state['values']['ajax']['timing']['expiry_select_dateonly'])) {
    $expiry_select_dateonly =
      $form_state['values']['ajax']['timing']['expiry_select_dateonly'];
  } else {
    $expiry_select_dateonly = NULL;
  }

  if (isset($form_state['values']['ajax']['timing']['expiry_select'])) {
    $expiry_select = $form_state['values']['ajax']['timing']['expiry_select'];
  } else {
    $expiry_select = NULL;
  }

  if (isset($form_state['values']['ajax']['timing']['expiry_days'])) {
    $expiry_days = $form_state['values']['ajax']['timing']['expiry_days'];
  } else {
    $expiry_days = NULL;
  }

  if (isset($form_state['values']['ajax']['permit']['Overnight'])) {
    $overnight = $form_state['values']['ajax']['permit']['Overnight'];
  } else {
    $overnight = FALSE;
  }

  $long_term = FALSE;
  $short_term = FALSE;
  $valet = FALSE;
  if ($permit_policy === 'LongPolicy') {
    $long_term = TRUE;
  }
  if ($permit_policy === 'ShortPolicy') {
    $short_term = TRUE;
  }
  if ($permit_policy === 'ValetPolicy') {
    $valet = TRUE;
  }

  if (isset($form_state['values']['ajax']['person']['PrenameId'])) {
    $prename_id = $form_state['values']['ajax']['person']['PrenameId'];
  } else {
    $prename_id = NULL;
  }

  if (isset($form_state['values']['ajax']['person']['FirstName'])) {
    $firstname = check_plain($form_state['values']['ajax']['person']['FirstName']);
  } else {
    $firstname = NULL;
  }

  if (isset($form_state['values']['ajax']['person']['MiddleName'])) {
    $middlename = check_plain($form_state['values']['ajax']['person']['MiddleName']);
  } else {
    $middlename = NULL;
  }

  if (isset($form_state['values']['ajax']['person']['LastName'])) {
    $lastname = check_plain($form_state['values']['ajax']['person']['LastName']);
  } else {
    $lastname = NULL;
  }

  if (isset($form_state['values']['ajax']['person']['SufnameId'])) {
    $sufname_id = $form_state['values']['ajax']['person']['SufnameId'];
  } else {
    $sufname_id = NULL;
  }

  if (isset($form_state['values']['ajax']['person']['Street'])) {
    $street = check_plain($form_state['values']['ajax']['person']['Street']);
  } else {
    $street = NULL;
  }

  if (isset($form_state['values']['ajax']['person']['City'])) {
    $city = check_plain($form_state['values']['ajax']['person']['City']);
  } else {
    $city = NULL;
  }

  if (isset($form_state['values']['ajax']['person']['PostalCode'])) {
    $postalcode = check_plain($form_state['values']['ajax']['person']['PostalCode']);
  } else {
    $postalcode = NULL;
  }

  if (isset($form_state['values']['ajax']['person']['Province'])) {
    $province = $form_state['values']['ajax']['person']['Province'];
  } else {
    $province = NULL;
  }

  if (isset($form_state['values']['ajax']['person']['Country'])) {
    $country = chpprop_retrieve_country($form_state['values']['ajax']['person']['Country']);
  } else {
    $country = NULL;
  }

  if (isset($form_state['values']['ajax']['person']['Phone'])) {
    $phone = check_plain($form_state['values']['ajax']['person']['Phone']);
  } else {
    $phone = NULL;
  }

  if (isset($form_state['values']['ajax']['person']['Email'])) {
    $email = check_plain($form_state['values']['ajax']['person']['Email']);
  } else {
    $email = NULL;
  }

  if (isset($form_state['values']['ajax']['person']['EmailNotification'])) {
    $emailnotification = $form_state['values']['ajax']['person']['EmailNotification'];
  } else {
    $emailnotification = NULL;
  }

  if (isset($form_state['storage']['ajax']['person']['Lat'])) {
    $lat = $form_state['storage']['ajax']['person']['Lat'];
  } else {
    $lat = NULL;
  }

  if (isset($form_state['storage']['ajax']['person']['Lon'])) {
    $lon = $form_state['storage']['ajax']['person']['Lon'];
  } else {
    $lon = NULL;
  }

  $floor_id = NULL; // TBD

  if (isset($form_state['values']['ajax']['permit']['SuiteId'])) {
    $suite_id = $form_state['values']['ajax']['permit']['SuiteId'];
  } else {
    $suite_id = NULL;
  }

  // If LevelId is non-existing then it is used as freetext
  if (isset($form_state['values']['ajax']['permit']['LevelId'])) {
    $level_id = $form_state['values']['ajax']['permit']['LevelId'];
  } else {
    $level_id = NULL;
  }

  if (isset($form_state['values']['ajax']['permit']['StallId'])) {
    $stall_id = $form_state['values']['ajax']['permit']['StallId'];
  } else {
    $stall_id = NULL;
  }

  if (isset($form_state['values']['ajax']['GroupId'])) {
    $group_id = $form_state['values']['ajax']['GroupId'];
  } else {
    $group_id = NULL;
  }

  if (isset($form_state['values']['ajax']['MemberId'])) {
    $member_id = $form_state['values']['ajax']['MemberId'];
  } else {
    $member_id = NULL;
  }

  if (isset($form_state['values']['ajax']['permit']['Role'])) {
    if ($form_state['values']['ajax']['permit']['Role'] !== 'Other') {
      $role = $form_state['values']['ajax']['permit']['Role'];
    } else {
      $role = check_plain($form_state['values']['ajax']['permit']['RoleOther']);
    }
  } else {
    $role = NULL;
  }

  // Set PermitTag in format: YYYYMMDDNNNN
  $now = chpuser_datetime_utc_to_utc('now');
  $db = chdbperm_get_permittag_property($company_id, $property_id, $lot_id);
  if (empty($db)) {
    $permit_tag = $now->format("ymd")."0001";
    if (chdbperm_insert_permittag_property
	($company_id,
	 $property_id,
	 $lot_id,
	 $permit_tag)) {
      drupal_set_message('Could not insert permit_tag', 'error');
      return;
    }
  } else {
    $permit_tag = $db['PermitTag'];
    $yy = substr($permit_tag, 0, 2);
    $mm = substr($permit_tag, 2, 2);
    $dd = substr($permit_tag, 4, 2);
    if ($now->format("y") != $yy or
	$now->format("m") != $mm or
	$now->format("d") != $dd) {
      $permit_tag = $now->format("ymd")."0001";
    } else {
      $permit_tag++;
    }
    if (chdbperm_update_permittag_property
	($company_id,
	 $property_id,
	 $lot_id,
	 $permit_tag)) {
      drupal_set_message('Could not update permit_tag', 'error');
      return;
    }
  }

  // Insert common data
  if (chdbperm_insert_permit
      ($company_id, $property_id, $lot_id, $group_id, $member_id,
       $user->uid, $lat, $lon,
       $long_term, $short_term, $valet,
       $prename_id, $firstname, $middlename, $lastname, $sufname_id,
       $street, $city, $postalcode, $province, $country,
       $phone, $email, $emailnotification,
       $role,
       $lpn, $make, $model, $color,
       $permit_tag, $floor_id, $suite_id, $level_id, $stall_id,
       $complementary, $cost,
       $permit_class, $container_id, $type_id,
       $id)) {
    drupal_set_message('Could not insert new permit', 'error');
    return;
  }

  // Update timing
  $begin_now = FALSE;
  if (isset($form_state['values']['ajax']['timing']['BeginTimeNow']) and
      $form_state['values']['ajax']['timing']['BeginTimeNow']) {
    $begin_now = TRUE;
  }
  if ($begin_now) {
    $begin = chpuser_datetime_utc_to_utc('now');
  } else {
    $begin = chpuser_datetime_usertimezone_to_utc($form_state['values']['ajax']['timing']['BeginTime']);
  }
  if (chdbperm_update_permit_timing_id
      ($id,
       !$form_state['values']['ajax']['timing']['BeginTimeNow'],
       $begin->format("Y-m-d H:i:s"),
       FALSE, NULL)) {
    drupal_set_message('Could not update permit begin time', 'error');
    return;
  }

  // Insert new-stats
  if (chdbperm_stats_new
      ($company_id, $property_id, $lot_id,
       $group_id, $member_id, $lpn)) {
    drupal_set_message('Could not update stats', 'error');
  }

  // Insert expiry time
  if ($short_term and $expiry_date_only) {
    if (chpperm_permit_submit_expiry_dateonly_helper
	($id,
	 $profile,
	 $overnight,
	 $expiry_select_dateonly,
	 $expiry_days)) {
      drupal_set_message('Could not update regular permit', 'error');
      return;
    }
  } elseif ($short_term and $container_permit) {
    if (chpperm_permit_submit_expiry_container_helper
	($id,
	 $profile,
	 $conttype,
	 $expiry_select,
	 $expiry_days)) {
      drupal_set_message('Could not update non-regular permit', 'error');
      return;
    }
  } else {
    $expirytime = chpuser_datetime_usertimezone_to_utc($expiry_select);
    if (chdbperm_update_permit_expiry_time
	($id, $expirytime->format("Y-m-d H:i:s"))) {
      drupal_set_message('Could not update expiry time', 'error');
      return;
    }
  }

  // Short term retention, extension and cost
  if ($short_term) {
    if (chpprop_property_uses_renew_retention($profile)) {
      if (chdbperm_update_permit_retention
	  ($id,
	   chpprop_property_renew_retention_days($profile))) {
	drupal_set_message('Could not update retention', 'error');
	return;
      }
    } else {
      if (chdbperm_update_permit_retention_at_expiry
	  ($id)) {
	drupal_set_message('Could not update retention', 'error');
	return;
      }
    }

    if (chdbperm_update_permit_overnight
	($id, $overnight)) {
      drupal_set_message('Could not update extension', 'error');
      return;
    }

    if (chdbperm_update_permit_cost
	($id,
	 $form_state['values']['ajax']['Cost'])) {
      drupal_set_message('Could not update cost', 'error');
      return;
    }
  }

  // Long term expiry
  if ($long_term) {
    if (chpprop_property_allows_unlimited_validity($profile)) {
      if (chdbperm_update_permit_expiry_offset_from_create
	  ($id, 3 * 12, 0, 0, 0)) {
	drupal_set_message('Could not update unlimited validity', 'error');
	return;
      }
    } elseif (chpprop_property_allows_annual_validity($profile)) {
      if (chdbperm_update_permit_expiry_offset_from_create
	  ($id, 12, 0, 0, 0)) {
	drupal_set_message('Could not update annual validity', 'error');
	return;
      }
    } elseif (chpprop_property_allows_month_validity($profile)) {
      if (chdbperm_update_permit_expiry_offset_from_create
	  ($id, 1, 0, 0, 0)) {
	drupal_set_message('Could not update annual validity', 'error');
	return;
      }
    } elseif (chpprop_property_allows_validity_days($profile)) {
      if (chdbperm_update_permit_expiry_offset_from_create
	  ($id, 0, 0, chpprop_property_validity_days($profile), 0)) {
	drupal_set_message('Could not update validity days', 'error');
	return;
      }
    }
  }

  if ($short_term or $long_term) {
    if ($form_state['values']['ajax']['permit']['PermitContext'] === 'Shared') {
      $shared = chdbperm_get_permit_lpn
	($company_id,
	 $property_id,
	 $lot_id,
	 $form_state['values']['ajax']['permit']['PermitLink']);
      if (!empty($shared['SharedId'])) {
	$shared_id = $shared['SharedId'];
      } else {
	$shared_id = chpprop_genRandomString20();
	if (chdbperm_update_permit_shared
	    ($company_id,
	     $property_id,
	     $lot_id,
	     $form_state['values']['ajax']['permit']['PermitLink'],
	     $shared_id)) {
	  drupal_set_message('Could not update shared permit', 'error');
	  return;
	}
      }
      if (chdbperm_update_permit_shared_id
	  ($id,
	   $shared_id)) {
	drupal_set_message('Could not update shared status', 'error');
	return;
      }
    }
  }

  if ($valet) {
    $expirytime = chpuser_datetime_usertimezone_to_utc($expiry_select);
    if (chdbperm_update_permit_expiry_time
	($id, $expirytime->format("Y-m-d H:i:s"))) {
      drupal_set_message('Could not update expiry time valet', 'error');
      return;
    }
    if (chdbperm_update_permit_retention_at_expiry
	($id)) {
      drupal_set_message('Could not update retention for valet', 'error');
      return;
    }
  }

  // Occupancy
  if ($begin_now) {
    if (NULL !== $expiry_select_dateonly) {
      $now = chpuser_datetime_utc_to_usertimezone('now');
      $expirytime = chpuser_datetime_usertimezone_to_utc
	($expiry_select_dateonly.$now->format(" H:i:s"));
    } elseif (NULL !== $expiry_select) {
      $expirytime = chpuser_datetime_usertimezone_to_utc($expiry_select);
    } else {
      // Dummy default (shall not happen)
      $expirytime = chpuser_datetime_utc_to_utc('now');
      $expirytime->modify("+1 hour");
    }
// PY : Jun 1.14
//drupal_set_message('chpperm_permit_add_form_submit_save:get_all_occupancy | '.$property_id.' | '.$lot_id, 'error');
//return;

    foreach (chdboccu_get_all_occupancy($property_id, $lot_id) as $key => $occu) {
      if (1 < chpperm_fuzzy_search_lpn($lpn, $occu['LPN'])) {
	continue;
      }
      $event_id = $occu['EventId'];
      //drupal_set_message('chpperm_permit_add_form_submit_save:get_all_occupancy | '.$event_id. ' error');
      //return;
      if (chdboccu_unshift_event_white_immediately
	  ($property_id, $lot_id, $lpn, $event_id,
	   $expirytime->format("Y-m-d H:i:s"),
	   $tmp)) {
	drupal_set_message('Could not update occupancy', 'error');
	return;
      }
      break;
    }
  }

  // Agent poll
  if (chdbprop_insert_agentpoll_whitelist($property_id, $lot_id)) {
    drupal_set_message('Could not insert whitelist poll', 'error');
    return;
  }

  // Duplicate lot registation
  if (isset($form_state['values']['ajax']['permit']['DupLots'])) {
    $level_id = NULL;
    $stall_id = NULL;

    foreach ($form_state['values']['ajax']['permit']['DupLots'] as $key => $value) {
      if (!$value) {
	continue;
      }
      $other_policy = chdbprop_get_policy($property_id, $key);
      $other_profile_id = $other_policy['ProfileId'];
      $other_profile = chdbprop_get_profile($other_profile_id);

      // Set PermitTag in format: YYYYMMDDNNNN
      $db = chdbperm_get_permittag_property($company_id, $property_id, $key);
      if (empty($db)) {
	$permit_tag = $now->format("ymd")."0001";
	if (chdbperm_insert_permittag_property
	    ($company_id,
	     $property_id,
	     $key,
	     $permit_tag)) {
	  drupal_set_message('Could not insert permit_tag', 'error');
	  return;
	}
      } else {
	$permit_tag = $db['PermitTag'];
	$yy = substr($permit_tag, 0, 2);
	$mm = substr($permit_tag, 2, 2);
	$dd = substr($permit_tag, 4, 2);
	if ($now->format("y") != $yy or
	    $now->format("m") != $mm or
	    $now->format("d") != $dd) {
	  $permit_tag = $now->format("ymd")."0001";
	} else {
	  $permit_tag++;
	}
	if (chdbperm_update_permittag_property
	    ($company_id,
	     $property_id,
	     $key,
	     $permit_tag)) {
	  drupal_set_message('Could not update permit_tag', 'error');
	  return;
	}
      }

      // Insert common data
      if (chdbperm_insert_permit
	  ($company_id, $property_id, $key, $group_id, $member_id,
	   $user->uid, $lat, $lon,
	   $long_term, $short_term, $valet,
	   $prename_id, $firstname, $middlename, $lastname, $sufname_id,
	   $street, $city, $postalcode, $province, $country,
	   $phone, $email, $emailnotification,
	   $role,
	   $lpn, $make, $model, $color,
	   $permit_tag, $floor_id, $suite_id, $level_id, $stall_id,
	   $complementary, $cost,
	   $permit_class, $container_id, $type_id,
	   $id)) {
	drupal_set_message('Could not insert new permit', 'error');
	return;
      }
      
      // Update timing
      $begin_now = FALSE;
      if (isset($form_state['values']['ajax']['timing']['BeginTimeNow']) and
	  $form_state['values']['ajax']['timing']['BeginTimeNow']) {
	$begin_now = TRUE;
      }
      if ($begin_now) {
	$begin = chpuser_datetime_utc_to_utc('now');
      } else {
	$begin = chpuser_datetime_usertimezone_to_utc
	  ($form_state['values']['ajax']['timing']['BeginTime']);
      }
      if (chdbperm_update_permit_timing_id
	  ($id,
	   !$form_state['values']['ajax']['timing']['BeginTimeNow'],
	   $begin->format("Y-m-d H:i:s"),
	   FALSE, NULL)) {
	drupal_set_message('Could not update permit begin time', 'error');
	return;
      }

      // Insert new-stats
      if (chdbperm_stats_new
	  ($company_id, $property_id, $key,
	   $group_id, $member_id, $lpn)) {
	drupal_set_message('Could not update stats', 'error');
      }

      // Insert expiry time
      if ($short_term and $expiry_date_only) {
	if (chpperm_permit_submit_expiry_dateonly_helper
	    ($id,
	     $other_profile,
	     $overnight,
	     $expiry_select_dateonly,
	     $expiry_days)) {
	  drupal_set_message('Could not update regular permit', 'error');
	  return;
	}
      } elseif ($short_term and $container_permit) {
	if (chpperm_permit_submit_expiry_container_helper
	    ($id,
	     $other_profile,
	     $conttype,
	     $expiry_select,
	     $expiry_days)) {
	  drupal_set_message('Could not update non-regular permit', 'error');
	  return;
	}
      } else {
	$expirytime = chpuser_datetime_usertimezone_to_utc($expiry_select);
	if (chdbperm_update_permit_expiry_time
	    ($id, $expirytime->format("Y-m-d H:i:s"))) {
	  drupal_set_message('Could not update expiry time', 'error');
	  return;
	}
      }

      // Short term retention, extension and cost
      if ($short_term) {
	if (chpprop_property_uses_renew_retention($other_profile)) {
	  if (chdbperm_update_permit_retention
	      ($id,
	       chpprop_property_renew_retention_days($other_profile))) {
	    drupal_set_message('Could not update retention', 'error');
	    return;
	  }
	} else {
	  if (chdbperm_update_permit_retention_at_expiry
	      ($id)) {
	    drupal_set_message('Could not update retention', 'error');
	    return;
	  }
	}

	if (chdbperm_update_permit_overnight
	    ($id, $overnight)) {
	  drupal_set_message('Could not update extension', 'error');
	  return;
	}

	if (chdbperm_update_permit_cost
	    ($id,
	     $form_state['values']['ajax']['Cost'])) {
	  drupal_set_message('Could not update cost', 'error');
	  return;
	}
      }

      // Long term expiry
      if ($long_term) {
	if (chpprop_property_allows_unlimited_validity($other_profile)) {
	  if (chdbperm_update_permit_expiry_offset_from_create
	      ($id, 3 * 12, 0, 0, 0)) {
	    drupal_set_message('Could not update unlimited validity', 'error');
	    return;
	  }
	} elseif (chpprop_property_allows_annual_validity($other_profile)) {
	  if (chdbperm_update_permit_expiry_offset_from_create
	      ($id, 12, 0, 0, 0)) {
	    drupal_set_message('Could not update annual validity', 'error');
	    return;
	  }
	} elseif (chpprop_property_allows_month_validity($other_profile)) {
	  if (chdbperm_update_permit_expiry_offset_from_create
	      ($id, 1, 0, 0, 0)) {
	    drupal_set_message('Could not update annual validity', 'error');
	    return;
	  }
	} elseif (chpprop_property_allows_validity_days($other_profile)) {
	  if (chdbperm_update_permit_expiry_offset_from_create
	      ($id, 0, 0, chpprop_property_validity_days($other_profile), 0)) {
	    drupal_set_message('Could not update validity days', 'error');
	    return;
	  }
	}
      }

      if ($short_term or $long_term) {
	if ($form_state['values']['ajax']['permit']['PermitContext'] === 'Shared') {
	  $shared = chdbperm_get_permit_lpn
	    ($company_id,
	     $property_id,
	     $key,
	     $form_state['values']['ajax']['permit']['PermitLink']);
	  if (!empty($shared['SharedId'])) {
	    $shared_id = $shared['SharedId'];
	  } else {
	    $shared_id = chpprop_genRandomString20();
	    if (chdbperm_update_permit_shared
		($company_id,
		 $property_id,
		 $key,
		 $form_state['values']['ajax']['permit']['PermitLink'],
		 $shared_id)) {
	      drupal_set_message('Could not update shared permit', 'error');
	      return;
	    }
	  }
	  if (chdbperm_update_permit_shared_idl
	      ($id,
	       $shared_id)) {
	    drupal_set_message('Could not update shared status', 'error');
	    return;
	  }
	}
      }

      if ($valet) {
	$expirytime = chpuser_datetime_usertimezone_to_utc($expiry_select);
	if (chdbperm_update_permit_expiry_time
	    ($id, $expirytime->format("Y-m-d H:i:s"))) {
	  drupal_set_message('Could not update expiry time valet', 'error');
	  return;
	}
	if (chdbperm_update_permit_retention_at_expiry
	    ($id)) {
	  drupal_set_message('Could not update retention for valet', 'error');
	  return;
	}
      }

// PY : Jun 1.14
drupal_set_message('chpperm_permit_add_form_submit_save:occupancy', 'error');
return;

      // Occupancy
      if ($begin_now) {
	if (NULL !== $expiry_select_dateonly) {
	  $now = chpuser_datetime_utc_to_usertimezone('now');
	  $expirytime = chpuser_datetime_usertimezone_to_utc
	    ($expiry_select_dateonly.$now->format(" H:i:s"));
	} elseif (NULL !== $expiry_select) {
	  $expirytime = chpuser_datetime_usertimezone_to_utc($expiry_select);
	} else {
	  // Dummy default (shall not happen)
	  $expirytime = chpuser_datetime_utc_to_utc('now');
	  $expirytime->modify("+1 hour");
	}
	foreach (chdboccu_get_all_occupancy($property_id, $key) as $occu) {
	  if (1 < chpperm_fuzzy_search_lpn($lpn, $occu['LPN'])) {
	    continue;
	  }
	  $event_id = $occu['EventId'];
	  if (chdboccu_unshift_event_white_immediately
	      ($property_id, $key, $lpn, $event_id,
	       $expirytime->format("Y-m-d H:i:s"),
	       $tmp)) {
	    drupal_set_message('Could not update occupancy', 'error');
	    return;
	  }
	  break;
	}
      }

      // Agent poll
      if (chdbprop_insert_agentpoll_whitelist($property_id, $key)) {
        drupal_set_message('Could not insert whitelist poll', 'error');
        return;
      }
    }
  }

  // Frequent user
  $freq_user = chdbprop_get_freq_user($lpn);
  if (sizeof($freq_user) == 0) {
    if (chdbprop_insert_freq_user
	($property_id, $lpn, $make, $model, $color)) {
      drupal_set_message('Could not insert freq user', 'error');
      return;
    }
  } else {
    if (chdbprop_update_freq_user
	($property_id, $lpn, $make, $model, $color)) {
      drupal_set_message('Could not update freq user', 'error');
      return;
    }
  }

  unset($form_state['storage']);
  $form_state['redirect'] = 'chppermlist';
}

function chpperm_permit_submit_expiry_dateonly_helper($id, $profile, $overnight, $yy_mm_dd, $days) {
  $ehh = 0;
  $emm = 0;
  if (chpprop_property_has_permit_expiry_at_start($profile)) {
    list($ehh, $emm) = sscanf($profile['Start'], "%02d:%02d");
  } elseif (chpprop_property_has_permit_expiry_at_stop($profile)) {
    list($ehh, $emm) = sscanf($profile['Stop'], "%02d:%02d");
  } elseif (chpprop_property_has_permit_expiry_at_overnight_start($profile)) {
    list($ehh, $emm) = sscanf($profile['OvernightStart'], "%02d:%02d");
  } elseif (chpprop_property_has_permit_expiry_at_overnight_stop($profile)) {
    list($ehh, $emm) = sscanf($profile['OvernightStop'], "%02d:%02d");
  }
  //drupal_set_message('ehh:'.$ehh);
  //drupal_set_message('$emm:'.$emm);

  // Using UTC as time reference since all time stamps in DB are UTC
  // While the start and stop times of property is user timezone
  $timereference = chpuser_datetime_utc_to_utc('now');
  $expirytime = chpuser_datetime_utc_to_usertimezone('now');
  //drupal_set_message('$timereference:'.$timereference->format("Y-m-d H:i:s"));
  //drupal_set_message('$expirytime:'.$expirytime->format("Y-m-d H:i:s"));

  if ($overnight) {
    // If overnight, the expiry time shall be until closing time next day
    // since overnight has been paid and the days are "bridged" together.
    list($hh, $mm) = sscanf($profile['OvernightStop'], "%02d:%02d");
    $expirytime->setTime($hh, $mm);
    $expirytime = chpuser_datetime_usertimezone_to_utc
      ($expirytime->format("Y-m-d H:i:s"));
    if ($expirytime < $timereference) {
      $expirytime->modify('+1 day');
    }
    $timereference = chpuser_datetime_utc_to_utc($expirytime->format("Y-m-d H:i:s"));
    $expirytime = chpuser_datetime_utc_to_usertimezone
      ($expirytime->format("Y-m-d H:i:s"));
    // PY : May 17.14
    //drupal_set_message('$expirytime:'.$expirytime->format("Y-m-d H:i:s"));
  }

  $expirytime->setTime($ehh, $emm);
  //drupal_set_message('$expirytime:'.$expirytime->format("Y-m-d H:i:s"));
  $expirytime = chpuser_datetime_usertimezone_to_utc
    ($expirytime->format("Y-m-d H:i:s"));

  if ($expirytime < $timereference) {
    //drupal_set_message('$expirytime:'.$expirytime->format("Y-m-d H:i:s"));
    $expirytime->modify('+1 day');
  }
  //drupal_set_message('$expirytime:'.$expirytime->format("Y-m-d H:i:s"));

  $num_years = 0;
  $num_months = 0;
  $num_days = 1;
  $days_of_parking = 0;

  if ($days > 0) {
    $num_days = $days;
    $expirytime->modify(sprintf('+%d day', $num_days));
    //drupal_set_message('$expirytime:'.$expirytime->format("Y-m-d H:i:s"));
  }

  if (!empty($yy_mm_dd)) {
    //drupal_set_message('expiry:'.$yy_mm_dd);
    $datetime1 = chpuser_datetime_usertimezone_to_utc($yy_mm_dd.' 00:00:00');
    $now = new DateTime('now');
    $datetime2 = chpuser_datetime_usertimezone_to_utc($now->format("Y-m-d").' 00:00:00');
    $interval = $datetime2->diff($datetime1);
    //drupal_set_message('$datetime1:'.$datetime1->format("Y-m-d H:i:s"));
    //drupal_set_message('$datetime2:'.$datetime2->format("Y-m-d H:i:s"));
    $num_years = $interval->y;
    $num_months = $interval->m;
    $num_days = $interval->d;
    if (($num_years == 0 and $num_months == 0 and $num_days < 1) or $interval->invert) {
      $num_years = 0;
      $num_months = 0;
      $num_days = 1;
    }
    //drupal_set_message('$expirytime:'.$expirytime->format("Y-m-d H:i:s"));
    $expirytime->modify(sprintf('+%d years', $num_years));
    $expirytime->modify(sprintf('+%d months', $num_months));
    $expirytime->modify(sprintf('+%d days', $num_days));
    //drupal_set_message('Y:'.$num_years);
    //drupal_set_message('M:'.$num_months);
    //drupal_set_message('D:'.$num_days);
    //drupal_set_message('H:'.$interval->h);
    //drupal_set_message('$expirytime:'.$expirytime->format("Y-m-d H:i:s"));
  }

  if (chdbperm_update_permit_expiry_time
      ($id, $expirytime->format("Y-m-d H:i:s"))) {
    drupal_set_message('Could not update expiry time', 'error');
    return 1;
  }

  return 0;
}

function chpperm_permit_submit_expiry_container_helper($id,
						       $profile,
						       $conttype,
						       $expiry_select,
						       $expiry_days) {
  // Expiry based on fixed period
  if ($conttype['RateType'] === 'Fixed') {
    if ($conttype['ValueUnit'] === 'Month') {
      if (chdbperm_update_permit_expiry_offset_from_create
	  ($id, $conttype['FixedPeriod'], 0, 0, 0)) {
	drupal_set_message('Could not update expiry offset fixed week', 'error');
	return;
      }
    } elseif ($conttype['ValueUnit'] === 'Week') {
      if (chdbperm_update_permit_expiry_offset_from_create
	  ($id, 0, $conttype['FixedPeriod'], 0, 0)) {
	drupal_set_message('Could not update expiry offset fixed week', 'error');
	return;
      }
    } elseif ($conttype['ValueUnit'] === 'Day') {
      if (chdbperm_update_permit_expiry_offset_from_create
	  ($id, 0, 0, $conttype['FixedPeriod'], 0)) {
	drupal_set_message('Could not update expiry offset fixed day', 'error');
	return;
      }
    } elseif ($conttype['ValueUnit'] === 'Hour') {
      if (chdbperm_update_permit_expiry_offset_from_create
	  ($id, 0, 0, 0, $conttype['FixedPeriod'])) {
	drupal_set_message('Could not update expiry offset fixed hour', 'error');
	return;
      }
    }
  }

  // Expiry based on flat rate
  if ($conttype['RateType'] === 'Flat') {
    if (chpprop_property_demands_permit_expiry_by_days($profile)) {
      if (chdbperm_update_permit_expiry_offset_from_create
	  ($id, 0, 0, $expiry_days, 0)) {
	drupal_set_message('Could not update expiry offset flat days', 'error');
	return;
      }
    } elseif (chpprop_property_demands_permit_expiry_select($profile)) {
      $expirytime = chpuser_datetime_usertimezone_to_utc($expiry_select);
      if (chdbperm_update_permit_expiry_time
	  ($id, $expirytime->format("Y-m-d H:i:s"))) {
	drupal_set_message('Could not update expiry time flat select', 'error');
	return;
      }
    } else {
      if (chdbperm_update_permit_expiry_offset_from_create
	  ($id, 0, 0, 1, 0)) {
	drupal_set_message('Could not update expiry offset flat days', 'error');
	return;
      }
    }
  }

  //  Expiry based on variable rate
  if ($conttype['RateType'] === 'Linear') {
    if (chpprop_property_demands_permit_expiry_by_days($profile)) {
      if (chdbperm_update_permit_expiry_offset_from_create
	  ($id, 0, 0, $expiry_days, 0)) {
	drupal_set_message('Could not update expiry offset rate days', 'error');
	return;
      }
    } elseif (chpprop_property_demands_permit_expiry_select($profile)) {
      $expirytime = chpuser_datetime_usertimezone_to_utc($expiry_select);
      if (chdbperm_update_permit_expiry_time
	  ($id, $expirytime->format("Y-m-d H:i:s"))) {
	drupal_set_message('Could not update expiry time rate select', 'error');
	return;
      }
    } else {
      if (chdbperm_update_permit_expiry_offset_from_create
	  ($id, 0, 0, 1, 0)) {
	drupal_set_message('Could not update expiry offset flat days', 'error');
	return;
      }
    }
  }

  return 0;
}



/**********
 ********** Edit permit
 ********** Address: chppermedit
 ********** Access:  'anai chp edit permits'
 *********/



function chpperm_permit_edit_form($form_state, $id) {
  if ($form_state['storage']['confirm_delete']) {
    return confirm_form($form, 'Are you sure?', 'chppermlist',
  			'The permit will be deleted from the system.');
  }

  if (!user_access('anai chp edit permits')) {
    drupal_access_denied();
    exit();
  }

  if (!is_numeric($id)) {
    drupal_access_denied();
    exit();
  }

  global $user;
  $account = user_load(array('uid' => $user->uid));
  $form = array();
  $permit = chdbperm_get_permit_id($id);

  if (empty($permit)) {
    $form['Empty'] = array('#value' => t('Permit to edit not found.'));
    return $form;
  } elseif (!$permit['Active']) {
    $form['Empty'] = array('#value' => t('Permit to edit not active.'));
    return $form;
  }

  drupal_set_title(t('Edit permit - LPN', array('LPN' => $permit['LPN'])));
  ahah_helper_register($form, $form_state);

  $form['ajax'] =
    array('#prefix' => '<div id="ajax-wrapper">',
	  '#suffix' => '</div>',
	  '#tree' => TRUE);

  $company_id = $permit['CompanyId'];
  $property_id = $permit['PropertyId'];
  $lot_id = $permit['LotId'];

  if (!empty($permit['GroupId'])) {
    $groupdef = chdbperm_get_groupdef($company_id, $permit['GroupId']);
  } elseif (!empty($permit['MemberId'])) {
    $groupdef = chdbperm_get_groupdef($company_id, $permit['MemberId']);
  } else {
    $groupdef = NULL;
  }

  if (!empty($groupdef)) {
    $client_id = $groupdef['ClientId'];
  } else {
    $client_id = NULL;
  }

  $policy = chdbprop_get_policy($property_id, $lot_id);
  $profile_id = $policy['ProfileId'];
  $profile = chdbprop_get_profile($profile_id);

  $enforcement_id = $policy['EnforcementId'];
  if (!empty($enforcement_id)) {
    $enforcement = chdbprop_get_enforcement($enforcement_id);
  } else {
    $enforcement = array();
  }

  $equipment_id = $policy['EquipmentId'];
  if (!empty($equipment_id)) {
    $equipment = chdbprop_get_equipment($equipment_id);
  } else {
    $equipment = array();
  }

  /* $settings = array(); */
  /* $settings['tag'] = 'ajax'; */
  /* $settings['show_companies'] = TRUE; */
  /* $settings['show_clients'] = TRUE; */
  /* $settings['show_properties'] = TRUE; */
  /* $settings['show_lots'] = TRUE; */
  /* $settings['default']['CompanyId'] = $permit['CompanyId']; */
  /* $settings['default']['ClientId'] = $permit['ClientId']; */
  /* $settings['default']['PropertyId'] = $permit['PropertyId']; */
  /* $settings['default']['LotId'] = $permit['LotId']; */
  /* if (chpprop_produce_header(&$form, &$form_state, $settings)) { */
  /*   return $form; */
  /* } */
  /* $company_id = $form_state['storage']['ajax']['CompanyId']; */
  /* $client_id = $form_state['storage']['ajax']['ClientId']; */
  /* $property_id = $form_state['storage']['ajax']['PropertyId']; */
  /* $lot_id = $form_state['storage']['ajax']['LotId']; */

  /* $policy = $form_state['storage']['ajax']['Lots'][$property_id][$lot_id]; */
  /* $profile_id = $policy['data']['ProfileId']; */
  /* $profile = chdbprop_get_profile($profile_id); */

  /* $enforcement_id = $policy['data']['EnforcementId']; */
  /* if (!empty($enforcement_id)) { */
  /*   $enforcement = chdbprop_get_enforcement($enforcement_id); */
  /* } else { */
  /*   $enforcement = array(); */
  /* } */

  /* $equipment_id = $policy['data']['EquipmentId']; */
  /* if (!empty($equipment_id)) { */
  /*   $equipment = chdbprop_get_equipment($equipment_id); */
  /* } else { */
  /*   $equipment = array(); */
  /* } */

  // Save id for validation and submit retrieval
  $form['id'] = array('#type' => 'hidden', '#value' => $id);

  $group_options = array();
  $member_options = array();
  $group_props = chpperm_retrieve_group_props($user->uid, $company_id, $client_id);
  if (isset($group_props[$property_id])) {
    foreach ($group_props[$property_id] as $key => $values1) {
      if ($key !== $lot_id and $key !== 'ANY') {
	continue;
      }
      foreach ($values1 as $group_id => $values2) {
	if (isset($group_options[$group_id]) or isset($member_options[$group_id])) {
	  continue;
	}
	$groupdef = chdbperm_get_groupdef($company_id, $group_id);
	if ($groupdef['Single']) {
	  $member_options[$group_id] = decode_entities($groupdef['Alias']);
	} else {
	  $group_options[$group_id] = decode_entities($groupdef['Alias']);
	}
      }
    }
  }
  $group_props = NULL;

  // Build permit type selection
  $policy_options = array();
  if ($profile['ShortPolicy']) {
    $policy_options['ShortPolicy'] = $profile['ShortPolicyAlias'];
  }
  if ($profile['LongPolicy']) {
    $policy_options['LongPolicy'] = $profile['LongPolicyAlias'];
  }
  if ($profile['LongShortPolicy']) {
    $policy_options['ShortPolicy'] = $profile['ShortPolicyAlias'];
    $policy_options['LongPolicy'] = $profile['LongPolicyAlias'];
  }
  /* if (chpprop_property_allows_valet($profile)) { */
  /*   $policy_options['ValetPolicy'] = t('Valet'); */
  /* } */

  if (empty($policy_options)) {
    $form['ajax']['empty'] =
      array('#value' => '<p>'.t('Property don\'t allow any type of permits.').'<p>');
    $form['ajax']['cancel'] =
      array('#type' => 'image_button',
	    '#src' => drupal_get_path('module', 'anai').'/cancel.png',
	    '#submit' => array('chpperm_permit_edit_form_submit_cancel'));
    return $form;
  }

  // Layout permit registration selection
  $options = array();
  if (chpprop_property_allow_regular_permit($profile) or
      chpprop_property_allow_container($profile))  {
    $options['Transient'] = chpperm_registration_name('Transient');
  }
  if (chpprop_property_allow_hotel_permit($profile))  {
    $options['Hotel'] = chpperm_registration_name('Hotel');
  }
  if (chpprop_property_allow_loading_dock($profile))  {
    $options['Dock'] = chpperm_registration_name('Dock');
  }
  if (!empty($group_options)) {
    $options['Group'] = chpperm_registration_name('Group');
  }
  if (!empty($member_options)) {
    $options['Member'] = chpperm_registration_name('Member');
  }
  if ((isset($equipment['PAD']) and $equipment['PAD']) or
      (isset($equipment['LPR']) and $equipment['LPR'])) {
    // TBD to decide if this is a place to include validation
    //$options['Validation'] = chpperm_registration_name('Validation');
  }

  if (isset($form_state['storage']['ajax']['Registration']) and
      !in_array($form_state['storage']['ajax']['Registration'],
		array_keys($options))) {
    unset($form_state['storage']['ajax']['Registration']);
  }
  if (!isset($form_state['storage']['ajax']['Registration'])) {
    if (in_array($permit['PermitClass'], array_keys($options))) {
      $form_state['storage']['ajax']['Registration'] = $permit['PermitClass'];
    } else {
      $form_state['storage']['ajax']['Registration'] = key($options);
    }
  }
  if (1 < count($options)) {
    $form['ajax']['Registration'] =
      array('#type' => 'radios',
	    '#title' => t('Permit registration category'),
	    '#options' => $options,
	    '#default_value' => $form_state['storage']['ajax']['Registration'],
	    '#ahah' => array('event' => 'change',
			     'path' => ahah_helper_path(array('ajax')),
			     'wrapper' => 'ajax-wrapper'));

    if ($form_state['storage']['ajax']['Registration'] === 'Group') {
      if (!isset($form_state['storage']['ajax']['GroupId'])) {
	if (in_array($permit['GroupId'], array_keys($group_options))) {
	  $form_state['storage']['ajax']['GroupId'] = $permit['GroupId'];
	} else {
	  $form_state['storage']['ajax']['GroupId'] = key($group_options);
	}
      }
      $form['ajax']['GroupId'] =
	array('#type' => 'select',
	      '#title' => t('Group'),
	      '#options' => $group_options,
	      '#default_value' => $form_state['storage']['ajax']['GroupId'],
	      '#ahah' => array('event' => 'change',
			       'path' => ahah_helper_path(array('ajax')),
			       'wrapper' => 'ajax-wrapper'));

      $group_id = $form_state['storage']['ajax']['GroupId'];

      $header = array(t('Created'), t('By'), t('Id'), t('Note'));
      $row = array();
      $notes = array();
      foreach (chdbperm_get_groupnotes($company_id, $client_id, $group_id) as $note) {
	if (!$note['Fragment']) {
	  $notes[$note['NoteId']]['master'] = $note;
	  $notes[$note['NoteId']]['fragments'] = array();
	} else {
	  $notes[$note['NoteId']]['fragments'][] = $note;
	}
      }
      if (!empty($notes)) {
	foreach ($notes as $note_id => $entry) {
	  $created = chpuser_datetime_utc_to_usertimezone($entry['master']['CreateTime']);
	  $account = user_load(array('uid' => $entry['master']['CreatorUID']));
	  $numfrags = count($entry['fragments']);
	  $row[] = array(array('data' => $created->format("M j,y H:i"),
			       'rowspan' => 1 + $numfrags),
			 array('data' => $account->name,
			       'rowspan' => 1 + $numfrags),
			 array('data' => $entry['master']['NoteId'],
			       'rowspan' => 1 + $numfrags),
			 nl2br(decode_entities($entry['master']['Note'])));
	  foreach ($entry['fragments'] as $fragment) {
	    $created = chpuser_datetime_utc_to_usertimezone($fragment['CreateTime']);
	    $account = user_load(array('uid' => $fragment['CreatorUID']));
	    $row[] = array('<b>Added '.$created->format("M j,y H:i").' by '.$account->name.':</b><br>'.
			   nl2br(decode_entities($fragment['Note'])));
	  }
	}
      }
      if (!empty($notes)) {
	$form['ajax']['GroupNotes'] = array('#type' => 'fieldset', '#title' => t('Group notes'));
	$form['ajax']['GroupNotes']['list'] = array('#value' => theme('table', $header, $row));
      }
    }

    if ($form_state['storage']['ajax']['Registration'] === 'Member') {
      if (!isset($form_state['storage']['ajax']['MemberId'])) {
	if (in_array($permit['MemberId'], array_keys($member_options))) {
	  $form_state['storage']['ajax']['MemberId'] = $permit['MemberId'];
	} else {
	  $form_state['storage']['ajax']['MemberId'] = key($member_options);
	}
      }
      $form['ajax']['MemberId'] =
	array('#type' => 'select',
	      '#title' => t('Individual'),
	      '#options' => $member_options,
	      '#default_value' => $form_state['storage']['ajax']['MemberId'],
	      '#ahah' => array('event' => 'change',
			       'path' => ahah_helper_path(array('ajax')),
			       'wrapper' => 'ajax-wrapper'));

      $member_id = $form_state['storage']['ajax']['MemberId'];

      $header = array(t('Created'), t('By'), t('Id'), t('Note'));
      $row = array();
      $notes = array();
      foreach (chdbperm_get_groupnotes($company_id, $client_id, $member_id) as $note) {
	if (!$note['Fragment']) {
	  $notes[$note['NoteId']]['master'] = $note;
	  $notes[$note['NoteId']]['fragments'] = array();
	} else {
	  $notes[$note['NoteId']]['fragments'][] = $note;
	}
      }
      if (!empty($notes)) {
	foreach ($notes as $note_id => $entry) {
	  $created = chpuser_datetime_utc_to_usertimezone($entry['master']['CreateTime']);
	  $account = user_load(array('uid' => $entry['master']['CreatorUID']));
	  $numfrags = count($entry['fragments']);
	  $row[] = array(array('data' => $created->format("M j,y H:i"),
			       'rowspan' => 1 + $numfrags),
			 array('data' => $account->name,
			       'rowspan' => 1 + $numfrags),
			 array('data' => $entry['master']['NoteId'],
			       'rowspan' => 1 + $numfrags),
			 nl2br(decode_entities($entry['master']['Note'])));
	  foreach ($entry['fragments'] as $fragment) {
	    $created = chpuser_datetime_utc_to_usertimezone($fragment['CreateTime']);
	    $account = user_load(array('uid' => $fragment['CreatorUID']));
	    $row[] = array('<b>Added '.$created->format("M j,y H:i").' by '.$account->name.':</b><br>'.
			   nl2br(decode_entities($fragment['Note'])));
	  }
	}
      }
      if (!empty($notes)) {
	$form['ajax']['GroupNotes'] = array('#type' => 'fieldset', '#title' => t('Group notes'));
	$form['ajax']['GroupNotes']['list'] = array('#value' => theme('table', $header, $row));
      }
    }

    if (strpos($form_state['clicked_button']['#id'], 'nextfsPre') !== FALSE) {
      $form_state['storage']['ajax']['Wizard'] = 1;
    }
  } elseif (1 == count($options)) {
    $form['ajax']['Registration'] =
      array('#type' => 'hidden',
	    '#value' => $form_state['storage']['ajax']['Registration']);
  } else {
    $form['ajax']['empty'] =
      array('#value' => '<p>'.t('Lot is not configured to allow any permit, impossible to continue.').'<p>');
    $form['ajax']['cancel'] =
      array('#type' => 'image_button',
	    '#src' => drupal_get_path('module', 'anai').'/cancel.png',
	    '#submit' => array('chpperm_permit_edit_form_submit_cancel'));
    return $form;
  }

  // Layout person
  $settings = array();
  $settings['tag'] = 'ajax';
  $settings['subtag'] = 'person';
  $settings['subframe'] = TRUE;
  $settings['subframetitle'] = t('Permit owner');
  $settings['subframecollapsible'] = TRUE;
  $settings['subframecollapsed'] = FALSE;
  $settings['option']['skipemailnotification'] = TRUE;
  $settings['option']['skiprole'] = TRUE;
  $settings['option']['skipdepartment'] = TRUE;
  $settings['option']['skiptitle'] = TRUE;
  $settings['option']['skiplogin'] = TRUE;
  if ($form_state['storage']['ajax']['Registration'] === 'Transient') {
    $settings['default']['NotRequired'] = FALSE;
  } else {
    $settings['option']['skipnotrequired'] = TRUE;
  }
  if (!empty($permit['PrenameId'])) {
    $settings['default']['PrenameId'] = $permit['PrenameId'];
  }
  if (!empty($permit['FirstName'])) {
    $settings['default']['FirstName'] = decode_entities($permit['FirstName']);
  }
  if (!empty($permit['MiddleName'])){
    $settings['default']['MiddleName'] = decode_entities($permit['MiddleName']);
  }
  if (!empty($permit['LastName'])) {
    $settings['default']['LastName'] = decode_entities($permit['LastName']);
  }
  if (!empty($permit['SufnameId'])) {
    $settings['default']['SufnameId'] = $permit['SufnameId'];
  }
  if (!empty($permit['Street'])) {
    $settings['default']['Street'] = decode_entities($permit['Street']);
  }
  if (!empty($permit['City'])) {
    $settings['default']['City'] = decode_entities($permit['City']);
  }
  if (!empty($permit['PostalCode'])) {
    $settings['default']['PostalCode'] = decode_entities($permit['PostalCode']);
  }
  if (!empty($permit['Province'])) {
    $settings['default']['Province'] = $permit['Province'];
  }
  if (!empty($permit['Country'])) {
    $settings['default']['Country'] = $permit['Country'];
  }
  if (!empty($permit['Phone'])) {
    $settings['default']['Phone'] = decode_entities($permit['Phone']);
  }
  if (!empty($permit['Email'])) {
    $settings['default']['Email'] = decode_entities($permit['Email']);
  }
  if ($form_state['storage']['ajax']['Registration'] !== 'Hotel') {
    chpprop_produce_person($form, $form_state, $settings);
  }

  $form['ajax']['permit'] =
    array('#type' => 'fieldset',
	  '#title' => t('Permit type'));
  if ($form_state['storage']['ajax']['Registration'] !== 'Hotel') {
    $form['ajax']['permit']['#collapsible'] = TRUE;
    $form['ajax']['permit']['#collapsed'] = FALSE;
  }

  // Layout permit type selection
  if (!isset($form_state['storage']['ajax']['permit']['PermitPolicy'])) {
    if ($permit['Long']) {
      $form_state['storage']['ajax']['permit']['PermitPolicy'] = 'LongPolicy';
    } elseif ($permit['Short']) {
      $form_state['storage']['ajax']['permit']['PermitPolicy'] = 'ShortPolicy';
    } elseif ($permit['Valet']) {
      $form_state['storage']['ajax']['permit']['PermitPolicy'] = 'ValetPolicy';
    } else {
      $form['ajax']['permit']['PermitPolicy'] =
	array('#value' => '<p><p>'.t('Permit not matching property settings!'));
      return $form;
    }
  }
  if (count($policy_options) > 1) {
    $form['ajax']['permit']['PermitPolicy'] =
      array('#type' => 'select',
	    '#title' => t('Permit type'),
	    '#options' => $policy_options,
	    '#default_value' => $form_state['storage']['ajax']['permit']['PermitPolicy'],
	    '#ahah' => array('event' => 'change',
			     'path' => ahah_helper_path(array('ajax')),
			     'wrapper' => 'ajax-wrapper'));
  } else {
    $form['ajax']['permit']['PermitPolicy'] =
      array('#type' => 'hidden',
	    '#value' => $form_state['storage']['ajax']['permit']['PermitPolicy']);
  }

  $permit_policy = $form_state['storage']['ajax']['permit']['PermitPolicy'];

  // Layout suite
  if (!isset($form_state['storage']['ajax']['permit']['SuiteId'])) {
    $form_state['storage']['ajax']['permit']['SuiteId'] = decode_entities($permit['SuiteId']);
  }
  $form['ajax']['permit']['SuiteId'] =
    array('#type' => 'textfield',
	  '#title' => t('Suite'),
	  '#maxlength' => 30,
	  '#default_value' => $form_state['storage']['ajax']['permit']['SuiteId'],
	  '#description' => t('Suite, apartment, room, id, unit, etc.'));

  // Layout parking level and stall
  if (($permit_policy === 'LongPolicy' and chpprop_long_managed_stalls($profile)) or
      ($permit_policy === 'ShortPolicy' and chpprop_short_managed_stalls($profile)) or
      ($permit_policy === 'ValetPolicy' and chpprop_valet_managed_stalls($profile))) {

    $level_options = array();
    $stallevels = chdbprop_get_stallevels
      ($property_id, $lot_id,
       ($permit_policy === 'LongPolicy'),
       ($permit_policy === 'ShortPolicy'),
       ($permit_policy === 'ValetPolicy'));
    foreach ($stallevels as $level) {
      $level_options[$level['LevelId']] = $level['Level'].': '.decode_entities($level['Alias']);
    }
    $stallevels = NULL;

    if (empty($level_options)) {
      $form['ajax']['permit']['error'] =
	array('#value' => t('Parking levels yet to be configured, impossible to continue.').'<p>');
      $form['ajax']['permit']['cancel'] =
	array('#type' => 'image_button',
	      '#src' => drupal_get_path('module', 'anai').'/cancel.png',
	      '#submit' => array('chpperm_permit_add_form_submit_cancel'));
      return $form;
    }

    if (isset($form_state['storage']['ajax']['permit']['LevelId']) and
	!in_array($form_state['storage']['ajax']['permit']['LevelId'],
		  array_keys($level_options))) {
      unset($form_state['storage']['ajax']['permit']['LevelId']);
    }
    if (!isset($form_state['storage']['ajax']['permit']['LevelId'])) {
      if (in_array($permit['LevelId'], array_keys($level_options))) {
	$form_state['storage']['ajax']['permit']['LevelId'] = $permit['LevelId'];
      } else {
	
      }$form_state['storage']['ajax']['permit']['LevelId'] = key($level_options);
    }
    $form['ajax']['permit']['LevelId'] =
      array('#type' => 'select',
	    '#title' => t('Parking level'),
	    '#options' => $level_options,
	    '#default_value' => $form_state['storage']['ajax']['permit']['LevelId'],
	    '#ahah' => array('event' => 'change',
			     'path' => ahah_helper_path(array('ajax')),
			     'wrapper' => 'ajax-wrapper'));

    // Create stall options
    $stall_options = chpperm_create_stall_options
      ($company_id, $property_id, $lot_id,
       $form_state['storage']['ajax']['permit']['LevelId']);

    if (empty($stall_options)) {
      $form['ajax']['permit']['error'] =
	array('#value' => t('Parking stall yet to be configured, impossible to continue.').'<p>');
      $form['ajax']['permit']['cancel'] =
	array('#type' => 'image_button',
	      '#src' => drupal_get_path('module', 'anai').'/cancel.png',
	      '#submit' => array('chpperm_permit_add_form_submit_cancel'));
      return $form;
    }

    if (isset($form_state['storage']['ajax']['permit']['StallId']) and
	!in_array($form_state['storage']['ajax']['permit']['StallId'],
		  array_keys($stall_options))) {
      unset($form_state['storage']['ajax']['permit']['StallId']);
    }
    if (!isset($form_state['storage']['ajax']['permit']['StallId'])) {
      if (in_array($permit['StallId'], array_keys($stall_options))) {
	$form_state['storage']['ajax']['permit']['StallId'] = $permit['StallId'];
	$stall_options[$permit['StallId']] = ltrim($stall_options[$permit['StallId']], t('Busy: '));
	$stall_options[$permit['StallId']] = t('* ').$stall_options[$permit['StallId']];
      } else {
	$form_state['storage']['ajax']['permit']['StallId'] = key($stall_options);
      }
    }
    $form['ajax']['permit']['StallId'] =
      array('#type' => 'select',
	    '#title' => t('Stall'),
	    '#options' => $stall_options,
	    '#default_value' => $form_state['storage']['ajax']['permit']['StallId'],
	    '#ahah' => array('event' => 'change',
			     'path' => ahah_helper_path(array('ajax')),
			     'wrapper' => 'ajax-wrapper'));

    $notes = array();
    foreach (chdbprop_get_stallnotes
	     ($property_id, $lot_id,
	      $form_state['storage']['ajax']['permit']['LevelId'],
	      $form_state['storage']['ajax']['permit']['StallId']) as $note) {
      if (!$note['Fragment']) {
	$notes[$note['NoteId']]['master'] = $note;
	$notes[$note['NoteId']]['fragments'] = array();
      } else {
	$notes[$note['NoteId']]['fragments'][] = $note;
      }
    }

    if (!empty($notes)) {
      $header = array(t('Created'), t('By'), t('Id'), t('Note'));
      $row = array();
      foreach ($notes as $note_id => $entry) {
	$created = chpuser_datetime_utc_to_usertimezone($entry['master']['CreateTime']);
	$account = user_load(array('uid' => $entry['master']['CreatorUID']));
	$numfrags = count($entry['fragments']);
	$row[] = array(array('data' => $created->format("M j,y H:i"),
			     'rowspan' => 1 + $numfrags),
		       array('data' => $account->name,
			     'rowspan' => 1 + $numfrags),
		       array('data' => $entry['master']['NoteId'],
			     'rowspan' => 1 + $numfrags),
		       nl2br(decode_entities($entry['master']['Note'])));
	foreach ($entry['fragments'] as $fragment) {
	  $created = chpuser_datetime_utc_to_usertimezone($fragment['CreateTime']);
	  $account = user_load(array('uid' => $fragment['CreatorUID']));
	  $row[] = array('<b>Added '.$created->format("M j,y H:i").' by '.$account->name.':</b><br>'.
			 nl2br(decode_entities($fragment['Note'])));
	}
      }

      $form['ajax']['permit']['StallNotes'] =
	array('#type' => 'fieldset',
	      '#title' => t('Stall notes'));
      $form['ajax']['permit']['StallNotes']['List'] = array('#value' => theme('table', $header, $row));
    }
  }

  if ($form_state['storage']['ajax']['Registration'] === 'Group') {
    $group_id = $form_state['storage']['ajax']['GroupId'];
    $groupdef = chdbperm_get_groupdef($company_id, $group_id);
    //anai_dbg($groupdef, '$groupdef');
  } else {
    $group_id = NULL;
    $groupdef = NULL;
  }

  if ($form_state['storage']['ajax']['Registration'] === 'Member') {
    $member_id = $form_state['storage']['ajax']['MemberId'];
  } else {
    $member_id = NULL;
  }

  // Retrieve the permits from current context
  $permits = chdbperm_get_permits
    ($company_id,
     $form_state['storage']['ajax']['Registration'] === 'Group', $group_id,
     TRUE, $property_id,
     TRUE, $lot_id,
     FALSE, NULL, // LPN
     TRUE, TRUE, // Active
     TRUE, FALSE, // Suspended
     $permit_policy === 'LongPolicy', TRUE,
     $permit_policy === 'ShortPolicy', TRUE,
     $permit_policy === 'ValetPolicy', TRUE);
  //anai_dbg($permits, '$permits');

  // Determine if room for complementary
  $complementary_allowed = FALSE;
  $complementary_used = 0;
  foreach ($permits as $entry) {
    if (!$entry['Complementary']) {
      continue;
    }
    $complementary_used++;
  }
  if ($form_state['storage']['ajax']['Registration'] === 'Group' and
      $complementary_used < $groupdef['Complementary']) {
    $complementary_allowed = TRUE;
  }

  // Build permit selection
  $options = array();
  // Starting with regular transient permits if used
  if ($form_state['storage']['ajax']['Registration'] === 'Transient' and
      chpprop_property_allow_regular_permit($profile)) {
    if ($permit_policy === 'ShortPolicy') {
      $tag = t('Regular transient permit');
      if (!empty($profile['RegularComment'])) {
	$tag .= ' ['.decode_entities($profile['RegularComment']).']';
      }
      $options['Regular'] = $tag;
    } elseif ($permit_policy === 'LongPolicy') {
      $options['Regular'] = t('Regular transient permit');
    }
  }
  // Regular hotel permits if used
  if ($form_state['storage']['ajax']['Registration'] === 'Hotel' and
      chpprop_property_allow_hotel_permit($profile)) {
    if ($permit_policy === 'ShortPolicy') {
      $tag = t('Regular hotel permit');
      if (!empty($profile['RegularComment'])) {
	$tag .= ' ['.decode_entities($profile['RegularComment']).']';
      }
      $options['Hotel'] = $tag;
    } elseif ($permit_policy === 'LongPolicy') {
      $options['Hotel'] = t('Regular hotel permit');
    }
  }
  // Regular validation permits if used
  if ($form_state['storage']['ajax']['Registration'] === 'Validation' and
      ((isset($equipment['PAD']) and $equipment['PAD']) or
       (isset($equipment['LPR']) and $equipment['LPR']))) {
    $options['Validation'] = t('Regular validation permit');
  }

  // Adding container permits
  if (chpprop_property_allow_container($profile)) {
    $containers = chpperm_retrieve_containers($user->uid, $company_id, $property_id, $lot_id);
    if (!empty($containers)) {
      foreach ($containers as $container_id => $container) {
	$conttypes = chpperm_retrieve_container_types($user->uid, $company_id, $container_id);
	if (!empty($conttypes)) {
	  foreach ($conttypes as $type_id => $conttype) {
	    // Policy filtering
	    if ($conttype['data']['Short'] and $permit_policy !== 'ShortPolicy') {
	      // Limited to short term lots only
	      continue;
	    }
	    if ($conttype['data']['Long'] and $permit_policy !== 'LongPolicy') {
	      // Limited to long term lots only
	      continue;
	    }
	    if ($conttype['data']['Valet'] and $permit_policy !== 'ValetPolicy') {
	      // Limited to valet lots only
	      continue;
	    }
	    // Context filtering
	    if ($form_state['storage']['ajax']['Registration'] === 'Transient' and
		!$conttype['data']['Transients']) {
	      continue;
	    } elseif ($form_state['storage']['ajax']['Registration'] === 'Group' and
		      !$conttype['data']['Groups']) {
	      continue;
	    } elseif ($form_state['storage']['ajax']['Registration'] === 'Member' and
		      !$conttype['data']['Members']) {
	      continue;
	    }
	    // Type filtering
	    if ($form_state['storage']['ajax']['Registration'] === 'Group' and
		!$complementary_allowed and $conttype['GroupType'] === 'Complementary') {
	      continue;
	    }
	    // Include option when passing the filters
	    $tag =
	      decode_entities($container['data']['Alias']).': '.
	      decode_entities($conttype['data']['Alias']);
	    if (!empty($conttype['data']['Comment'])) {
	      $tag .= ' ['.decode_entities($conttype['data']['Comment']).']';
	    }
	    $options[$container_id.'__'.$type_id] = $tag;
	  }
	}
      }
    }
  }

  if (chpprop_property_allow_container($profile) and empty($options)) {
    $form['ajax']['permit']['error'] =
      array('#value' => t('Containers yet to be configured, impossible to continue.').'<p>');
    $form['ajax']['permit']['cancel'] =
      array('#type' => 'image_button',
	    '#src' => drupal_get_path('module', 'anai').'/cancel.png',
	    '#submit' => array('chpperm_permit_add_form_submit_cancel'));
    return $form;
  } //anai_dbg($options);

  // Layout permit selection
  if (isset($form_state['storage']['ajax']['permit']['PermitType']) and
      !in_array($form_state['storage']['ajax']['permit']['PermitType'],
		array_keys($options))) {
    unset($form_state['storage']['ajax']['permit']['PermitType']);
    // Reset PermitContext when PermitType is out of bounds
    if (isset($form_state['storage']['ajax']['permit']['PermitContext'])) {
      unset($form_state['storage']['ajax']['permit']['PermitContext']);
    }
  }
  if (!isset($form_state['storage']['ajax']['permit']['PermitType'])) {
    // ...reconstruct PermitType assigned to permit
    // ...if no container then check for those not using container
    if (!empty($permit['ContainerId']) and !empty($permit['TypeId']) and
	in_array($permit['ContainerId'].'__'.$permit['TypeId'],
		 array_keys($options))) {
      $form_state['storage']['ajax']['permit']['PermitType'] =
	$permit['ContainerId'].'__'.$permit['TypeId'];
    } elseif ($permit['PermitClass'] === 'Hotel' and
	      in_array('Hotel', array_keys($options))) {
      $form_state['storage']['ajax']['permit']['PermitType'] = 'Hotel';
    } elseif ($permit['PermitClass'] === 'Valet' and
	      in_array('Valet', array_keys($options))) {
      $form_state['storage']['ajax']['permit']['PermitType'] = 'Valet';
    } elseif ($permit['PermitClass'] === 'Validation' and
	      in_array('Validation', array_keys($options))) {
      $form_state['storage']['ajax']['permit']['PermitType'] = 'Validation';
    } else {
      $form_state['storage']['ajax']['permit']['PermitType'] = key($options);
    }
  }
  $form['ajax']['permit']['PermitType'] =
    array('#type' => 'radios',
	  '#title' => t('Permit type'),
	  '#options' => $options,
	  '#default_value' => $form_state['storage']['ajax']['permit']['PermitType'],
	  '#ahah' => array('event' => 'change',
			   'path' => ahah_helper_path(array('ajax')),
			   'wrapper' => 'ajax-wrapper'));

  $permit_type = $form_state['storage']['ajax']['permit']['PermitType'];

  // Layout overnight parking if configured on regular transient permit
  if ($form_state['storage']['ajax']['Registration'] === 'Transient' and
      $permit_policy === 'ShortPolicy' and $permit_type === 'Regular' and
      chpprop_property_allow_overnight_permit($profile)) {
    if (!isset($form_state['storage']['ajax']['permit']['Overnight'])) {
      $form_state['storage']['ajax']['permit']['Overnight'] = $permit['Extended'];
    }
    $form['ajax']['permit']['Overnight'] =
      array('#type' => 'checkbox',
	    '#title' => t('Overnight extension'),
	    '#description' =>
	    t('(Make sure agreement, payment, etc, is in place when selecting this)'),
	    '#default_value' => $form_state['storage']['ajax']['permit']['Overnight'],
	    '#ahah' => array('event' => 'change',
			     'path' => ahah_helper_path(array('ajax')),
			     'wrapper' => 'ajax-wrapper'));
  }

  // Layout shared permit options
  if (chpprop_property_allow_shared_permits($profile) and
      (($form_state['storage']['ajax']['Registration'] === 'Transient') or
       ($form_state['storage']['ajax']['Registration'] === 'Group' and 1 < $groupdef['Shared']))) {
    // List already shared
    $shared = array();
    $singles = 0;
    foreach ($permits as $entry) {
      if (empty($entry['SharedId'])) {
	$singles++;
	continue;
      }
      $shared[$entry['SharedId']][$entry['LPN']] = $entry['LPN'];
    } //anai_dbg($shared, '$shared');

    // Layout permit context
    $options = array();
    $title = t('Permit context');
    // ...decide standalone options
    if ($form_state['storage']['ajax']['Registration'] === 'Transient') {
      $options['Standalone'] = t('Standalone permit');
    } elseif ($form_state['storage']['ajax']['Registration'] === 'Group' and
	      (0 > $groupdef['MaxEntries'] or // Unlimited
	       ($singles + count($shared)) < $groupdef['MaxEntries'])) {
      $options['Standalone'] = t('Standalone permit');
    } else {
      $title = t('Permit context (maximum number of standalone entries reached)');
    }
    // ...decide shared options
    $options['Shared'] = t('Shared permit with another vehicle');
    // ...layout options
    if (!isset($form_state['storage']['ajax']['permit']['PermitContext'])) {
      if (empty($permit['SharedId'])) {
	$form_state['storage']['ajax']['permit']['PermitContext'] = 'Standalone';
      } else {
	$form_state['storage']['ajax']['permit']['PermitContext'] = 'Shared';
      }
    }
    if ($form_state['storage']['ajax']['LPNChanged']) {
      $form_state['storage']['ajax']['permit']['PermitContext'] = 'Standalone';
    }
    $form['ajax']['permit']['PermitContext'] =
      array('#type' => 'radios',
	    '#title' => t('Permit context'),
	    '#options' => $options,
	    '#default_value' => $form_state['storage']['ajax']['permit']['PermitContext'],
	    '#ahah' => array('event' => 'change',
			     'path' => ahah_helper_path(array('ajax')),
			     'wrapper' => 'ajax-wrapper'));

    $permit_context = $form_state['storage']['ajax']['permit']['PermitContext'];

    if ($permit_context === 'Shared' and
	//....either not shared from earlier, or changed between registration categories
	(empty($permit['SharedId']) or
	 ($form_state['storage']['ajax']['Registration'] === 'Group' and empty($permit['GroupId'])) or
	 ($form_state['storage']['ajax']['Registration'] === 'Transient' and !empty($permit['GroupId'])))) {
      // Used to be standalone, now shared
      $options = array();
      foreach ($permits as $entry) {
	if ($form_state['storage']['ajax']['Registration'] === 'Group' and
	    !empty($entry['SharedId']) and
	    count($shared[$entry['SharedId']]) >= $groupdef['Shared']) {
	  continue;
	}
	if ($permit['Id'] === $entry['Id']) {
	  continue;
	}
	$options[$entry['LPN']] = decode_entities($entry['LPN']);
      }
      if (empty($options)) {
	$form['ajax']['permit']['empty'] =
	  array('#value' => '<p>'.t('There are no available License Plate Numbers to share with.').'<p>');
      } else {
	if (!isset($form_state['storage']['ajax']['permit']['PermitLink'])) {
	  $form_state['storage']['ajax']['permit']['PermitLink'] = key($options);
	}
	$form['ajax']['permit']['PermitLink'] =
	  array('#type' => 'select',
		'#title' => t('Available vehicles to share permit with'),
		'#options' => $options,
		'#default_value' => $form_state['storage']['ajax']['permit']['PermitLink']);

      }
    } elseif ($permit_context === 'Shared') {
      // Used to be shared, still shared
      $items = array();
      if (isset($shared[$permit['SharedId']])) {
	foreach ($shared[$permit['SharedId']] as $key => $entry) {
	  if ($key === $permit['LPN']) {
	    continue;
	  }
	  $items[] = $key;
	}
      }
      if (empty($items)) {
      	$form['ajax']['permit']['empty'] =
	  array('#value' => '<p>'.t('There are no License Plate Numbers shared.').'<p>');
      } else {
      	$form['ajax']['permit']['shared'] =
	  array('#value' => theme_item_list($items, t('Shared with:')));
      }
    }

    if ($permit_context === 'Shared') {
      // Layout relationship field
      $options = array();
      $options['Unspecified'] = t('Unspecified');
      $options['Wife'] = t('Wife');
      $options['Husband'] = t('Husband');
      $options['Girlfriend'] = t('Girlfriend');
      $options['Boyfriend'] = t('Boyfriend');
      $options['Relative'] = t('Relative');
      $options['Friend'] = t('Friend');
      $options['Other'] = t('Other');
      if (!isset($form_state['storage']['ajax']['permit']['Role'])) {
	if (in_array($permit['Role'], array_keys($options))) {
	  $form_state['storage']['ajax']['permit']['Role'] = $permit['Role'];
	} else {
	  $form_state['storage']['ajax']['permit']['Role'] = 'Other';
	}
      }
      $form['ajax']['permit']['Role'] =
	array('#type' => 'select',
	      '#title' => t('Relationship to owner of shared permit'),
	      '#options' => $options,
	      '#default_value' => $form_state['storage']['ajax']['permit']['Role'],
	      '#ahah' => array('event' => 'change',
			       'path' => ahah_helper_path(array('ajax')),
			       'wrapper' => 'ajax-wrapper'));

      if ($form_state['storage']['ajax']['permit']['Role'] === 'Other') {
	if (!isset($form_state['storage']['ajax']['permit']['RoleOther'])) {
	  $form_state['storage']['ajax']['permit']['RoleOther'] =
	    decode_entities($permit['Role']);
	}
	$form['ajax']['permit']['RoleOther'] =
	  array('#type' => 'textfield',
		'#title' => t('Other relationship'),
		'#maxlength' => 80,
		'#default_value' => $form_state['storage']['ajax']['permit']['RoleOther']);
      }
    }
  }

  // layout vehicle
  if ($permit_policy === 'ValetPolicy') {
    $form['ajax']['vehicle'] =
      array('#type' => 'fieldset',
	    '#title' => t('Vehicle information'));
    if ($form_state['storage']['ajax']['Registration'] !== 'Hotel') {
      $form['ajax']['vehicle']['#collapsible'] = TRUE;
      $form['ajax']['vehicle']['#collapsed'] = FALSE;
    }

    $valet = array();

    // Layout LPN retrieval from valet
    if (!isset($form_state['storage']['ajax']['vehicle']['LPN'])) {
      $form_state['storage']['ajax']['vehicle']['LPN'] = $permit['LPN'];
      $valet = chdbvalet_get_valet_lpn
	($company_id, $property_id, $lot_id, $permit['LPN']);
    } elseif (strlen($form_state['storage']['ajax']['vehicle']['LPN']) > 0) {
      $form_state['storage']['ajax']['vehicle']['LPN'] =
	strtoupper($form_state['storage']['ajax']['vehicle']['LPN']);
    }
    $form['ajax']['vehicle']['LPN'] =
      array('#type' => 'textfield',
	    '#title' => t('License Plate Number'),
	    '#maxlength' => 10,
	    '#default_value' => $form_state['storage']['ajax']['vehicle']['LPN'],
	    '#description' => '(No spaces)',
	    '#attributes' => array('onBlur'=>'this.value=this.value.toUpperCase()'));

    $form['ajax']['vehicle']['searchvaletbtn'] =
      array('#type' => 'button',
	    '#value' => t('Search valet database'));

    if (strpos($form_state['clicked_button']['#id'], 'searchvaletbtn') !== FALSE and
	!empty($form_state['storage']['ajax']['vehicle']['LPN'])) {

      $valet = chdbvalet_get_valet_lpn
	($company_id, $property_id, $lot_id,
	 $form_state['storage']['ajax']['vehicle']['LPN']);

      $form['ajax']['vehicle']['LPN']['#field_suffix'] =
	theme('image', !empty($valet) ? 'misc/watchdog-ok.png' : 'misc/watchdog-error.png');
    }

    if (!empty($valet)) {
      // Update already initated AHAH storage
      $form_state['storage']['ajax']['vehicle']['Make'] = $valet['Make'];
      $form_state['storage']['ajax']['vehicle']['Model'] = $valet['Model'];
      $form_state['storage']['ajax']['vehicle']['Color'] = $valet['Color'];

      // Save for later
      $form['ajax']['vehicle']['Make'] =
	array('#type' => 'hidden',
	      '#value' => $valet['Make']);
      $form['ajax']['vehicle']['Model'] =
	array('#type' => 'hidden',
	      '#value' => $valet['Model']);
      $form['ajax']['vehicle']['Color'] =
	array('#type' => 'hidden',
	      '#value' => $valet['Color']);

      // Layout static vehicle info
      $settings = array();
      $settings['tag'] = 'ajax';
      //$settings['disabled']['LPN'] = TRUE;
      $settings['disabled']['Make'] = TRUE;
      $settings['disabled']['Model'] = TRUE;
      $settings['disabled']['Color'] = TRUE;
      if (chpprop_produce_vehicle(&$form, &$form_state, $settings)) {
	return $form;
      }
    } elseif (!empty($form_state['storage']['ajax']['vehicle']['LPN'])) {
      $form['ajax']['vehicle']['LPN']['#field_prefix'] =
	t('Not found in valet database.');
    }
  } else {
    $settings = array();
    $settings['tag'] = 'ajax';
    $settings['subtag'] = 'vehicle';
    $settings['subframe'] = TRUE;
    $settings['subframetitle'] = t('Vehicle information');
    if ($form_state['storage']['ajax']['Registration'] !== 'Hotel') {
      $settings['subframecollapsible'] = TRUE;
      $settings['subframecollapsed'] = FALSE;
    }
    $settings['default']['LPN'] = decode_entities($permit['LPN']);
    $settings['default']['Make'] = decode_entities($permit['Make']);
    $settings['default']['Model'] = decode_entities($permit['Model']);
    $settings['default']['Color'] = decode_entities($permit['Color']);
    if (chpprop_produce_vehicle(&$form, &$form_state, $settings)) {
      return $form;
    }
  }

  /***
   * Design note by TBS:
   * For some strange reason, the jQuery date picker is not drawing correctly
   * if the fieldset is default collapsed, meaning an issue for wizards.
   * Workaround is to never build date pickers inside default collapsed filedsets.
   */

  $form['ajax']['timing'] =
    array('#type' => 'fieldset',
	  '#title' => t('Timing'));

  // Javascript date pickers
  drupal_add_js
    ('(function ($) {
          Drupal.behaviors.ANAIchppermitsExpiry=function(context){
      	    $("#edit-ajax-timing-BeginTime:not(.BeginTime-processed)",
              context).addClass("BeginTime-processed")
              .AnyTime_picker({format:"%Y-%m-%d %H:%i:%s",hideInput:true,
                              placement:"inline",askSecond:false,
                              labelTitle:"Begin Date and Time"});
      	    $("#edit-ajax-timing-expiry-select-dateonly:not(.expiry-select-dateonly-processed)",
              context).addClass("expiry-select-dateonly-processed")
              .AnyTime_picker({format:"%Y-%m-%d",hideInput:true,placement:"inline",
                              labelTitle:"Expiry Date"});
      	    $("#edit-ajax-timing-expiry-select:not(.expiry-select-processed)",
              context).addClass("expiry-select-processed")
              .AnyTime_picker({format:"%Y-%m-%d %H:%i:%s",hideInput:true,
                              placement:"inline",askSecond:false,
                              labelTitle:"Expiry Date and Time"});
          };
       }(jQuery));', 'inline');


  // Layout BeginTime
  $begin = chpuser_datetime_utc_to_usertimezone($permit['BeginTime']);
  $now = chpuser_datetime_utc_to_usertimezone('now');
  if (!isset($form_state['storage']['ajax']['timing']['BeginTimeNow'])) {
    if ($begin > $now) {
      $form_state['storage']['ajax']['timing']['BeginTimeNow'] = FALSE;
    } else {
      $form_state['storage']['ajax']['timing']['BeginTimeNow'] = TRUE;
    }
  }
  if ($now > $begin) {
    $title = t('Activate permit immediately (active since TIME)',
	       array('TIME' => $begin->format("D, j M Y H:i")));
  } else {
    $title = t('Activate permit immediately');
  }
  $form['ajax']['timing']['BeginTimeNow'] =
    array('#type' => 'checkbox',
	  '#title' => t('Activate permit immediately'),
	  '#default_value' => $form_state['storage']['ajax']['timing']['BeginTimeNow'],
	  '#ahah' => array('event' => 'change',
			   'path' => ahah_helper_path(array('ajax')),
			   'wrapper' => 'ajax-wrapper'));

  if (!$form_state['storage']['ajax']['timing']['BeginTimeNow']) {
    if (!isset($form_state['storage']['ajax']['timing']['BeginTime'])) {
      $form_state['storage']['ajax']['timing']['BeginTime'] =
	$begin->format("Y-m-d H:i:s");
    }
    $form['ajax']['timing']['BeginTime'] =
      array('#type' => 'textfield',
	    '#default_value' => $form_state['storage']['ajax']['timing']['BeginTime']);
  }

  if ($permit_policy === 'ShortPolicy') {

    if (chpprop_property_demands_permit_expiry_by_days($profile)) {
      // Layout expiry based on days settings if configured
      // Build days options
      $options = array();
      for ($ii = 0; $ii < $profile['ExpireDays']; $ii++) {
	$options[$ii + 1] = sprintf("%02d days", $ii + 1);
      }

      // Layout days
      if (!isset($form_state['storage']['ajax']['timing']['expiry_days'])) {
	$time = chpuser_datetime_utc_to_usertimezone($permit['ExpiryTime']);
	$now = chpuser_datetime_utc_to_usertimezone('now');
	$interval = $now->diff($time);
	$form_state['storage']['ajax']['timing']['expiry_days'] =
	  $interval->days;
	//$permit['RenewUsed'];
      }
      $form['ajax']['timing']['expiry_days'] =
	array('#type' => 'select',
	      '#title' => t('Permit duration'),
	      '#options' => $options,
	      '#default_value' => $form_state['storage']['ajax']['timing']['expiry_days'],
	      '#ahah' => array('event' => 'change',
			       'path' => ahah_helper_path(array('ajax')),
			       'wrapper' => 'ajax-wrapper'));

    } elseif (chpprop_property_demands_permit_expiry_select($profile)) {

      // Layout expiry date picker for regular and hotel permits
      //if ($permit_type === 'Regular' or $permit_type === 'Hotel' or $permit_type === 'Validation') {
      if ($permit_type === 'Regular') {
	if (!isset($form_state['storage']['ajax']['timing']['expiry_select_dateonly'])) {
	  $time = chpuser_datetime_utc_to_usertimezone($permit['ExpiryTime']);
	  if ($permit['Extended']) {
	    $time->modify('-1 day');
	  }
	  $form_state['storage']['ajax']['timing']['expiry_select_dateonly'] =
	    $time->format("Y-m-d");
	}
	$form['ajax']['timing']['expiry_select_dateonly'] =
	  array('#type' => 'textfield',
		'#default_value' =>
		$form_state['storage']['ajax']['timing']['expiry_select_dateonly']);
	// Normalize a timetag
	$timetag = $form_state['storage']['ajax']['timing']['expiry_select_dateonly'];
	// Add HH:MM:SS
	$now = chpuser_datetime_utc_to_usertimezone('now');
	$timetag .= $now->format(' H:i:s');
      } else {
	// Layout expiry date picker for non-regular permit
	if (!isset($form_state['storage']['ajax']['timing']['expiry_select'])) {
	  $time = chpuser_datetime_utc_to_usertimezone($permit['ExpiryTime']);
	  $form_state['storage']['ajax']['timing']['expiry_select'] =
	    $time->format("Y-m-d H:i:s");
	}
	$form['ajax']['timing']['expiry_select'] =
	  array('#type' => 'textfield',
		'#default_value' => $form_state['storage']['ajax']['timing']['expiry_select']);
	// Normalize a timetag
	$timetag = $form_state['storage']['ajax']['timing']['expiry_select'];
      }
    }
  }

  if ($permit_policy === 'ValetPolicy') {
    // Layout expiry date picker
    if (!isset($form_state['storage']['ajax']['timing']['expiry_select'])) {
      $time = chpuser_datetime_utc_to_usertimezone($permit['ExpiryTime']);
      $form_state['storage']['ajax']['timing']['expiry_select'] =
	$time->format("Y-m-d H:i:s");
    }
    $form['ajax']['timing']['expiry_select'] =
      array('#type' => 'textfield',
	    '#default_value' => $form_state['storage']['ajax']['timing']['expiry_select']);
  }

  if ($form_state['storage']['ajax']['Registration'] === 'Transient' and
      $permit_policy === 'ShortPolicy') {
    // Layout cost and info
    $form['ajax']['cost'] =
      array('#type' => 'fieldset',
	    '#title' => t('Calculated cost'));

    $form['ajax']['cost']['updatecostbtn'] =
      array('#type' => 'button',
	    '#value' => t('Update'));

    if (strpos($form_state['clicked_button']['#id'], 'updatecostbtn') !== FALSE) {
    }

    if ($permit_type === 'Regular') {
      $tmp = chpperm_calculate_cost
	($company_id,
	 $timetag,
	 $form_state['storage']['ajax']['timing']['expiry_days'],
	 $profile,
	 $form_state['storage']['ajax']['permit']['Overnight']);
    } else {
      $container_id = substr($permit_type, 0, strpos($permit_type, '__'));
      $type_id = substr($permit_type, strlen($container_id) + strlen('__'));
      $tmp = chpperm_calculate_cost
	($company_id,
	 $timetag,
	 $form_state['storage']['ajax']['timing']['expiry_days'],
	 $profile,
	 $form_state['storage']['ajax']['permit']['Overnight'],
	 TRUE,
	 $container_id,
	 $type_id);
    }

    $tmp = unserialize($tmp);
    $cost = $tmp['Cost'];
    $info = $tmp['Info'];

    $form['ajax']['cost']['info'] =
      array('#value' => '<center>'.$info.'<br><h2>'.$cost.'</h2></center>');
    $form['ajax']['Cost'] =
      array('#type' => 'hidden',
	    '#value' => $cost);
  }

  $form['OldLPN'] = array('#type' => 'hidden', '#value' => $permit['LPN']);

  $form['save'] =
    array('#type' => 'image_button',
	  '#src' => drupal_get_path('module', 'anai').'/save.png',
	  '#validate' => array('chpperm_permit_add_form_validate_save'),
	  '#submit' => array('chpperm_permit_edit_form_submit_save'));

  $form['back'] =
    array('#type' => 'image_button',
	  '#src' => drupal_get_path('module', 'anai').'/cancel.png',
	  '#submit' => array('chpperm_permit_edit_form_submit_cancel'));

  if (user_access('anai chp delete permits')) {
    $form['delete'] =
      array('#type' => 'image_button',
	    '#src' => drupal_get_path('module', 'anai').'/delete.png',
   	    '#submit' => array('chpperm_permit_edit_form_submit_delete'));
  }

  return $form;
}

function chpperm_permit_edit_form_submit_cancel($form, &$form_state) {
  unset($form_state['storage']);
  $form_state['redirect'] = 'chppermlist';
}

function chpperm_permit_edit_form_submit_delete($form, &$form_state) {
  $form_state['storage']['id'] = $form_state['values']['id'];
  $form_state['storage']['confirm_delete'] = TRUE;
}

function chpperm_permit_edit_form_submit_save($form, &$form_state) {
  global $user;
  $id = $form_state['values']['id']; //drupal_set_message('Id:'.$id);
  $permit = chdbperm_get_permit_id($id);

  $company_id = $permit['CompanyId'];
  $property_id = $permit['PropertyId'];
  $lot_id = $permit['LotId'];

  $policy = chdbprop_get_policy($property_id, $lot_id);
  $profile_id = $policy['ProfileId'];
  $profile = chdbprop_get_profile($profile_id);

  $lpn = check_plain($form_state['values']['ajax']['vehicle']['LPN']);
  $make = check_plain($form_state['values']['ajax']['vehicle']['Make']);
  $model = check_plain($form_state['values']['ajax']['vehicle']['Model']);
  $color = check_plain($form_state['values']['ajax']['vehicle']['Color']);

  $permit_policy = $form_state['values']['ajax']['permit']['PermitPolicy'];
  $permit_type = $form_state['values']['ajax']['permit']['PermitType'];

  // PermitPolicy is lot policy, e.i. short, long, valet
  $permit_policy = $form_state['values']['ajax']['permit']['PermitPolicy'];

  // PermitType is Regular, Hotel, Validation, or CONT__TYPE
  $permit_type = $form_state['values']['ajax']['permit']['PermitType'];

  // Registration is Transient, Group, Member, Hotel, Dock, or Validation
  $permit_class = $form_state['values']['ajax']['Registration'];

  $expiry_date_only = FALSE;
  $container_permit = FALSE;
  $complementary = FALSE;
  $container_id = NULL;
  $type_id = NULL;
  $cost = '0.00';

  if ($permit_policy === 'ShortPolicy') {
    if ($permit_type === 'Regular') {
      $expiry_date_only = TRUE;
      $cost = $form_state['values']['ajax']['Cost'];
    }
    $container_id = substr($permit_type, 0, strpos($permit_type, '__'));
    if (empty($container_id)) {
      // ...not a container
      $container_id = NULL;
    } else {
      // ...container
      $container_permit = TRUE;
      $type_id = substr($permit_type, strlen($container_id) + strlen('__'));
      $conttype = chdbperm_get_conttype($company_id, $container_id, $type_id);
      $cost = $conttype['UnitValue'];
      if ($conttype['GroupType'] === 'Complementary') {
	$complementary = TRUE;
      }
    }
  } elseif ($permit_policy === 'LongPolicy') {
    $container_id = substr($permit_type, 0, strpos($permit_type, '__'));
    if (empty($container_id)) {
      // ...not a container
      $container_id = NULL;
    } else {
      // ...container
      $container_permit = TRUE;
      $type_id = substr($permit_type, strlen($container_id) + strlen('__'));
      $conttype = chdbperm_get_conttype($company_id, $container_id, $type_id);
      $cost = $conttype['UnitValue'];
      if ($conttype['GroupType'] === 'Complementary') {
	$complementary = TRUE;
      }
    }
  } elseif ($permit_policy === 'ValetPolicy') {
    $permit_class = 'Valet';
  }

  if (isset($form_state['values']['ajax']['timing']['expiry_select_dateonly'])) {
    $expiry_select_dateonly =
      $form_state['values']['ajax']['timing']['expiry_select_dateonly'];
  } else {
    $expiry_select_dateonly = NULL;
  }

  if (isset($form_state['values']['ajax']['timing']['expiry_select'])) {
    $expiry_select = $form_state['values']['ajax']['timing']['expiry_select'];
  } else {
    $expiry_select = NULL;
  }

  if (isset($form_state['values']['ajax']['timing']['expiry_days'])) {
    $expiry_days = $form_state['values']['ajax']['timing']['expiry_days'];
  } else {
    $expiry_days = NULL;
  }

  if (isset($form_state['values']['ajax']['permit']['Overnight'])) {
    $overnight = $form_state['values']['ajax']['permit']['Overnight'];
  } else {
    $overnight = FALSE;
  }

  $long_term = FALSE;
  $short_term = FALSE;
  $valet = FALSE;
  if ($permit_policy === 'LongPolicy') {
    $long_term = TRUE;
  }
  if ($permit_policy === 'ShortPolicy') {
    $short_term = TRUE;
  }
  if ($permit_policy === 'ValetPolicy') {
    $valet = TRUE;
  }

  if (isset($form_state['values']['ajax']['person']['PrenameId'])) {
    $prename_id = $form_state['values']['ajax']['person']['PrenameId'];
  } else {
    $prename_id = NULL;
  }

  if (isset($form_state['values']['ajax']['person']['FirstName'])) {
    $firstname = check_plain($form_state['values']['ajax']['person']['FirstName']);
  } else {
    $firstname = NULL;
  }

  if (isset($form_state['values']['ajax']['person']['MiddleName'])) {
    $middlename = check_plain($form_state['values']['ajax']['person']['MiddleName']);
  } else {
    $middlename = NULL;
  }

  if (isset($form_state['values']['ajax']['person']['LastName'])) {
    $lastname = check_plain($form_state['values']['ajax']['person']['LastName']);
  } else {
    $lastname = NULL;
  }

  if (isset($form_state['values']['ajax']['person']['SufnameId'])) {
    $sufname_id = $form_state['values']['ajax']['person']['SufnameId'];
  } else {
    $sufname_id = NULL;
  }

  if (isset($form_state['values']['ajax']['person']['Street'])) {
    $street = check_plain($form_state['values']['ajax']['person']['Street']);
  } else {
    $street = NULL;
  }

  if (isset($form_state['values']['ajax']['person']['City'])) {
    $city = check_plain($form_state['values']['ajax']['person']['City']);
  } else {
    $city = NULL;
  }

  if (isset($form_state['values']['ajax']['person']['PostalCode'])) {
    $postalcode = check_plain($form_state['values']['ajax']['person']['PostalCode']);
  } else {
    $postalcode = NULL;
  }

  if (isset($form_state['values']['ajax']['person']['Province'])) {
    $province = $form_state['values']['ajax']['person']['Province'];
  } else {
    $province = NULL;
  }

  if (isset($form_state['values']['ajax']['person']['Country'])) {
    $country = chpprop_retrieve_country($form_state['values']['ajax']['person']['Country']);
  } else {
    $country = NULL;
  }

  if (isset($form_state['values']['ajax']['person']['Phone'])) {
    $phone = check_plain($form_state['values']['ajax']['person']['Phone']);
  } else {
    $phone = NULL;
  }

  if (isset($form_state['values']['ajax']['person']['Email'])) {
    $email = check_plain($form_state['values']['ajax']['person']['Email']);
  } else {
    $email = NULL;
  }

  if (isset($form_state['values']['ajax']['person']['EmailNotification'])) {
    $emailnotification = $form_state['values']['ajax']['person']['EmailNotification'];
  } else {
    $emailnotification = NULL;
  }

  if (isset($form_state['storage']['ajax']['person']['Lat'])) {
    $lat = $form_state['storage']['ajax']['person']['Lat'];
  } else {
    $lat = NULL;
  }

  if (isset($form_state['storage']['ajax']['person']['Lon'])) {
    $lon = $form_state['storage']['ajax']['person']['Lon'];
  } else {
    $lon = NULL;
  }

  $floor_id = NULL; // TBD

  if (isset($form_state['values']['ajax']['permit']['SuiteId'])) {
    $suite_id = $form_state['values']['ajax']['permit']['SuiteId'];
  } else {
    $suite_id = NULL;
  }

  // If LevelId is non-existing then it is used as freetext
  if (isset($form_state['values']['ajax']['permit']['LevelId'])) {
    $level_id = $form_state['values']['ajax']['permit']['LevelId'];
  } else {
    $level_id = NULL;
  }

  if (isset($form_state['values']['ajax']['permit']['StallId'])) {
    $stall_id = $form_state['values']['ajax']['permit']['StallId'];
  } else {
    $stall_id = NULL;
  }

  if (isset($form_state['values']['ajax']['GroupId'])) {
    $group_id = $form_state['values']['ajax']['GroupId'];
  } else {
    $group_id = NULL;
  }

  if (isset($form_state['values']['ajax']['MemberId'])) {
    $member_id = $form_state['values']['ajax']['MemberId'];
  } else {
    $member_id = NULL;
  }

  if (isset($form_state['values']['ajax']['permit']['Role'])) {
    if ($form_state['values']['ajax']['permit']['Role'] !== 'Other') {
      $role = $form_state['values']['ajax']['permit']['Role'];
    } else {
      $role = check_plain($form_state['values']['ajax']['permit']['RoleOther']);
    }
  } else {
    $role = NULL;
  }

  if (chdbperm_update_permit_id
      ($id, $user->uid, $lat, $lon, $group_id, $member_id,
       $prename_id, $firstname, $middlename, $lastname, $sufname_id,
       $street, $city, $postalcode, $province, $country,
       $phone, $email, $emailnotification,
       $role,
       $lpn, $make, $model, $color,
       $floor_id, $suite_id, $level_id, $stall_id,
       $complementary, $cost,
       $permit_class, $container_id, $type_id)) {
    drupal_set_message('Could not update permit', 'error');
    return;
  }

  // Update timing
  $now = chpuser_datetime_utc_to_utc('now');
  $begin_now = FALSE;
  if (isset($form_state['values']['ajax']['timing']['BeginTimeNow']) and
      $form_state['values']['ajax']['timing']['BeginTimeNow']) {
    $begin_now = TRUE;
  }
  if ($begin_now) {
    $begin = chpuser_datetime_utc_to_utc($permit['BeginTime']);
    if ($now < $begin) {
      $begin_str = $now->format("Y-m-d H:i:s");
    } else {
      $begin_str = $begin->format("Y-m-d H:i:s");
    }
  } else {
    $begin = chpuser_datetime_usertimezone_to_utc
      ($form_state['values']['ajax']['timing']['BeginTime']);
    $begin_str = $begin->format("Y-m-d H:i:s");
  }
  if (chdbperm_update_permit_timing_id
      ($id,
       TRUE, $begin_str,
       FALSE, NULL)) {
    drupal_set_message('Could not update permit timing', 'error');
    return;
  }

  // Insert new-stats
  if (chdbperm_stats_modify
      ($company_id, $property_id, $lot_id,
       $group_id, $member_id, $lpn)) {
    drupal_set_message('Could not update stats', 'error');
  }

  // Insert expiry time
  if ($short_term and $expiry_date_only) {
    if (chpperm_permit_submit_expiry_dateonly_helper
	($id,
	 $profile,
	 $overnight,
	 $expiry_select_dateonly,
	 $expiry_days)) {
      drupal_set_message('Could not update regular permit', 'error');
      return;
    }
  } elseif ($short_term and $container_permit) {
    if (chpperm_permit_submit_expiry_container_helper
	($id,
	 $profile,
	 $conttype,
	 $expiry_select,
	 $expiry_days)) {
      drupal_set_message('Could not update non-regular permit', 'error');
      return;
    }
  } else {
    $expirytime = chpuser_datetime_usertimezone_to_utc($expiry_select);
    if (chdbperm_update_permit_expiry_time
	($id, $expirytime->format("Y-m-d H:i:s"))) {
      drupal_set_message('Could not update expiry time', 'error');
      return;
    }
  }

  // Short term retention, overnight, and cost
  if ($short_term) {
    if (chpprop_property_uses_renew_retention($profile)) {
      if (chdbperm_update_permit_retention
	  ($id,
	   chpprop_property_renew_retention_days($profile))) {
	drupal_set_message('Could not update retention', 'error');
	return;
      }
    } else {
      if (chdbperm_update_permit_retention_at_expiry
	  ($id)) {
	drupal_set_message('Could not update retention', 'error');
	return;
      }
    }

    if (chdbperm_update_permit_overnight
	($id, $overnight)) {
      drupal_set_message('Could not update extension', 'error');
      return;
    }

    if (chdbperm_update_permit_cost
	($id,
	 $form_state['values']['ajax']['Cost'])) {
      drupal_set_message('Could not update cost', 'error');
      return;
    }
  }

  // Long term expiry
  if ($long_term) {
    if (chpprop_property_allows_unlimited_validity($profile)) {
      if (chdbperm_update_permit_expiry_offset_from_create
	  ($id, 3 * 12, 0, 0, 0)) {
	drupal_set_message('Could not update unlimited validity', 'error');
	return;
      }
    } elseif (chpprop_property_allows_annual_validity($profile)) {
      if (chdbperm_update_permit_expiry_offset_from_create
	  ($id, 12, 0, 0, 0)) {
	drupal_set_message('Could not update annual validity', 'error');
	return;
      }
    } elseif (chpprop_property_allows_month_validity($profile)) {
      if (chdbperm_update_permit_expiry_offset_from_create
	  ($id, 1, 0, 0, 0)) {
	drupal_set_message('Could not update annual validity', 'error');
	return;
      }
    } elseif (chpprop_property_allows_validity_days($profile)) {
      if (chdbperm_update_permit_expiry_offset_from_create
	  ($id, 0, 0, chpprop_property_validity_days($profile), 0)) {
	drupal_set_message('Could not update validity days', 'error');
	return;
      }
    }
  }

  // Manage shared settings
  if ($short_term or $long_term) {
    if ($form_state['values']['ajax']['permit']['PermitContext'] === 'Shared' and
	empty($permit['SharedId'])) {
      // Used to be standalone, now shared
      $shared = chdbperm_get_permit_lpn
	($company_id,
	 $property_id,
	 $lot_id,
	 $form_state['values']['ajax']['permit']['PermitLink']);
      if (!empty($shared['SharedId'])) {
	$shared_id = $shared['SharedId'];
      } else {
	$shared_id = chpprop_genRandomString20();
	if (chdbperm_update_permit_shared
	    ($company_id,
	     $property_id,
	     $lot_id,
	     $form_state['values']['ajax']['permit']['PermitLink'],
	     $shared_id)) {
	  drupal_set_message('Could not update shared permit', 'error');
	  return;
	}
      }
      // Apply new shared_id
      if (chdbperm_update_permit_shared_id
	  ($id,
	   $shared_id)) {
	drupal_set_message('Could not update shared status', 'error');
	return;
      }
    } elseif ($form_state['values']['ajax']['permit']['PermitContext'] === 'Shared' and
	      !empty($permit['SharedId'])) {
      // Used to be shared, now shared again (maybe moved between categories)
      $shared = chdbperm_get_permit_lpn
	($company_id,
	 $property_id,
	 $lot_id,
	 $form_state['values']['ajax']['permit']['PermitLink']);
      if (!empty($shared['SharedId']) and $permit['SharedId'] !== $shared['SharedId']) {
	// Apply new SharedId since they differ
	if (chdbperm_update_permit_shared_id
	    ($id,
	     $shared['SharedId'])) {
	  drupal_set_message('Could not update shared status', 'error');
	  return;
	}
	// Need to clean up the old one
	// If entry was only shared with single friend then remove from friend as well
	$shared = chdbperm_get_permits_shared
	  ($company_id,
	   $property_id,
	   $lot_id,
	   $permit['SharedId']);
	if (count($shared) == 1) {
	  foreach ($shared as $entry) {
	    if (chdbperm_update_permit_shared_id
		($entry['Id'],
		 NULL)) {
	      drupal_set_message('Could not update shared status', 'error');
	      return;
	    }
	  }
	}
      } elseif (empty($shared)) {
	$shared_id = chpprop_genRandomString20();
	if (chdbperm_update_permit_shared
	    ($company_id,
	     $property_id,
	     $lot_id,
	     $form_state['values']['ajax']['permit']['PermitLink'],
	     $shared_id)) {
	  drupal_set_message('Could not update shared permit', 'error');
	  return;
	}
      }
    } elseif ($form_state['values']['ajax']['permit']['PermitContext'] === 'Standalone') {
      if (!empty($permit['SharedId'])) {
	// Used to be shared
	$shared_id = $permit['SharedId'];

	// Remove shared status
	if (chdbperm_update_permit_shared_id
	    ($id,
	     NULL)) {
	  drupal_set_message('Could not update shared status', 'error');
	  return;
	}

	// If entry was only shared with single friend then remove from friend as well
	$shared = chdbperm_get_permits_shared
	  ($company_id,
	   $property_id,
	   $lot_id,
	   $shared_id);
	if (count($shared) == 1) {
	  foreach ($shared as $entry) {
	    if (chdbperm_update_permit_shared_id
		($entry['Id'],
		 NULL)) {
	      drupal_set_message('Could not update shared status', 'error');
	      return;
	    }
	  }
	}
      }
    }
  }

  if ($valet) {
    $expirytime = chpuser_datetime_usertimezone_to_utc($expiry_select);
    if (chdbperm_update_permit_expiry_time
	($id, $expirytime->format("Y-m-d H:i:s"))) {
      drupal_set_message('Could not update expiry time valet', 'error');
      return;
    }
    if (chdbperm_update_permit_retention_at_expiry
	($id)) {
      drupal_set_message('Could not update retention for valet', 'error');
      return;
    }
  }

  /* // Occupancy OLD */
  /* $occu = chdboccu_get_occupancy_current_lpn($property_id, $lot_id, $lpn); */
  /* if (!empty($occu) and $begin_now) { */
  /*   if (NULL !== $expiry_select_dateonly) { */
  /*     $now = chpuser_datetime_utc_to_usertimezone('now'); */
  /*     $expirytime = chpuser_datetime_usertimezone_to_utc($expiry_select_dateonly.$now->format(" H:i:s")); */
  /*   } elseif (NULL !== $expiry_select) { */
  /*     $expirytime = chpuser_datetime_usertimezone_to_utc($expiry_select); */
  /*   } else { */
  /*     $expirytime = chpuser_datetime_utc_to_utc('now'); */
  /*     $expirytime->modify("+1 hour"); */
  /*   } */
  /*   if (chdboccu_unshift_event_white_immediately */
  /* 	($property_id, $lot_id, $lpn, */
  /* 	 $expirytime->format("Y-m-d H:i:s"), */
  /* 	 $tmp)) { */
  /*     drupal_set_message('Could not update occupancy', 'error'); */
  /*     return; */
  /*   } */
  /* } */

  // Occupancy
  if ($begin_now) {
    if (NULL !== $expiry_select_dateonly) {
      $now = chpuser_datetime_utc_to_usertimezone('now');
      $expirytime = chpuser_datetime_usertimezone_to_utc
	($expiry_select_dateonly.$now->format(" H:i:s"));
    } elseif (NULL !== $expiry_select) {
      $expirytime = chpuser_datetime_usertimezone_to_utc($expiry_select);
    } else {
      // Dummy default (shall not happen)
      $expirytime = chpuser_datetime_utc_to_utc('now');
      $expirytime->modify("+1 hour");
    }
    foreach (chdboccu_get_all_occupancy($property_id, $lot_id) as $occu) {
      if (1 < chpperm_fuzzy_search_lpn($lpn, $occu['LPN'])) {
	continue;
      }
      $event_id = $occu['EventId'];
      if (chdboccu_unshift_event_white_immediately
	  ($property_id, $lot_id, $lpn, $event_id,
	   $expirytime->format("Y-m-d H:i:s"),
	   $tmp)) {
	drupal_set_message('Could not update occupancy', 'error');
	return;
      }
      break;
    }
  }

  // Agent poll
  if (chdbprop_insert_agentpoll_whitelist($property_id, $lot_id)) {
    drupal_set_message('Could not insert whitelist poll', 'error');
    return;
  }

  // Frequent user
  $freq_user = chdbprop_get_freq_user($lpn);
  if (sizeof($freq_user) == 0) {
    if (chdbprop_insert_freq_user
	($property_id, $lpn, $make, $model, $color)) {
      drupal_set_message('Could not insert freq user', 'error');
      return;
    }
  } else {
    if (chdbprop_update_freq_user
	($property_id, $lpn, $make, $model, $color)) {
      drupal_set_message('Could not update freq user', 'error');
      return;
    }
  }

  unset($form_state['storage']);
  $form_state['redirect'] = 'chppermlist';
}

function chpperm_permit_edit_form_submit($form, &$form_state) {
  if (isset($form_state['storage']['confirm_delete'])) {
    $id = $form_state['storage']['id'];
    $permit = chdbperm_get_permit_id($id);
    if (!empty($permit['SharedId'])) {
      // The entry used to be shared
      $shared_id = $permit['SharedId'];

      chdbperm_retire_permit_id($id);

      // If entry was only shared with single friend then
      // remove shared staus from friend as well
      $shared = chdbperm_get_permits_shared
	($permit['CompanyId'],
	 $permit['PropertyId'],
	 $permit['LotId'],
	 $shared_id);
      if (count($shared) == 1) {
	foreach ($shared as $entry) {
	  if (chdbperm_update_permit_shared_id
	      ($entry['Id'],
	       NULL)) {
	    drupal_set_message('Could not update shared status', 'error');
	    return;
	  }
	}
      }
    } else {
      chdbperm_retire_permit_id($id);
    }

    // Insert new-stats
    if (chdbperm_stats_delete
	($permit['CompanyId'],
	 $permit['PropertyId'],
	 $permit['LotId'],
	 $permit['GroupId'],
	 $permit['MemberId'],
	 $permit['LPN'])) {
      drupal_set_message('Could not update stats', 'error');
    }

    unset($form_state['storage']);
    $form_state['redirect'] = 'chppermlist';
    return;
  }
}



/**********
 ********** List permits
 ********** Address: chppermlist
 ********** Access:  'anai chp list permits'
 *********/



function chpperm_permit_list_form($form_state) {
  if ($form_state['storage']['confirm_delete']) {
    return confirm_form($form, 'Are you sure?', 'chppermlist',
  			'The permit will be deleted from the system.');
  }

  drupal_set_title(t('Permits'));

  global $user;
  $form = array();
  ahah_helper_register($form, $form_state);

  $settings = array();
  $settings['tag'] = 'ajax';
  $settings['show_companies'] = TRUE;
  $settings['show_properties'] = TRUE;
  $settings['show_lots'] = TRUE;
  $settings['buttons']['back']['title'] = t('Back');
  $settings['buttons']['back']['submit'] = 'chpperm_permit_list_form_submit_back';
  if (chpprop_produce_header(&$form, &$form_state, $settings)) {
    return $form;
  }
  $company_id = $form_state['storage']['ajax']['CompanyId'];
  $property_id = $form_state['storage']['ajax']['PropertyId'];
  $lot_id = $form_state['storage']['ajax']['LotId'];

  $policy = $form_state['storage']['ajax']['Lots'][$property_id][$lot_id];
  $profile_id = $policy['data']['ProfileId'];
  $profile = chdbprop_get_profile($profile_id);

  $list = array();
  $now = chpuser_datetime_utc_to_utc('now');

  $permits = chdbperm_cc_get_permits($company_id, $property_id, $lot_id,
				     FALSE, NULL, // Group
				     FALSE, NULL, // Member
				     FALSE, NULL,
				     TRUE, $now->format("Y-m-d H:i:s"));

  //anai_dbg($permits, '$permits');

  // Sort shared permits
  $shared = array();
  foreach ($permits as $entry) {
    if (empty($entry['SharedId'])) {
      continue;
    }
    $shared[$entry['SharedId']][$entry['LPN']] = $entry;
  }

  // Sort list with shared permits listed together
  foreach ($permits as $entry) {
    if (empty($entry['SharedId'])) {
      if (!isset($list[$entry['LPN']])) {
  	$list[$entry['LPN']] = $entry;
	$list[$entry['LPN']]['#type'] = 'standalone';
      }
    } else {
      foreach ($shared[$entry['SharedId']] as $lpn => $share) {
  	if (!isset($list[$lpn])) {
  	  $list[$lpn] = $share;
	  $list[$lpn]['#type'] = 'standalone';
  	}
      }
    }
  }

  // Create shared map
  $sharedmap = array();
  $included = 0;
  foreach ($list as $entry) {
    if (empty($entry['SharedId'])) {
      continue;
    }
    if (!isset($sharedmap[$entry['SharedId']])) {
      $sharedmap[$entry['SharedId']] = 1;
    } else {
      $sharedmap[$entry['SharedId']]++;
    }
    $included++;
  }

  $now = chpuser_datetime_utc_to_usertimezone($now->format("Y-m-d H:i:s"));
  $form['ajax']['time'] =
    array('#value' => '<p>'.$now->format("D, M j,Y H:i:s"));

  if (sizeof($list) == 0) {
    $form['ajax']['empty'] =
      array('#value' => '<p>'.t('LOT is Empty. No registered permits.',
				array('LOT' => decode_entities($policy['data']['Alias']))));
    return $form;
  }

  if (chpprop_property_allow_shared_permits($profile)) {
    $form['ajax']['entries'] =
      array('#value' => '<p>'.t('LOT (Entries: NUM, Permits: PERMIT, Shared: SHARED)',
				array('LOT' => decode_entities($policy['data']['Alias']),
				      'NUM' => count($list),
				      'PERMIT' => count($list) - $included + count($sharedmap),
				      'SHARED' => count($sharedmap))));
  } else {
    $form['ajax']['entries'] =
      array('#value' => '<p>'.t('LOT (Entries: NUM)',
				array('LOT' => decode_entities($policy['data']['Alias']),
				      'NUM' => count($list))));
  }

  $form['ajax']['list'] = chpperm_permit_list_table_form($list, $sharedmap, $profile);
  return $form;
}

function chpperm_permit_list_form_submit_back($form, &$form_state) {
  unset($form_state['storage']);
  $form_state['redirect'] = 'front_page';
}

function chpperm_permit_list_table_form($entries, $sharedmap, $profile) {
  $form['db'] =
    array('#type' => 'markup', '#value' => '',
  	  '#theme' => 'chpperm_permit_list_table');

  if (user_access('anai chp edit permits')) {
    $readonly = FALSE;
  } else {
    $readonly = TRUE;
  }

  $shared_id = '';
  $looper = 0;
  $n = 0;
  $stallevels = array();
  foreach ($entries as $lpn => $entry) {
    if (empty($entry['SharedId'])) {
      if (empty($entry['GroupId']) and empty($entry['MemberId'])) {
	$form['db']['numrows_'.$looper.'_1'] =
	  array('#value' => theme('image', drupal_get_path('module', 'anai').'/permitsmall.png'));
      } else {
 	$form['db']['numrows_'.$looper.'_1'] =
	  array('#value' => theme('image', drupal_get_path('module', 'anai').'/groupsmall.png'));
      }
      $shared_id = '';
      $n = 0;
    } elseif ($entry['SharedId'] !== $shared_id) {
      if (empty($entry['GroupId'])) {
	$form['db']['numrows_'.$looper.'_'.$sharedmap[$entry['SharedId']]] =
	  array('#value' => theme('image', drupal_get_path('module', 'anai').'/permitssmall.png'));
      } else {
	$form['db']['numrows_'.$looper.'_'.$sharedmap[$entry['SharedId']]] =
	  array('#value' => theme('image', drupal_get_path('module', 'anai').'/groupssmall.png'));
      }
      $shared_id = $entry['SharedId'];
      $sharedmap[$entry['SharedId']]--;
    } else {
      $sharedmap[$entry['SharedId']]--;
    }

    $form['db']['idd_'.$n.'_'.$looper] = array('#type' => 'hidden', '#value' => $entry['Id']);
    $form['db']['tag_'.$n.'_'.$looper] = array('#value' => $entry['PermitTag']);
    $form['db']['lpn_'.$n.'_'.$looper] = array('#value' => decode_entities($entry['LPN']));

    $vehicle = '';
    if (!empty($entry['Make'])) {
      if (0 < strlen($vehicle)) {
	$vehicle .= ', ';
      }
      $vehicle .= decode_entities($entry['Make']);
    }
    if (!empty($entry['Model'])) {
      if (0 < strlen($vehicle)) {
	$vehicle .= ', ';
      }
      $vehicle .= decode_entities($entry['Model']);
    }
    if (!empty($entry['Color'])) {
      if (0 < strlen($vehicle)) {
	$vehicle .= ', ';
      }
      $vehicle .= decode_entities($entry['Color']);
    }
    $form['db']['vehicle_'.$n.'_'.$looper] = array('#value' => $vehicle);

    /* $form['db']['make_'.$n.'_'.$looper] = array('#value' => decode_entities($entry['Make'])); */
    /* $form['db']['model_'.$n.'_'.$looper] = array('#value' => decode_entities($entry['Model'])); */
    /* $form['db']['color_'.$n.'_'.$looper] = array('#value' => decode_entities($entry['Color'])); */

    if (empty($entry['LevelId'])) {
      // StallId is used as freetext
      if (empty($entry['StallId'])) {
	$form['db']['stall_'.$n.'_'.$looper] = array('#value' => t('Random'));
      } else {
	$form['db']['stall_'.$n.'_'.$looper] = array('#value' => decode_entities($entry['StallId']));
      }
    } else {
      // Stalls are managed
      if (!isset($stallevels[$entry['LevelId']])) {
	$stallevels[$entry['LevelId']] = chdbprop_get_stallevel
	  ($entry['PropertyId'], $entry['LotId'], $entry['LevelId']);
      }
      $stall = chdbprop_get_stall
	($entry['PropertyId'], $entry['LotId'], $entry['LevelId'], $entry['StallId']);
      $form['db']['stall_'.$n.'_'.$looper] =
	array('#value' =>
	      decode_entities($stallevels[$entry['LevelId']]['Alias']).'/'.
	      decode_entities($stall['Alias']));
    }

    $form['db']['suite_'.$n.'_'.$looper] = array('#value' => decode_entities($entry['SuiteId']));

    $now = chpuser_datetime_utc_to_utc('now');
    if (empty($entry['GroupId'])) {
      // Expiry is always present
      $expiry = chpuser_datetime_utc_to_utc($entry['ExpiryTime']);
    } else {
      // Expiry is conditionally present
      if (empty($entry['ExpiryTime'])) {
	$expiry = chpuser_datetime_utc_to_utc($now->format("Y-m").'-01 00:00:00');
	$expiry->modify('+2 months');
	$expiry->modify('-1 second');
      } else {
	$expiry = chpuser_datetime_utc_to_utc($entry['ExpiryTime']);
      }
    }
    /* $interval = $now->diff($expiry); */
    /* if ($interval->days > 2) { */
    /*   $tag = $interval->days.t(' days'); */
    /* } elseif (0 == ($interval->days * 24 + $interval->h)) { */
    /*   $tag = t('Almost'); */
    /* } elseif (0 > ($interval->days * 24 + $interval->h)) { */
    /*   $tag = t('Expired'); */
    /* } else { */
    /*   $tag = ($interval->days * 24 + $interval->h).t('h'); */
    /* } */
    $expiry = chpuser_datetime_utc_to_usertimezone($expiry->format("Y-m-d H:i:s"));
    $tag = $expiry->format("D, M j, Y H:i");
    if ($entry['Extended']) {
      $tag .= ' (*)';
    }
    $form['db']['time_'.$n.'_'.$looper] = array('#value' => $tag);

    $form['db']['class_'.$n.'_'.$looper] =
      array('#value' => chpperm_registration_name($entry['PermitClass'], FALSE));

    //if ($readonly or !empty($entry['GroupId'])) {
    if ($readonly or $entry['PermitClass'] === 'Validation') {
      $form['db']['edit_'.$n.'_'.$looper] = array('#value' => '');
    } else {
      $form['db']['edit_'.$n.'_'.$looper] =
	array('#type' => 'image_button',
	      '#src' => drupal_get_path('module', 'anai').'/editsmall.png',
	      '#name' => 'op_edit'.$entry['Id'],
	      '#submit' => array('chpperm_permit_list_form_submit'));
    }

    if (empty($entry['SharedId'])) {
      $looper++;
    } elseif (0 == $sharedmap[$entry['SharedId']]) {
      $looper++;
      $n = 0;
    } else {
      $n++;
    }
  }

  if (chpprop_property_allow_overnight_permit($profile)) {
    $form['note1'] = array('#value' => t('(*) Overnight permit is attached').'<p><p>');
  }
  return $form;
}

function theme_chpperm_permit_list_table($form) {
  // Table Header
  $header = array('',
		  t('Permit tag'),
		  t('LPN'),
		  t('Vehicle'),
		  //t('Make'), t('Model'), t('Color'),
		  t('Stall'), t('Suite'),
		  t('Due'), t('Class'), '');
  // Table Rows
  $rows = array();
  foreach ($form as $key => $value) {
    if (!strstr($key, 'numrows_')) {
      continue;
    }
    $looper = substr($key, strlen('numrows_'));
    $looper = substr($looper, 0, strpos($looper, '_'));
    $numrows = substr($key, strlen('numrows_'.$looper.'_'));
    //drupal_set_message('Key:<pre>'.var_export($key, TRUE).'</pre>');
    //drupal_set_message('Val:<pre>'.var_export($value, TRUE).'</pre>');
    $rows[] = array(array('data' => drupal_render($form['numrows_'.$looper.'_'.$numrows]),
			  'width' => 1, 'height' => 1,
			  'rowspan' => $numrows),
		    drupal_render($form['tag_0_'.$looper]),
  		    drupal_render($form['lpn_0_'.$looper]),
  		    drupal_render($form['vehicle_0_'.$looper]),
  		    /* drupal_render($form['make_0_'.$looper]), */
  		    /* drupal_render($form['model_0_'.$looper]), */
  		    /* drupal_render($form['color_0_'.$looper]), */
  		    drupal_render($form['stall_0_'.$looper]),
  		    drupal_render($form['suite_0_'.$looper]),
  		    drupal_render($form['time_0_'.$looper]),
  		    drupal_render($form['class_0_'.$looper]),
                    array('data' => drupal_render($form['edit_0_'.$looper]),
			  'width' => 1, 'height' => 1),
		    );
    for ($n = 1; $n < $numrows; $n++) {
      $rows[] = array(drupal_render($form['tag_'.$n.'_'.$looper]),
		      drupal_render($form['lpn_'.$n.'_'.$looper]),
		      drupal_render($form['vehicle_'.$n.'_'.$looper]),
		      /* drupal_render($form['make_'.$n.'_'.$looper]), */
		      /* drupal_render($form['model_'.$n.'_'.$looper]), */
		      /* drupal_render($form['color_'.$n.'_'.$looper]), */
		      drupal_render($form['stall_'.$n.'_'.$looper]),
		      drupal_render($form['suite_'.$n.'_'.$looper]),
		      drupal_render($form['time_'.$n.'_'.$looper]),
		      drupal_render($form['class_'.$n.'_'.$looper]),
		      array('data' => drupal_render($form['edit_'.$n.'_'.$looper]),
			    'width' => 1, 'height' => 1),
		      );
    }
  }
  // Render Table
  return theme_table($header, $rows);
}

function chpperm_permit_list_form_submit($form, &$form_state) {
  /* global $user; */
  if ($form_state['storage']['back']) {
    unset($form_state['storage']);
    $form_state['redirect'] = 'chppermlist';
    return;
  }
  if ($form_state['storage']['home']) {
    return;
  }

  $id = -1;
  foreach ($form_state['values'] as $key => $value) {
    if (strstr($key, 'op_edit')) {
      $id = substr($key, strlen('op_edit'));
      break;
    }
  }
  if ($id > 0) {
    //drupal_set_message('Detailed edit of id:'.$id);
    unset($form_state['storage']);
    $form_state['redirect'] = 'chppermedit/'.$id;
    return;
  }
}



/**********
 ********** Permit search
 ********** Address: chppermsearch
 ********** Access:  'anai chp search permits'
 *********/



function chpperm_search_form($form_state) {
  if ($form_state['storage']['answer']) {
    return chpperm_search_answer_permit_form($form_state);
  }

  drupal_set_title(t('Search permit'));

  global $user;
  $account = user_load(array('uid' => $user->uid));
  $form = array();
  ahah_helper_register($form, $form_state);

  $settings = array();
  $settings['tag'] = 'ajax';
  $settings['show_companies'] = TRUE;
  if ((!in_array('Admin', array_values($account->roles)) and $account->status) and
      $account->uid != 1) {
    $settings['show_regions'] = TRUE;
    $settings['show_clients'] = TRUE;
  }
  $settings['show_properties'] = TRUE;
  $settings['show_lots'] = TRUE;
  $settings['show_all_lots'] = FALSE; // Default value
  $settings['buttons']['back']['title'] = t('Back');
  $settings['buttons']['back']['submit'] = 'chpperm_search_form_submit_back';
  if (chpprop_produce_header(&$form, &$form_state, $settings)) {
    return $form;
  }
  $company_id = $form_state['storage']['ajax']['CompanyId'];
  $property_id = $form_state['storage']['ajax']['PropertyId'];
  $lot_id = $form_state['storage']['ajax']['LotId'];
  $all_lots = $form_state['storage']['ajax']['all_lots'];

  // Build search type options
  $options = array();
  $options['LPN'] = t('Search License Plate Number');
  //$options['PermitTag'] = t('Search Suite id, permit tag, etc.');

  // Layout search type options
  if (!isset($form_state['storage']['ajax']['search_type'])) {
    $form_state['storage']['ajax']['search_type'] = key($options);
  }
  $form['ajax']['search_type'] =
    array('#type' => 'radios',
	  '#title' => t('Search type'),
	  '#options' => $options,
	  '#default_value' => $form_state['storage']['ajax']['search_type'],
	  '#ahah' => array('event' => 'change',
			   'path' => ahah_helper_path(array('ajax')),
			   'wrapper' => 'ajax-wrapper'));

  // Layout LPN field
  if (!isset($form_state['storage']['ajax']['LPN'])) {
    $form_state['storage']['ajax']['LPN'] = '';
  } elseif (strlen($form_state['storage']['ajax']['LPN']) > 0) {
    $form_state['storage']['ajax']['LPN'] =
      strtoupper($form_state['storage']['ajax']['LPN']);
  }
  if ($form_state['storage']['ajax']['search_type'] === 'LPN') {
    $form['ajax']['LPN'] =
      array('#type' => 'textfield',
	    '#title' => t('License plate number'),
	    '#maxlength' => 10,
	    '#description' => t('(No spaces)'),
	    '#attributes' => array('onBlur'=>'this.value=this.value.toUpperCase()'),
	    '#default_value' => $form_state['storage']['ajax']['LPN']);
  }

  if ($form_state['storage']['notfound']) {
    $form['ajax']['LPN']['#field_suffix'] =
      theme('image', 'misc/watchdog-error.png');
  }

  // Layout PermitTag field
  if (!isset($form_state['storage']['ajax']['PermitTag'])) {
    $form_state['storage']['ajax']['PermitTag'] = '';
  }
  if ($form_state['storage']['ajax']['search_type'] === 'PermitTag') {
    $form['ajax']['PermitTag'] =
      array('#type' => 'textfield',
	    '#title' => t('Suite, apartment, room, stall, id, unit, etc.'),
	    '#maxlength' => 30,
	    '#default_value' => $form_state['storage']['ajax']['PermitTag']);
  }

  // Build PermitTag based LPN options
  $options = array();
  if ($form_state['storage']['ajax']['search_type'] === 'PermitTag' and
      !empty($form_state['storage']['ajax']['PermitTag'])) {

    // Search regular permits on given lot
    foreach (chdbperm_get_permits_suite
	     ($company_id, $property_id, $lot_id,
	      $form_state['storage']['ajax']['PermitTag'])
	     as $entry) {
      $lot = $form_state['storage']['ajax']['Lots'][$property_id][$lot_id];
      $options['Regular_'.$entry['LPN']] =
	$entry['LPN'].' - '.
	$entry['Make'].', '.
	$entry['Model'].', '.
	$entry['Color'].' - '.
	$lot['Alias'];
    }

    if ($all_lots) {
      // Search regular permits on all lots
      foreach ($form_state['storage']['ajax']['Lots'][$property_id] as $id => $lot) {
	$options['Regular_'.$entry['LPN']] =
	  $entry['LPN'].' - '.
	  $entry['Make'].', '.
	  $entry['Model'].', '.
	  $entry['Color'].' - '.
	  $lot['Alias'];
      }
    }

    /* // Search group permits */
    /* $groupprops = array(); */
    /* foreach (chdbperm_get_groupprops_property($company_id, $property_id) as $groupprop) { */
    /*   if ($all_lots or */
    /* 	  empty($groupprop['LotId']) or */
    /* 	  $lot_id === $groupprop['LotId']) { */
    /* 	$groupprops[] = $groupprop; */
    /*   } */
    /* } */
    /* //drupal_set_message('<pre>'.var_export($groupprops, TRUE).'</pre>'); */
    /* foreach ($groupprops as $entry) { */
    /*   $groupdef = chdbperm_get_groupdef($company_id, $entry['ClientId'], $entry['GroupId']); */
    /*   //drupal_set_message('<pre>'.var_export($groupdef, TRUE).'</pre>'); */
    /*   $grouplist = chdbperm_get_grouplist_permit_tag */
    /* 	($company_id, */
    /* 	 $entry['GroupId'], */
    /* 	 $form_state['storage']['ajax']['PermitTag']); */
    /*   //drupal_set_message('<pre>'.var_export($grouplist, TRUE).'</pre>'); */
    /*   foreach ($grouplist as $entry) { */
    /* 	$options[$entry['GroupId'].'_'.$entry['LPN']] = */
    /* 	  $entry['LPN'].' - '. */
    /* 	  $entry['Make'].', '. */
    /* 	  $entry['Model'].', '. */
    /* 	  $entry['Color'].' - '. */
    /* 	  $groupdef['Alias'].', '. */
    /* 	  $groupdef['Affiliate']; */
    /*   } */
    /* } */
  } //drupal_set_message('<pre>'.var_export($options, TRUE).'</pre>');

  // Layout PermitTag based LPN options
  if (count($options) == 0) {
    if (!empty($form_state['storage']['ajax']['PermitTag'])) {
      $form['ajax']['PermitTag']['#field_suffix'] =
	theme('image', 'misc/watchdog-error.png');
    }
  } elseif (count($options) == 1) {
    $form['ajax']['PermitTag']['#field_suffix'] =
      theme('image', 'misc/watchdog-ok.png');

    if (!isset($form_state['storage']['ajax']['DerivedLPN'])) {
      $form_state['storage']['ajax']['DerivedLPN'] = key($options);
    }
    $form['ajax']['DerivedLPN'] =
      array('#type' => 'hidden',
	    '#value' => $form_state['storage']['ajax']['DerivedLPN']);
  } elseif (count($options) > 1) {
    $form['ajax']['DerivedLPN'] =
      array('#type' => 'radios',
	    '#title' => t('Vehicle'),
	    '#options' => $options,
	    '#default_value' => $form_state['storage']['ajax']['DerivedLPN']);
  }

  if ($form_state['storage']['ajax']['search_type'] === 'LPN' or
      count($options) > 0) {
    $btntext = t('Search');
  } elseif ($form_state['storage']['ajax']['search_type'] === 'PermitTag') {
    $btntext = t('Continue');
  }

  if (user_access('anai chp search retention permits')) {
    if (!isset($form_state['storage']['ajax']['retention'])) {
      $form_state['storage']['ajax']['retention'] = FALSE;
    }
    $form['ajax']['retention'] =
      array('#type' => 'checkbox',
	    '#title' => t('Include retention permits'),
	    '#default_value' => $form_state['storage']['ajax']['retention']);
  }

  $form['ajax']['search'] =
    array('#type' => 'submit',
	  '#value' => $btntext,
	  '#submit' => array('chpperm_search_form_submit_confirm'));

 return $form;
}

function chpperm_search_form_submit_back($form, &$form_state) {
  unset($form_state['storage']);
  $form_state['redirect'] = 'front_page';
}

function chpperm_search_form_submit_confirm($form, &$form_state) {
  $company_id = $form_state['storage']['ajax']['CompanyId'];
  $property_id = $form_state['storage']['ajax']['PropertyId'];
  $lot_id = $form_state['storage']['ajax']['LotId'];
  $all_lots = $form_state['storage']['ajax']['all_lots'];

  if ($form_state['storage']['ajax']['search_type'] === 'LPN' and
      !empty($form_state['values']['ajax']['LPN'])) {

    $lpn = decode_entities($form_state['values']['ajax']['LPN']);

    if ($all_lots) {
      //drupal_set_message('LPN multi entry');

      $form_state['storage']['permit'] = array();
      foreach (chdbprop_get_policies($property_id) as $policy) {
	$lot_id = $policy['LotId'];

	$permit = chdbperm_get_permit_lpn
	  ($company_id, $property_id, $lot_id,
	   $form_state['values']['ajax']['LPN']);

	if (sizeof($permit) > 0) {
	  $form_state['storage']['answer'] = TRUE;
	  $form_state['storage']['permit'][$lot_id] = $permit;
	}
      }
      if (count($form_state['storage']['permit']) == 0) {
	$form_state['storage']['notfound'] = TRUE;
      }
    } else {
      //drupal_set_message('LPN single entry');

      $permit = chdbperm_get_permit_lpn
	($company_id, $property_id, $lot_id,
	 $form_state['values']['ajax']['LPN']);

      if (sizeof($permit) > 0) {
	$form_state['storage']['answer'] = TRUE;
	$form_state['storage']['permit'][$lot_id] = $permit;
      } else {
	$form_state['storage']['notfound'] = TRUE;
      }
    }
  }

  if ($form_state['storage']['ajax']['search_type'] === 'PermitTag' and
      !empty($form_state['values']['ajax']['DerivedLPN'])) {

    $group_id = NULL;
    $prefix = substr($form_state['values']['ajax']['DerivedLPN'],
		     0,
		     strpos($form_state['values']['ajax']['DerivedLPN'], '_'));

    if ($prefix === 'Regular') {
      $lpn = substr($form_state['values']['ajax']['DerivedLPN'],
		    strlen('Regular_'));
    } else {
      $group_id = $prefix;
      $lpn = substr($form_state['values']['ajax']['DerivedLPN'],
		    strlen($prefix) + 1);
    }
    $lpn = decode_entities($lpn);

    if ($all_lots) {
      //drupal_set_message('Suite multi entry');

      $form_state['storage']['permit'] = array();
      foreach (chdbprop_get_policies($property_id) as $policy) {
	$lot_id = $policy['LotId'];

	$permit = chdbperm_get_permit_lpn
	  ($company_id, $property_id, $lot_id,
	   $form_state['values']['ajax']['DerivedLPN']);

	if (sizeof($permit) > 0) {
	  $form_state['storage']['answer'] = TRUE;
	  $form_state['storage']['permit'][$lot_id] = $permit;
	}
      }
      if (count($form_state['storage']['permit']) == 0) {
	$form_state['storage']['notfound'] = TRUE;
      }
    } else {
      //drupal_set_message('Suite single entry');

      $permit = chdbperm_get_permit_lpn
	($company_id, $property_id, $lot_id, $lpn);

      if (sizeof($permit) > 0) {
	$form_state['storage']['answer'] = TRUE;
	$form_state['storage']['permit'][$lot_id] = $permit;
      }
    }
  }

  /* // Group permits */
  /* $groupprops = array(); */
  /* foreach (chdbperm_get_groupprops_property($company_id, $property_id) as $groupprop) { */
  /*   if ($all_lots or */
  /* 	empty($groupprop['LotId']) or */
  /* 	$lot_id === $groupprop['LotId']) { */
  /*     $groupprops[] = $groupprop; */
  /*   } */
  /* } */
  /* //drupal_set_message('<pre>'.var_export($groupprops, TRUE).'</pre>'); */
  /* foreach ($groupprops as $entry) { */
  /*   $groupdef = chdbperm_get_groupdef($company_id, $entry['ClientId'], $entry['GroupId']); */
  /*   //drupal_set_message('<pre>'.var_export($groupdef, TRUE).'</pre>'); */
  /*   $grouplist = chdbperm_get_grouplist_lpn */
  /*     ($company_id, */
  /*      $entry['GroupId'], */
  /*      $lpn); */
  /*   //drupal_set_message('<pre>'.var_export($grouplist, TRUE).'</pre>'); */
  /*   if (sizeof($grouplist) > 0) { */
  /*     $form_state['storage']['answer'] = TRUE; */
  /*     $form_state['storage']['groupdef'][$entry['GroupId']] = $groupdef; */
  /*     $form_state['storage']['grouplist'][$entry['GroupId']] = $grouplist; */
  /*   } */
  /* } */

  // Retention
  if ($form_state['storage']['ajax']['retention']) {
    $retention = chdbperm_get_permits_lpn($company_id, $property_id, $lpn, FALSE);
    $form_state['storage']['retention'] = $retention;
  }
}

function chpperm_search_form_submit($form, &$form_state) {
  if ($form_state['storage']['back']) {
    unset($form_state['storage']);
    $form_state['redirect'] = 'front_page';
    return;
  }
}

function chpperm_search_answer_permit_form($form_state) {
  drupal_set_title(t('Search result'));

  $form['more'] =
    array('#type' => 'submit',
	  '#value' => t('Search another'),
	  '#submit' => array('chpperm_search_answer_permit_form_submit'));
  $form['back'] =
    array('#type' => 'submit',
	  '#value' => t('Back'),
	  '#submit' => array('chpperm_search_answer_permit_form_submit_back'));

  if ($form_state['storage']['answer']) {
    if (isset($form_state['storage']['permit'])) {
      foreach ($form_state['storage']['permit'] as $lot_id => $permit) {
	$form['permit'][$lot_id] =
	  array('#value' =>
		chpperm_search_answer_permit_table
		($form_state['storage']['permit'][$lot_id]));
      }
    }
    if (isset($form_state['storage']['groupdef'])) {
      foreach ($form_state['storage']['groupdef'] as $group_id => $groupdef) {
	$grouplist = $form_state['storage']['grouplist'][$group_id];
	$form['permit'][$group_id] =
	  array('#value' => chpperm_search_answer_group_table($groupdef, $grouplist));
      }
    }
  } else {
    $form['empty'] = array('#value' => t('No active permit found.').'<p><p>');
  }

  if (sizeof($form_state['storage']['retention']) > 0) {
    $form['history'] =
      array('#type' => 'fieldset',
	    '#title' => t('Retention permits'));
    $form['history']['retention'] =
      array('#value' =>
	    chpperm_permit_retention_history_table
	    ($form_state['storage']['retention']));
  }

  return $form;
}

function chpperm_search_answer_permit_form_submit($form, &$form_state) {
  unset($form_state['storage']);
}

function chpperm_search_answer_permit_form_submit_back($form, &$form_state) {
  unset($form_state['storage']);
  $form_state['redirect'] = 'front_page';
}

function chpperm_search_answer_permit_table($entry) {
  $header = array();

  $row[] = array(t('License Plate Number'), $entry['LPN']);
  $row[] = array(t('Make'), decode_entities($entry['Make']));
  $row[] = array(t('Model'), decode_entities($entry['Model']));
  $row[] = array(t('Color'), decode_entities($entry['Color']));

  $property = chdbprop_get_property($entry['PropertyId']);
  $tag =
    $property['Alias'].', '.
    $property['Street'].', '.
    $property['City'];
  $row[] = array(t('Property'), $tag);

  $policy = chdbprop_get_policy($entry['PropertyId'], $entry['LotId']);
  $row[] = array(t('Lot'), $policy['Alias']);

  $created = chpuser_datetime_utc_to_usertimezone($entry['CreateTime']);
  $row[] = array(t('Created'), $created->format("D, j M Y H:i"));

  if (!empty($entry['ExpiryTime'])) {
    $expires = chpuser_datetime_utc_to_usertimezone($entry['ExpiryTime']);
    $row[] = array(t('Expires'), $expires->format("D, j M Y H:i"));
  } else {
    $row[] = array(t('Expires'), t('Not set'));
  }

  if (!empty($entry['RetentionTime'])) {
    $retention = chpuser_datetime_utc_to_usertimezone($entry['RetentionTime']);
    $row[] = array(t('End of retention'), $retention->format("D, j M Y H:i"));
  } else {
    $row[] = array(t('End of retention'), t('Not set'));
  }

  $account = user_load(array('name' => $entry['CreatedBy']));
  if ($account) {
    $row[] = array(t('Created by'), $account->profile_name);
  } else {
    $row[] = array(t('Created by'), t('Unknown'));
  }

  $profile_id = $policy['ProfileId'];
  $profile = chdbprop_get_profile($profile_id);

  $type = "";
  if ($entry['Long'] and $entry['Short']) {
    $type = $profile['LongPolicyAlias'].' and '.$profile['ShortPolicyAlias'];
  } elseif ($entry['Long']) {
    $type = $profile['LongPolicyAlias'];
  } elseif ($entry['Short']) {
    $type = $profile['ShortPolicyAlias'];
  }
  $row[] = array(t('Permit type'), $type);

  if ($entry['Long']) {
    $row[] = array(t('Permit tag'), $entry['PermitTag']);
  }

  if ($entry['Short']) {
    $row[] = array(t('Suite'), $entry['PermitTag']);
    $row[] = array(t('Overnight permit'), $entry['Extended'] ? 'Yes' : 'No');
    $row[] = array(t('Consecutive days used'), $entry['RenewUsed']);
  }

  if ($profile['ValetPolicy']) {
    $row[] = array(t('Valet'), $entry['Valet'] ? t('Yes') : t('No'));
  }

  return theme('table', $header, $row);
}

function chpperm_search_answer_group_table($groupdef, $grouplist) {
  $header = array();

  $row[] = array(t('License Plate Number'), $grouplist['LPN']);
  $row[] = array(t('Make'), decode_entities($grouplist['Make']));
  $row[] = array(t('Model'), decode_entities($grouplist['Model']));
  $row[] = array(t('Color'), decode_entities($grouplist['Color']));

  $row[] = array(t('Permit owner'), decode_entities($grouplist['Person']));
  $row[] = array(t('Permit owner phone'), decode_entities($grouplist['Phone']));
  $row[] = array(t('Permit owner address'), decode_entities(nl2br($grouplist['Address'])));

  $row[] = array(t('Group name'), decode_entities($groupdef['Alias']));
  $row[] = array(t('Group affiliate'), decode_entities($groupdef['Affiliate']));
  $row[] = array(t('Group contact person'), decode_entities($groupdef['Person']));
  $row[] = array(t('Group contact phone'), decode_entities($groupdef['Phone']));

  $created = chpuser_datetime_utc_to_usertimezone($grouplist['CreateTime']);
  $row[] = array(t('Created'), $created->format("D, j M Y H:i"));

  $row[] = array(t('Permit tag'), $grouplist['PermitTag']);
  return theme('table', $header, $row);
}

function chpperm_permit_retention_history_table($entries) {
  global $user;
  if ($entries[0]['ShortPolicy']) {
    $third = t('Overnight');
  } elseif ($entries[0]['LongPolicy']) {
    $third = t('Permit Tag');
  }

  $header = array('Created', 'Expired', $third);

  foreach ($entries as $entry) {
    $created = chpuser_datetime_utc_to_usertimezone($entry['CreateTime']);
    $created_txt = $created->format("D, j M Y H:i");

    if (!empty($entry['ExpiryTime'])) {
      $expires = chpuser_datetime_utc_to_usertimezone($entry['ExpiryTime']);
      $expires_txt = $expires->format("D, j M Y H:i");
    } else {
      $expires_txt = t('Not set');
    }

    if ($entry['ShortPolicy']) {
      $third = $entry['Extended'] ? 'Yes' : 'No';
    } elseif ($entry['LongPolicy']) {
      $third = $entry['PermitTag'];
    }

    $row[] = array($created_txt, $expires_txt, $third);
  }
  return theme('table', $header, $row);
}



/**********
 ********** Permit early checkout
 ********** Address: chppermcheckout
 ********** Access:  'anai chp early checkout permits'
 *********/



function chpperm_permit_checkout_form($form_state) {
  if ($form_state['storage']['answered']) {
    return chpperm_permit_checkout_answer_form($form_state);
  }

  drupal_set_title(t('Early checkout'));

  global $user;
  $form = array();
  ahah_helper_register($form, $form_state);

  $settings = array();
  $settings['tag'] = 'ajax';
  $settings['show_companies'] = TRUE;
  $settings['show_properties'] = TRUE;
  $settings['show_lots'] = TRUE;
  $settings['show_all_lots'] = FALSE; // Default value
  $settings['buttons']['back']['title'] = t('Back');
  $settings['buttons']['back']['submit'] = 'chpperm_permit_checkout_form_submit_back';
  if (chpprop_produce_header(&$form, &$form_state, $settings)) {
    return $form;
  }
  $company_id = $form_state['storage']['ajax']['CompanyId'];
  $property_id = $form_state['storage']['ajax']['PropertyId'];
  $lot_id = $form_state['storage']['ajax']['LotId'];
  $all_lots = $form_state['storage']['ajax']['all_lots'];

  // Build search type options
  $options = array();
  $options['LPN'] = t('Search License Plate Number');
  //$options['PermitTag'] = t('Search Suite id, permit tag, etc.');

  // Layout search type options
  if (!isset($form_state['storage']['ajax']['search_type'])) {
    $form_state['storage']['ajax']['search_type'] = key($options);
  }
  $form['ajax']['search_type'] =
    array('#type' => 'radios',
	  '#title' => t('Search type'),
	  '#options' => $options,
	  '#default_value' => $form_state['storage']['ajax']['search_type'],
	  '#ahah' => array('event' => 'change',
			   'path' => ahah_helper_path(array('ajax')),
			   'wrapper' => 'ajax-wrapper'));

  // Layout LPN field
  if (!isset($form_state['storage']['ajax']['LPN'])) {
    $form_state['storage']['ajax']['LPN'] = '';
  } elseif (strlen($form_state['storage']['ajax']['LPN']) > 0) {
    $form_state['storage']['ajax']['LPN'] =
      strtoupper($form_state['storage']['ajax']['LPN']);
  }
  if ($form_state['storage']['ajax']['search_type'] === 'LPN') {
    $form['ajax']['LPN'] =
      array('#type' => 'textfield',
	    '#title' => t('License plate number'),
	    '#maxlength' => 10,
	    '#description' => t('(No spaces)'),
	    '#attributes' => array('onBlur'=>'this.value=this.value.toUpperCase()'),
	    '#default_value' => $form_state['storage']['ajax']['LPN']);
  }

  // Layout PermitTag field
  if (!isset($form_state['storage']['ajax']['PermitTag'])) {
    $form_state['storage']['ajax']['PermitTag'] = '';
  }
  if ($form_state['storage']['ajax']['search_type'] === 'PermitTag') {
    $form['ajax']['PermitTag'] =
      array('#type' => 'textfield',
	    '#title' => t('Suite id, permit tag, etc.'),
	    '#maxlength' => 20,
	    '#default_value' => $form_state['storage']['ajax']['PermitTag']);
  }

  // Build PermitTag based LPN options
  $options = array();
  if ($form_state['storage']['ajax']['search_type'] === 'PermitTag' and
      !empty($form_state['storage']['ajax']['PermitTag'])) {
    foreach (chdbperm_get_permits_suite
	     ($company_id, $property_id, $lot_id,
	      $form_state['storage']['ajax']['PermitTag'])
	     as $entry) {
      $options[$entry['LPN']] =
	$entry['LPN'].' - '.
	$entry['Make'].', '.
	$entry['Model'].', '.
	$entry['Color'];
    }
  }

  // Layout PermitTag based LPN options
  if (count($options) == 0) {
    if (!empty($form_state['storage']['ajax']['PermitTag'])) {
      $form['ajax']['PermitTag']['#field_suffix'] =
	theme('image', 'misc/watchdog-error.png');
    }
  } elseif (count($options) == 1) {
    $form['ajax']['PermitTag']['#field_suffix'] =
      theme('image', 'misc/watchdog-ok.png');
  }

  if (count($options) > 0) {
    if (!isset($form_state['storage']['ajax']['DerivedLPN'])) {
      $form_state['storage']['ajax']['DerivedLPN'] = key($options);
    }
    // Place holder
    $form['ajax']['DerivedLPN'] =
      array('#type' => 'hidden',
	    '#value' => $form_state['storage']['ajax']['DerivedLPN']);
  }

  if (count($options) > 1) {
    $form['ajax']['DerivedLPN'] =
      array('#type' => 'radios',
	    '#title' => t('Vehicle'),
	    '#options' => $options,
	    '#default_value' => $form_state['storage']['ajax']['DerivedLPN']);
  }

  if ($form_state['storage']['ajax']['search_type'] === 'LPN' or
      count($options) > 0) {
    $btntext = t('Checkout');
  } elseif ($form_state['storage']['ajax']['search_type'] === 'PermitTag') {
    $btntext = t('Continue');
  }

  $form['ajax']['search'] =
    array('#type' => 'submit',
	  '#value' => $btntext,
	  '#submit' => array('chpperm_permit_checkout_form_submit_confirm'));

  return $form;
}

function chpperm_permit_checkout_form_submit_back($form, &$form_state) {
  unset($form_state['storage']);
  $form_state['redirect'] = 'front_page';
}

function chpperm_permit_checkout_form_submit_confirm($form, &$form_state) {
  $company_id = $form_state['storage']['ajax']['CompanyId'];
  $property_id = $form_state['storage']['ajax']['PropertyId'];
  $lot_id = $form_state['storage']['ajax']['LotId'];
  $all_lots = $form_state['storage']['ajax']['all_lots'];

  if ($form_state['storage']['ajax']['search_type'] === 'LPN' and
      !empty($form_state['values']['ajax']['LPN'])) {
    if ($all_lots) {
      //drupal_set_message('LPN multi entry');

      $permits = array();
      foreach (chdbprop_get_policies($property_id) as $policy) {
	$lot_id = $policy['LotId'];
	$profile_id = $policy['ProfileId'];
	$profile = chdbprop_get_profile($profile_id);
	$retention_days = chpprop_property_renew_retention_days($profile);

	$permit = chdbperm_get_permit_lpn
	  ($company_id, $property_id, $lot_id,
	   $form_state['values']['ajax']['LPN']);

	if (sizeof($permit) > 0) {
	  $permits[] = $permit;
	  if (chdbperm_retire_permit_id
	      ($permit['Id'],
	       $retention_days)) {
	    drupal_set_message('Could not checkout permit', 'error');
	    return;
	  }
	}
      }
      $form_state['storage']['permits'] = $permits;
    } else {
      //drupal_set_message('LPN single entry');

      $policy = chdbprop_get_policy($property_id, $lot_id);
      $profile_id = $policy['ProfileId'];
      $profile = chdbprop_get_profile($profile_id);
      $retention_days = chpprop_property_renew_retention_days($profile);

      $permit = chdbperm_get_permit_lpn
	($company_id, $property_id, $lot_id,
	 $form_state['values']['ajax']['LPN']);

      if (sizeof($permit) > 0) {
	if (chdbperm_retire_permit_id
	    ($permit['Id'],
	     $retention_days)) {
	  drupal_set_message('Could not checkout permit', 'error');
	  return;
	}
	$form_state['storage']['permit'] = $permit;
      }
    }
    $form_state['storage']['answered'] = TRUE;
    return;
  }

  if ($form_state['storage']['ajax']['search_type'] === 'PermitTag' and
      !empty($form_state['values']['ajax']['DerivedLPN'])) {
    if ($all_lots) {
      //drupal_set_message('Suite multi entry');

      $permits = array();
      foreach (chdbprop_get_policies($property_id) as $policy) {
	$lot_id = $policy['LotId'];
	$profile_id = $policy['ProfileId'];
	$profile = chdbprop_get_profile($profile_id);
	$retention_days = chpprop_property_renew_retention_days($profile);

	$permit = chdbperm_get_permit_lpn
	  ($company_id, $property_id, $lot_id,
	   $form_state['values']['ajax']['DerivedLPN']);
	if (sizeof($permit) > 0) {
	  $permits[] = $permit;
	  if (chdbperm_retire_permit_id
	      ($permit['Id'],
	       $retention_days)) {
	    drupal_set_message('Could not checkout permit', 'error');
	    return;
	  }
	}
      }
      $form_state['storage']['permits'] = $permits;
    } else {
      //drupal_set_message('Suite single entry');

      $policy = chdbprop_get_policy($property_id, $lot_id);
      $profile_id = $policy['ProfileId'];
      $profile = chdbprop_get_profile($profile_id);
      $retention_days = chpprop_property_renew_retention_days($profile);

      $permit = chdbperm_get_permit_lpn
	($company_id, $property_id, $lot_id,
	 $form_state['values']['ajax']['DerivedLPN']);

      if (sizeof($permit) > 0) {
	if (chdbperm_retire_permit_id
	    ($permit['Id'],
	     $retention_days)) {
	  drupal_set_message('Could not checkout permit', 'error');
	  return;
	}
	$form_state['storage']['permit'] = $permit;
      }
    }
    $form_state['storage']['answered'] = TRUE;
    return;
  }
}

function chpperm_permit_checkout_answer_form($form_state) {

  if (empty($form_state['storage']['permit']) and
      empty($form_state['storage']['permits'])) {
    drupal_set_title(t('Early checkout - Info not found'));
    $img_link = '';//'<center>';
    $img_link .= '<img src="'.url('clipart/stop_sign.png').'"';
    $img_link .= ' width="20%" border="0" alt="">';
    $img_link .= '';//'</center>';
    $img_link .= '<p><p>';
    $form['chp']['img'] = array('#value' => $img_link);
  } elseif (!empty($form_state['storage']['permit'])) {
    $permit = $form_state['storage']['permit'];
    drupal_set_title(t('Early checkout - '.$permit['LPN']));
    $form['chp']['info'] =
      array('#value' => '<h2>'.t('Done!! License plate LPN is now removed.',
				 array('LPN' => $permit['LPN'])).'<p></h2>');
  } elseif (!empty($form_state['storage']['permits'])) {
    $permits = $form_state['storage']['permits'];
    drupal_set_title(t('Early checkout'));

    foreach ($permits as $entry) {
      $tag =
	$entry['LPN'].' - '.
	$entry['Make'].', '.
	$entry['Model'].', '.
	$entry['Color'];
      $form['chp']['info'][$entry['LPN']] =
	array('#value' =>
	      '<h2>'.t('Done!! License plate LPN is now removed.',
		       array('LPN' => $entry['LPN'])).'<p></h2>');
    }
  }

  $form['chp']['more'] =
    array('#type' => 'submit', '#value' => t('Checkout another'),
	  '#validate' => array('chpperm_permit_checkout_answer_form_validate_more'),
	  '#submit' => array('chpperm_permit_checkout_answer_form_submit'));
  $form['back'] =
    array('#type' => 'submit',
	  '#value' => t('Back'),
	  '#validate' => array('chpperm_permit_checkout_answer_form_validate_home'),
	  '#submit' => array('chpperm_permit_checkout_answer_form_submit'));
  return $form;
}

function chpperm_permit_checkout_answer_form_validate_home($form, &$form_state) {
  $form_state['storage']['home'] = TRUE;
}

function chpperm_permit_checkout_answer_form_validate_more($form, &$form_state) {
  $form_state['storage']['more'] = TRUE;
}

function chpperm_permit_checkout_answer_form_submit($form, &$form_state) {
  if ($form_state['storage']['home']) {
    unset($form_state['storage']);
    $form_state['redirect'] = 'front_page';
    return;
  }
  if ($form_state['storage']['back']) {
    unset($form_state['storage']);
    $form_state['redirect'] = 'chppermcheckout';
    return;
  }
  if ($form_state['storage']['more']) {
    unset($form_state['storage']);
    return;
  }
}




