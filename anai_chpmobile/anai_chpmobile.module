<?php
// $Id$
//require_once("anai_chpmobile.inc");


/**
 * @file
 * ANAI
 *
 * Mobile Management
 *
 */



/**
 * Implementation of hook_init().
 * 
 */



/**
 * Implementation of hook_cron().
 * 
 */
function anai_chpmobile_cron() {
  $time = chpuser_datetime_utc_to_utc('now');
  if (chdbprop_delete_mobiles_retention_older_than
      ($time->format("Y-m-d H:i:s"))) {
    watchdog('anai_chpmobile',
	     'chdbprop_delete_mobiles_retention_older_than('.
	     $time->format("Y-m-d H:i:s").') failed');
  }
}



/**
 * Implementation of hook_user().
 * 
 */



/**
 * Implementation of hook_perm().
 * 
 */
function anai_chpmobile_perm() {
  return array('anai chp add mobiles',
	       'anai chp demo mobiles',
	       'anai chp list mobiles',
	       'anai chp edit mobiles',
	       'anai chp retention mobiles',
	       'anai chp delete mobiles',
	       'anai chp mobile key file',
	       );
}



/**
 * Implementation of hook_theme().
 * 
 */
function anai_chpmobile_theme($existing, $type, $theme, $path) {
  return array
    ('chpmob_list_mobile_table' =>
     array('arguments' => array('fieldset' => NULL)),
     'chpmob_list_lpr_table' =>
     array('arguments' => array('fieldset' => NULL)),
     'chpmob_keys_table' =>
     array('arguments' => array('fieldset' => NULL)),
     );
}



/**
 * Implementation of hook_menu().
 * 
 */
function anai_chpmobile_menu() {
  $items = array();
  $items['chpmobadd'] = array
    ('page callback' => 'drupal_get_form',
     'page arguments' => array('chpmob_add_form'),
     'access arguments' => array('anai chp add mobiles'),
     'type' => MENU_CALLBACK,
     );
  $items['chpmoblist'] = array
    ('page callback' => 'drupal_get_form',
     'page arguments' => array('chpmob_list_form'),
     'access arguments' => array('anai chp list mobiles'),
     'type' => MENU_CALLBACK,
     );
  $items['chpmobkeys'] = array
    ('page callback' => 'drupal_get_form',
     'page arguments' => array('chpmob_keys_form'),
     'access arguments' => array('anai chp mobile key file'),
     'type' => MENU_CALLBACK,
     );
  $items['chpmobkeyfile/%'] = array
    ('page callback' => 'chpmob_keyfile_form',
     'page arguments' => array(1,2),
     'access arguments' => array('anai chp mobile key file'),
     'type' => MENU_CALLBACK,
     );
  return $items;
}



/**
 * Implementation of local functions
 * 
 */



/**********
 ********** Mobiles add
 ********** Address: chomobadd
 ********** Access:  'anai chp add mobiles'
 *********/



function chpmob_add_form($form_state) {
  drupal_set_title(t('Add key'));

  global $user;
  $account = user_load(array('uid' => $user->uid));
  $form = array();
  ahah_helper_register($form, $form_state);

  $settings = array();
  $settings['tag'] = 'ajax';
  $settings['show_companies'] = TRUE;
  if ((!in_array('Admin', array_values($account->roles)) and $account->status) and
      $account->uid != 1) {
    $settings['show_regions'] = TRUE;
    $settings['show_clients'] = TRUE;
  }
  if (chpprop_produce_header(&$form, &$form_state, $settings)) {
    return $form;
  }
  $company_id = $form_state['storage']['ajax']['CompanyId'];

  // Create and validate property options
  $property_options = array();
  if (!empty($form_state['storage']['ajax']['Properties'])) {
    foreach ($form_state['storage']['ajax']['Properties'] as $property_id => $property) {
      $property_options[$property_id] =
	decode_entities($property['data']['Alias']).', '.
	decode_entities($property['data']['Street']).', '.
	decode_entities($property['data']['City']);
    }
  }
  if (empty($property_options)) {
    $form['ajax']['error'] = array('#value' => '<p>'.t('Property missing.').'<p>');
    $form['ajax']['cancel'] =
      array('#type' => 'image_button',
	    '#src' => drupal_get_path('module', 'anai').'/cancel.png',
	    '#submit' => array('chpmob_add_form_submit_cancel'));
    return $form;
  }

  // Create and validate policies options, used later for lot selection
  $policies = chpprop_retrieve_policies($user->uid, $company_id);
  if (empty($policies)) {
    $form['ajax']['error'] = array('#value' => '<p>'.t('Lot missing.').'<p>');
    $form['ajax']['cancel'] =
      array('#type' => 'image_button',
	    '#src' => drupal_get_path('module', 'anai').'/cancel.png',
	    '#submit' => array('chpmob_add_form_submit_cancel'));
    return $form;
  }

  // Create and validate apps options
  $app_options = array();
  $enforcer_app = array();
  $valet_app = array();
  foreach (chdbprop_get_all_apps() as $app) {
    if ($app['EnforcementPolicy'] or $app['ValetPolicy']) {
      $app_options[$app['AppId']] = decode_entities($app['Alias']);
    }
    if ($app['EnforcementPolicy']) {
      $enforcer_app[$app['AppId']] = TRUE;
    }
    if ($app['ValetPolicy']) {
      $valet_app[$app['AppId']] = TRUE;
    }
  }
  if (empty($app_options)) {
    $form['ajax']['error'] =
      array('#value' => t('Mobile APPs yet to be configured, impossible to continue.').'<p>');
    $form['ajax']['cancel'] =
      array('#type' => 'image_button',
	    '#src' => drupal_get_path('module', 'anai').'/cancel.png',
	    '#submit' => array('chpmob_add_form_submit_cancel'));
    return $form;
  }

  // Layout apps options
  if (!isset($form_state['storage']['ajax']['AppId'])) {
    $form_state['storage']['ajax']['AppId'] = key($app_options);
  }
  $form['ajax']['AppId'] =
    array('#type' => 'select',
	  '#title' => t('App'),
	  '#options' => $app_options,
	  '#default_value' => $form_state['storage']['ajax']['AppId'],
	  '#ahah' => array('event' => 'change',
			   'path' => ahah_helper_path(array('ajax')),
			   'wrapper' => 'ajax-wrapper'));

  // Create enforcer options
  if (isset($enforcer_app[$form_state['storage']['ajax']['AppId']])) {
    // Create enforcer options
    $options = array();
    foreach (chpprop_retrieve_enforcers($user->uid, $company_id)
	     as $enforcer_id => $enforcer) {
      $options[$enforcer_id] =
	decode_entities($enforcer['data']['Alias']).', '.
	decode_entities($enforcer['data']['Street']).', '.
	decode_entities($enforcer['data']['City']);
    }

    if (empty($options)) {
      $form['ajax']['error'] =
	array('#value' => t('Enforcers yet to be configured on lot, impossible to continue.').'<p>');
      $form['ajax']['cancel'] =
	array('#type' => 'image_button',
	      '#src' => drupal_get_path('module', 'anai').'/cancel.png',
	      '#submit' => array('chptick_add_form_submit_cancel'));
      return $form;
    }

    // Layout enforcer options
    if (!isset($form_state['storage']['ajax']['EnforcerId'])) {
      $form_state['storage']['ajax']['EnforcerId'] = key($options);
    }
    $form['ajax']['EnforcerId'] =
      array('#type' => 'select',
	    '#title' => t('Enforcer'),
	    '#options' => $options,
	    '#default_value' => $form_state['storage']['ajax']['EnforcerId']);

  }

  // Layout key type including demo keys
  $options = array();
  $options['Regular'] = t('Regular key');
  if (user_access('anai chp demo mobiles')) {
    $options['Demo'] = t('Demo key');
  }
  if (1 < count($options)) {
    if (!isset($form_state['storage']['ajax']['KeyType'])) {
      $form_state['storage']['ajax']['KeyType'] = key($options);
    }
    $form['ajax']['KeyType'] =
      array('#type' => 'radios',
	    '#title' => t('Key type'),
	    '#options' => $options,
	    '#default_value' => $form_state['storage']['ajax']['KeyType'],
	    '#ahah' => array('event' => 'change',
			     'path' => ahah_helper_path(array('ajax')),
			     'wrapper' => 'ajax-wrapper'));
  } else {
    $form['ajax']['KeyType'] =
      array('#type' => 'hidden',
	    '#value' => $form_state['storage']['ajax']['KeyType']);
  }

  // Property/Lot selector
  $form['ajax']['property'] = array('#type' => 'fieldset', '#title' => t('Assignment'));

  // Layout property options
  if (isset($form_state['storage']['ajax']['property']['PropertyId']) and
      !in_array($form_state['storage']['ajax']['property']['PropertyId'],
		array_keys($property_options))) {
    unset($form_state['storage']['ajax']['property']['PropertyId']);
  }
  if (!isset($form_state['storage']['ajax']['property']['PropertyId'])) {
    $form_state['storage']['ajax']['property']['PropertyId'] = key($property_options);
  }
  if (1 < count($property_options)) {
    $form['ajax']['property']['PropertyId'] =
      array('#type' => 'select',
	    '#title' => t('Property'),
	    '#options' => $property_options,
	    '#default_value' => $form_state['storage']['ajax']['property']['PropertyId'],
	    '#ahah' => array('event' => 'change',
			     'path' => ahah_helper_path(array('ajax')),
			     'wrapper' => 'ajax-wrapper'));
  }

  $property_id = $form_state['storage']['ajax']['property']['PropertyId'];

  // Create and validate lot options based on selected property
  $enforcements = array();
  $profiles = array();
  $lot_options = array();
  if (isset($policies[$property_id])) {
    foreach ($policies[$property_id] as $lot_id => $policy) {
      // Make sure enforcement app only used when lot is enforced with mobile units
      if (isset($enforcer_app[$form_state['storage']['ajax']['AppId']])) {
	if (empty($policy['data']['EnforcementId'])) {
	  continue;
	}
	if (!isset($enforcements[$policy['data']['EnforcementId']])) {
	  $enforcements[$policy['data']['EnforcementId']] =
	    chdbprop_get_enforcement($policy['data']['EnforcementId']);
	}
	$enforcement = $enforcements[$policy['data']['EnforcementId']];
	if ($enforcement['Ticketing'] == 0 and
	    $enforcement['Booting'] == 0 and
	    $enforcement['Towing'] == 0) {
	  continue;
	}
	if ($enforcement['MobilePolicy'] == 0) {
	  continue;
	}
      }
      // Make sure valet app only used when lot contains valet permits
      if (isset($valet_app[$form_state['storage']['ajax']['AppId']])) {
	if (!isset($profiles[$policy['data']['ProfileId']])) {
	  $profiles[$policy['data']['ProfileId']] =
	    chdbprop_get_profile($policy['data']['ProfileId']);
	}
	$profile = $profiles[$policy['data']['ProfileId']];
	if ($profile['ValetPolicy'] == 0) {
	  continue;
	}
	if ($profile['ValUnitsPolicy'] == 0) {
	  continue;
	}
      }
      $lot_options[$lot_id] = decode_entities($policy['data']['Alias']);
    }
  }
  if (empty($lot_options)) {
    $form['ajax']['property']['error'] =
      array('#value' => '<p>'.t('Lot yet to be configured for selected app, impossible to continue.').'<p>');
    $form['ajax']['cancel'] =
      array('#type' => 'image_button',
	    '#src' => drupal_get_path('module', 'anai').'/cancel.png',
	    '#submit' => array('chpmob_add_form_submit_cancel'));

    return $form;
  }

  // Layout lot options
  if (isset($form_state['storage']['ajax']['property']['LotId']) and
      !in_array($form_state['storage']['ajax']['property']['LotId'],
		array_keys($lot_options))) {
    unset($form_state['storage']['ajax']['property']['LotId']);
  }
  if (!isset($form_state['storage']['ajax']['property']['LotId'])) {
    $form_state['storage']['ajax']['property']['LotId'] = key($lot_options);
  }
  if (1 < count($lot_options)) {
    $form['ajax']['property']['LotId'] =
      array('#type' => 'select',
	    '#title' => t('Lot'),
	    '#options' => $lot_options,
	    '#default_value' => $form_state['storage']['ajax']['property']['LotId']);
  }

  $lot_id = $form_state['storage']['ajax']['property']['LotId'];

  if (1 < count($property_options) or 1 < count($lot_options)) {
    $form['ajax']['property']['addbtn'] = array('#type' => 'button', '#value' => t('Add'));
    $form['ajax']['property']['clearbtn'] = array('#type' => 'button', '#value' => t('Clear'));
    $form['ajax']['property']['allbtn'] = array('#type' => 'button', '#value' => t('All'));
    if (!isset($form_state['storage']['ajax']['property']['List'])) {
      $list = array();
      $form_state['storage']['ajax']['property']['List'] = $list;
    } else {
      $list = unserialize($form_state['storage']['ajax']['property']['List']);
    }

    if (strpos($form_state['clicked_button']['#id'], 'addbtn') !== FALSE) {
      $list[$property_id][$lot_id] = TRUE;
    }
    if (strpos($form_state['clicked_button']['#id'], 'clearbtn') !== FALSE) {
      $list = array();
    }
    if (strpos($form_state['clicked_button']['#id'], 'allbtn') !== FALSE) {
      foreach ($property_options as $propkey => $propvalue) {
	foreach ($policies[$propkey] as $lotkey => $policy) {
	  // Make sure enforcement app only used when lot is enforced with mobile units
	  if (isset($enforcer_app[$form_state['storage']['ajax']['AppId']])) {
	    if (empty($policy['data']['EnforcementId'])) {
	      continue;
	    }
	    if (!isset($enforcements[$policy['data']['EnforcementId']])) {
	      $enforcements[$policy['data']['EnforcementId']] =
		chdbprop_get_enforcement($policy['data']['EnforcementId']);
	    }
	    $enforcement = $enforcements[$policy['data']['EnforcementId']];
	    if ($enforcement['Ticketing'] == 0 and
		$enforcement['Booting'] == 0 and
		$enforcement['Towing'] == 0) {
	      continue;
	    }
	    if ($enforcement['MobilePolicy'] == 0) {
	      continue;
	    }
	  }
	  // Make sure valet app only used when lot contains valet permits
	  if (isset($valet_app[$form_state['storage']['ajax']['AppId']])) {
	    if (!isset($profiles[$policy['data']['ProfileId']])) {
	      $profiles[$policy['data']['ProfileId']] =
		chdbprop_get_profile($policy['data']['ProfileId']);
	    }
	    $profile = $profiles[$policy['data']['ProfileId']];
	    if ($profile['ValetPolicy'] == 0) {
	      continue;
	    }
	    if ($profile['ValUnitsPolicy'] == 0) {
	      continue;
	    }
	  }
	  $list[$propkey][$lotkey] = TRUE;
	}
      }
    }
  } else {
    $list[$property_id][$lot_id] = TRUE;
  }

  $form['ajax']['property']['List'] = array('#type' => 'value', '#value' => serialize($list));

  $header = array(t('Property'), t('Lot'));
  $rows = array();
  foreach ($list as $property_id => $values) {
    foreach ($values as $lot_id => $value) {
      $rows[] = array($property_options[$property_id], $lot_options[$lot_id]);
    }
  }
  $form['ajax']['property']['ListView'] = array('#value' => theme_table($header, $rows));

  // Javascript date pickers for demo keys
  if ($form_state['storage']['ajax']['KeyType'] === 'Demo') {
    drupal_add_js
      ('(function ($) {
          Drupal.behaviors.ANAIchpmobileExpiry=function(context){
      	    $("#edit-ajax-Expiry:not(.Expiry-processed)",context)
              .addClass("Expiry-processed")
              .AnyTime_picker({format:"%Y-%m-%d 00:00:00",hideInput:true,placement:"inline",
                              labelTitle:"Expiry Date"});
          };
       }(jQuery));', 'inline');

    $form['ajax']['Expiry'] = array('#type' => 'textfield');
  }

  // Layout person
  $settings = array();
  $settings['tag'] = 'ajax';
  $settings['subtag'] = 'person';
  $settings['subframe'] = TRUE;
  $settings['subframetitle'] = t('Key owner');
  $settings['option']['companynameopt'] = $company_id;
  $settings['option']['skipnotrequired'] = TRUE;
  $settings['option']['skipemailnotification'] = TRUE;
  $settings['option']['skiplogin'] = TRUE;
  chpprop_produce_person($form, $form_state, $settings);

  // Save
  $form['ajax']['save'] =
    array('#type' => 'image_button',
	  '#src' => drupal_get_path('module', 'anai').'/save.png',
	  '#validate' => array('chpmob_add_form_validate_save'),
	  '#submit' => array('chpmob_add_form_submit_save'));

  $form['ajax']['cancel'] =
    array('#type' => 'image_button',
	  '#src' => drupal_get_path('module', 'anai').'/cancel.png',
	  '#submit' => array('chpmob_add_form_submit_cancel'));
  return $form;
}

function chpmob_add_form_validate_save($form, &$form_state) {
  if (isset($form_state['values']['ajax']['person']['FirstName']) and
      empty($form_state['values']['ajax']['person']['FirstName'])) {
    form_set_error('ajax][person][FirstName', 'First name field is required.');
    return;
  }
  if (isset($form_state['values']['ajax']['person']['LastName']) and
      empty($form_state['values']['ajax']['person']['LastName'])) {
    form_set_error('ajax][person][LastName', 'Last name field is required.');
    return;
  }
  if (isset($form_state['values']['ajax']['person']['Street']) and
      empty($form_state['values']['ajax']['person']['Street'])) {
    form_set_error('ajax][person][Street', 'Street field is required.');
    return;
  }
  if (isset($form_state['values']['ajax']['person']['City']) and
      empty($form_state['values']['ajax']['person']['City'])) {
    form_set_error('ajax][person][City', 'City field is required.');
    return;
  }
  if (isset($form_state['values']['ajax']['person']['PostalCode']) and
      empty($form_state['values']['ajax']['person']['PostalCode'])) {
    form_set_error('ajax][person][PostalCode', 'Postal code field is required.');
    return;
  }
  if (isset($form_state['values']['ajax']['person']['Phone']) and
      empty($form_state['values']['ajax']['person']['Phone'])) {
    form_set_error('ajax][person][Phone', 'Phone field is required.');
    return;
  }
  if (isset($form_state['values']['ajax']['person']['Email']) and
      empty($form_state['values']['ajax']['person']['Email'])) {
    form_set_error('ajax][person][Email', 'Email field is required.');
    return;
  }
  if (isset($form_state['values']['ajax']['person']['Department']) and
      empty($form_state['values']['ajax']['person']['Department'])) {
    form_set_error('ajax][person][Department', 'Department field is required.');
    return;
  }
  if (isset($form_state['values']['ajax']['person']['Title']) and
      empty($form_state['values']['ajax']['person']['Title'])) {
    form_set_error('ajax][person][Title', 'Title field is required.');
    return;
  }
  if (isset($form_state['values']['ajax']['person']['Role']) and
      empty($form_state['values']['ajax']['person']['Role'])) {
    form_set_error('ajax][person][Role', 'Role field is required.');
    return;
  }
  // Check GEO Coding
  include_once drupal_get_path('module', 'location') .'/location.inc';
  $location = array();
  $location['street'] = $form_state['values']['ajax']['person']['Street'];
  $location['city'] = $form_state['values']['ajax']['person']['City'];
  $location['postal_code'] = $form_state['values']['ajax']['person']['PostalCode'];
  $location['province'] = $form_state['values']['ajax']['person']['Province'];
  $location['country'] = $form_state['values']['ajax']['person']['Country'];
  $pos = location_latlon_exact($location);
  if ($pos) {
    $form_state['storage']['ajax']['person']['Lat'] = $pos['lat'];
    $form_state['storage']['ajax']['person']['Lon'] = $pos['lon'];
  }
}

function chpmob_add_form_submit_cancel($form, &$form_state) {
  unset($form_state['storage']);
  $form_state['redirect'] = 'chpmoblist';
}

function chpmob_create_new_key() {
  $random = chpprop_genRandomString40();
  $agent_id = strtoupper(substr($random, 0, 10));
  $agent_id .= "-";
  $agent_id .= strtoupper(substr($random, 10, 10));
  $agent_id .= "-";
  $agent_id .= strtoupper(substr($random, 20, 10));
  $agent_id .= "-";
  $agent_id .= strtoupper(substr($random, 30, 10));
  return $agent_id;
}

function chpmob_add_form_submit_save($form, &$form_state) {
  global $user;
  $company_id = $form_state['storage']['ajax']['CompanyId'];
  $app_id = $form_state['values']['ajax']['AppId'];
  $agent_id = chpmob_create_new_key();

  if (isset($form_state['values']['ajax']['person']['PrenameId'])) {
    $prename_id = $form_state['values']['ajax']['person']['PrenameId'];
  } else {
    $prename_id = NULL;
  }

  if (isset($form_state['values']['ajax']['person']['FirstName'])) {
    $firstname = check_plain($form_state['values']['ajax']['person']['FirstName']);
  } else {
    $firstname = NULL;
  }

  if (isset($form_state['values']['ajax']['person']['MiddleName'])) {
    $middlename = check_plain($form_state['values']['ajax']['person']['MiddleName']);
  } else {
    $middlename = NULL;
  }

  if (isset($form_state['values']['ajax']['person']['LastName'])) {
    $lastname = check_plain($form_state['values']['ajax']['person']['LastName']);
  } else {
    $lastname = NULL;
  }

  if (isset($form_state['values']['ajax']['person']['SufnameId'])) {
    $sufname_id = $form_state['values']['ajax']['person']['SufnameId'];
  } else {
    $sufname_id = NULL;
  }

  if (isset($form_state['values']['ajax']['person']['Street'])) {
    $street = check_plain($form_state['values']['ajax']['person']['Street']);
  } else {
    $street = NULL;
  }

  if (isset($form_state['values']['ajax']['person']['City'])) {
    $city = check_plain($form_state['values']['ajax']['person']['City']);
  } else {
    $city = NULL;
  }

  if (isset($form_state['values']['ajax']['person']['PostalCode'])) {
    $postalcode = check_plain($form_state['values']['ajax']['person']['PostalCode']);
  } else {
    $postalcode = NULL;
  }

  if (isset($form_state['values']['ajax']['person']['Province'])) {
    $province = $form_state['values']['ajax']['person']['Province'];
  } else {
    $province = NULL;
  }

  if (isset($form_state['values']['ajax']['person']['Country'])) {
    $country = chpprop_retrieve_country($form_state['values']['ajax']['person']['Country']);
  } else {
    $country = NULL;
  }

  if (isset($form_state['values']['ajax']['person']['Phone'])) {
    $phone = check_plain($form_state['values']['ajax']['person']['Phone']);
  } else {
    $phone = NULL;
  }

  if (isset($form_state['values']['ajax']['person']['Email'])) {
    $email = check_plain($form_state['values']['ajax']['person']['Email']);
  } else {
    $email = NULL;
  }

  if (isset($form_state['values']['ajax']['person']['Role'])) {
    $role = check_plain($form_state['values']['ajax']['person']['Role']);
  } else {
    $role = NULL;
  }

  if (isset($form_state['values']['ajax']['person']['Department'])) {
    $department = check_plain($form_state['values']['ajax']['person']['Department']);
  } else {
    $department = NULL;
  }

  if (isset($form_state['values']['ajax']['person']['Title'])) {
    $title = check_plain($form_state['values']['ajax']['person']['Title']);
  } else {
    $title = NULL;
  }

  if (isset($form_state['storage']['ajax']['person']['Lat'])) {
    $lat = $form_state['storage']['ajax']['person']['Lat'];
  } else {
    $lat = NULL;
  }

  if (isset($form_state['storage']['ajax']['person']['Lon'])) {
    $lon = $form_state['storage']['ajax']['person']['Lon'];
  } else {
    $lon = NULL;
  }

  if (isset($form_state['values']['ajax']['Expiry'])) {
    $expiry = $form_state['values']['ajax']['Expiry'];
  } else {
    $expiry = NULL;
  }

  if (isset($form_state['values']['ajax']['EnforcerId'])) {
    $enforcer_id = $form_state['values']['ajax']['EnforcerId'];
  } else {
    $enforcer_id = NULL;
  }

  if (chdbprop_insert_agent
      ($user->uid, $company_id, $agent_id, $app_id, $enforcer_id,
       $lat, $lon,
       $prename_id, $firstname, $middlename, $lastname, $sufname_id,
       $street, $city, $postalcode, $province, $country,
       $phone, $email,
       $role, $department, $title,
       $expiry,
       $id)) {
    drupal_set_message('Could not insert mobile key', 'error');
    return;
  }

  $list = unserialize($form_state['values']['ajax']['property']['List']);
  if (!empty($list)) {
    foreach ($list as $propkey => $values) {
      foreach ($values as $lotkey => $value) {
	if ($value) {
	  if (chdbprop_insert_agentprop
	      ($company_id, $agent_id,
	       $propkey, $lotkey,
	       $id)) {
	    drupal_set_message('Could not attach to property/lot', 'error');
	    return;
	  }
	}
      }
    }
  }

  unset($form_state['storage']);
  $form_state['redirect'] = 'chpmoblist';
}



/**********
 ********** Mobiles list
 ********** Address: chomoblist
 ********** Access:  'anai chp list mobiles'
 *********/



function chpmob_list_form($form_state) {
  if ($form_state['storage']['mobile_edit']) {
    return chpmob_list_edit_form($form_state);
  }

  drupal_set_title(t('Equipment and mobile unit keys'));

  global $user;
  $account = user_load(array('uid' => $user->uid));
  $form = array();
  ahah_helper_register($form, $form_state);

  $settings = array();
  $settings['tag'] = 'ajax';
  $settings['show_companies'] = TRUE;
  if ((!in_array('Admin', array_values($account->roles)) and $account->status) and
      $account->uid != 1) {
    $settings['show_regions'] = TRUE;
    $settings['show_clients'] = TRUE;
  }
  $settings['show_properties'] = TRUE;
  $settings['show_lots'] = TRUE;
  $settings['buttons']['back']['submit'] = 'chpmob_list_form_submit_back';
  if (user_access('anai chp add mobiles')) {
    $settings['buttons']['add']['submit'] = 'chpmob_list_form_submit_add';
  }
  if (user_access('anai chp mobile key file')) {
    $settings['buttons']['keys']['title'] = t('Key file generator');
    $settings['buttons']['keys']['submit'] = 'chpmob_list_form_submit_keys';
  }
  if (chpprop_produce_header(&$form, &$form_state, $settings)) {
    return $form;
  }
  $company_id = $form_state['storage']['ajax']['CompanyId'];
  $property_id = $form_state['storage']['ajax']['PropertyId'];
  $lot_id = $form_state['storage']['ajax']['LotId'];

  $policy = $form_state['storage']['ajax']['Lots'][$property_id][$lot_id];
  $profile_id = $policy['data']['ProfileId'];
  $profile = chdbprop_get_profile($profile_id);

  $enforcement_id = $policy['data']['EnforcementId'];
  $enforcement = array();
  if (!empty($enforcement_id)) {
    $enforcement = chdbprop_get_enforcement($enforcement_id);
  }

  $equipment_id = $policy['data']['EquipmentId'];
  $equipment = array();
  if (!empty($equipment_id)) {
    $equipment = chdbprop_get_equipment($equipment_id);
  }

  $options = array();
  $apps = array();
  foreach (chdbprop_get_all_apps() as $app) {
    if ((chpprop_property_allowed_valet_mobiles($profile) and $app['ValetPolicy']) or
	(chpprop_property_allowed_enforcement_mobiles($enforcement) and $app['EnforcementPolicy']) or
	(chpprop_property_allowed_equipment_mobiles($equipment) and ($app['SecureparkPolicy'] or
								     $app['VideoparkPolicy']))) {
      $options[$app['AppId']] = decode_entities($app['Alias']);
      $apps[$app['AppId']] = $app;
    }
  }
  if (empty($options)) {
    // No point of showing more since no keys are applicable on lot
    return $form;
  }

  if (isset($form_state['storage']['ajax']['AppId']) and
      !in_array($form_state['storage']['ajax']['AppId'],
		array_keys($options))) {
    unset($form_state['storage']['ajax']['AppId']);
  }
  if (!isset($form_state['storage']['ajax']['AppId'])) {
    $form_state['storage']['ajax']['AppId'] = key($options);
  }
  $form['ajax']['AppId'] =
    array('#type' => 'radios',
	  '#title' => t('AppId'),
	  '#options' => $options,
	  '#default_value' => $form_state['storage']['ajax']['AppId'],
	  '#ahah' => array('event' => 'change',
			   'path' => ahah_helper_path(array('ajax')),
			   'wrapper' => 'ajax-wrapper'));

  $agents = chpprop_retrieve_agents($user->uid,
				    $company_id,
				    $form_state['storage']['ajax']['AppId'],
				    $property_id, $lot_id);

  $unassigned = array();
  foreach (chpprop_retrieve_agents($user->uid,
				   $company_id,
				   $form_state['storage']['ajax']['AppId']) as $agent_id => $agent) {
    if (isset($agents[$agent_id])) {
      continue;
    }
    $unassigned[$agent_id] = $agent;
  }

  $form['ajax']['filter'] = array('#type' => 'fieldset', '#title' => t('Assigned keys'));
  if (empty($agents)) {
    $form['ajax']['filter']['list'] = array('#value' => t('Empty.'));
  } else {
    if ($apps[$form_state['storage']['ajax']['AppId']]['SecureparkPolicy'] or
	$apps[$form_state['storage']['ajax']['AppId']]['VideoparkPolicy']) {
      $form['ajax']['filter']['list'] = chpmob_list_lpr_table_form($agents, $property_id);
    } else {
      $form['ajax']['filter']['list'] = chpmob_list_table_form($agents);
    }
  }

  if (!empty($unassigned)) {
    if ($apps[$form_state['storage']['ajax']['AppId']]['SecureparkPolicy'] or
	$apps[$form_state['storage']['ajax']['AppId']]['VideoparkPolicy']) {
      $form['ajax']['filter']['list'] = chpmob_list_lpr_table_form($unassigned, $property_id);
    } else {
      $form['ajax']['all'] =
	array('#type' => 'fieldset',
	      '#title' => t('Unassigned keys'),
	      '#collapsible' => TRUE,
	      '#collapsed' => TRUE);
      $form['ajax']['all']['list'] = chpmob_list_table_form($unassigned);
    }
  }

  return $form;
}

function chpmob_list_form_submit_add($form, &$form_state) {
  unset($form_state['storage']);
  $form_state['redirect'] = 'chpmobadd';
}

function chpmob_list_form_submit_keys($form, &$form_state) {
  unset($form_state['storage']);
  $form_state['redirect'] = 'chpmobkeys';
}

function chpmob_list_form_submit_back($form, &$form_state) {
  unset($form_state['storage']);
  $form_state['redirect'] = 'front_page';
}

function chpmob_list_table_form($entries) {
  global $user;
  $form['db'] =
    array('#type' => 'markup', '#value' => '',
	  '#theme' => 'chpmob_list_mobile_table');

  if (user_access('anai chp edit mobiles')) {
    $readonly = FALSE;
  } else {
    $readonly = TRUE;
  }

  $first = current($entries);
  $prenames = array();
  foreach (chdbadmin_get_prenameopt($first['data']['CompanyId']) as $opt) {
    $prenames[$opt['PrenameId']] = decode_entities($opt['Alias']);
  }
  if (empty($prenames)) {
    foreach (chdbadmin_get_prenameopt() as $opt) {
      $prenames[$opt['PrenameId']] = decode_entities($opt['Alias']);
    }
  }
  $sufnames = array();
  foreach (chdbadmin_get_sufnameopt($first['data']['CompanyId']) as $opt) {
    $sufnames[$opt['SufnameId']] = decode_entities($opt['Alias']);
  }
  if (empty($sufnames)) {
    foreach (chdbadmin_get_sufnameopt() as $opt) {
      $sufnames[$opt['SufnameId']] = decode_entities($opt['Alias']);
    }
  }

  $looper = 0;
  foreach ($entries as $entry) {
    $created = chpuser_datetime_utc_to_usertimezone($entry['data']['CreateTime']);
    $form['db']['time_'.$looper] = array('#value' => $created->format("M j,y H:i"));

    $name = isset($prenames[$entry['data']['PrenameId']]) ? $prenames[$entry['data']['PrenameId']].' ' : '';
    $name .= !empty($entry['data']['FirstName']) ? decode_entities($entry['data']['FirstName']).' ' : '';
    $name .= !empty($entry['data']['MiddleName']) ? decode_entities($entry['data']['MiddleName']).' ' : '';
    $name .= !empty($entry['data']['LastName']) ? decode_entities($entry['data']['LastName']).' ' : '';
    $name .= isset($sufnames[$entry['data']['SufnameId']]) ? $sufnames[$entry['data']['SufnameId']].' ' : '';
    $form['db']['name_'.$looper] = array('#value' => $name);

    $form['db']['key_'.$looper] = array('#value' => $entry['data']['AgentId']);

    if (!empty($entry['data']['ExpiryTime'])) {
      $expires = chpuser_datetime_utc_to_usertimezone($entry['data']['ExpiryTime']);
      $form['db']['expires_'.$looper] = array('#value' => $expires->format("M j,y H:i"));
    } else {
      $form['db']['expires_'.$looper] = array('#value' => t('Never'));
    }

    $form['db']['suspended_'.$looper] =
      array('#value' => $entry['data']['Suspended'] ? t('Yes') : t('No'));

    if ($readonly) {
      $form['db']['edit_'.$looper] = array('#value' => '');
    } else {
      $form['db']['edit_'.$looper] =
	array('#type' => 'image_button',
	      '#src' => drupal_get_path('module', 'anai').'/editsmall.png',
	      '#name' => 'op_edit'.$entry['data']['Id'],
	      '#submit' => array('chpmob_list_form_submit'));
    }
    $looper++;
  }
  return $form;
}

function theme_chpmob_list_mobile_table($form) {
  // Table Header
  $header = array(t('Created'), t('Name'), t('Key'), t('Expires'), t('Suspended'), '');
  $rows = array();
  // Table Rows
  foreach ($form as $key => $value) {
    if (!strstr($key, 'time_')) {
      continue;
    }
    $looper = substr($key, strlen('time_'));
    $rows[] = array(drupal_render($form['time_'.$looper]),
                    drupal_render($form['name_'.$looper]),
                    drupal_render($form['key_'.$looper]),
                    drupal_render($form['expires_'.$looper]),
                    drupal_render($form['suspended_'.$looper]),
                    array('data' => drupal_render($form['edit_'.$looper]),
			  'width' => 1, 'height' => 1),
                    );
  }
  // Render Table
  return theme_table($header, $rows);
}

function chpmob_list_lpr_table_form($entries, $property_id) {
  global $user;
  $form['db'] =
    array('#type' => 'markup', '#value' => '',
	  '#theme' => 'chpmob_list_lpr_table');

  if (user_access('anai chp edit mobiles')) {
    $readonly = FALSE;
  } else {
    $readonly = TRUE;
  }

  $lanes = array();
  $looper = 0;
  foreach ($entries as $entry) {
    $created = chpuser_datetime_utc_to_usertimezone($entry['data']['CreateTime']);
    $form['db']['time_'.$looper] = array('#value' => $created->format("M j,y H:i"));

    // TBD (make list)
    $lanes = chdbprop_get_lanes($property_id, $entry['data']['ClusterId']);
    $rows = array();
    foreach ($lanes as $lane) {
      $rows[] = decode_entities($lane['Alias']);
    }

    $form['db']['lane_'.$looper] = array('#value' => theme_item_list($rows));

    $form['db']['key_'.$looper] = array('#value' => $entry['data']['AgentId']);

    if ($readonly) {
      $form['db']['edit_'.$looper] = array('#value' => '');
    } else {
      $form['db']['edit_'.$looper] =
	array('#type' => 'image_button',
	      '#src' => drupal_get_path('module', 'anai').'/editsmall.png',
	      '#name' => 'op_edit'.$entry['data']['Id'],
	      '#submit' => array('chpmob_list_form_submit'));
    }
    $looper++;
  }
  return $form;
}

function theme_chpmob_list_lpr_table($form) {
  // Table Header
  $header = array(t('Created'), t('Lanes'), t('Key'), '');
  $rows = array();
  // Table Rows
  foreach ($form as $key => $value) {
    if (!strstr($key, 'time_')) {
      continue;
    }
    $looper = substr($key, strlen('time_'));
    $rows[] = array(drupal_render($form['time_'.$looper]),
                    drupal_render($form['lane_'.$looper]),
                    drupal_render($form['key_'.$looper]),
                    array('data' => drupal_render($form['edit_'.$looper]),
			  'width' => 1, 'height' => 1),
                    );
  }
  // Render Table
  return theme_table($header, $rows);
}

function chpmob_list_edit_form($form_state) {
  if ($form_state['storage']['confirm_delete_mobile']) {
    return confirm_form
      ($form, 'Are you sure?', 'chpmoblist',
       'The mobile key will be deleted from the system.');
  }

  global $user;
  $form = array();
  ahah_helper_register($form, $form_state);

  $id = $form_state['storage']['id'];
  $agent = chdbprop_get_agent_id($id);
  $company_id = $agent['CompanyId'];
  $agent_id = $agent['AgentId'];
  $app_id = $agent['AppId'];

  drupal_set_title(t('Edit key'));

  // Create and validate property options
  $property_options = array();
  $properties = chpprop_retrieve_properties($user->uid, $company_id);
  if (!empty($properties)) {
    foreach ($properties as $property_id => $property) {
      $property_options[$property_id] =
	decode_entities($property['data']['Alias']).', '.
	decode_entities($property['data']['Street']).', '.
	decode_entities($property['data']['City']);
    }
  }
  $properties = NULL;
  if (empty($property_options)) {
    $form['error'] = array('#value' => '<p>'.t('Property missing.').'<p>');
    $form['cancel'] =
      array('#type' => 'image_button',
	    '#src' => drupal_get_path('module', 'anai').'/cancel.png',
	    '#submit' => array('chpmob_list_edit_form_submit_cancel'));

    return $form;
  }

  // Create and validate policies options, used later for lot selection
  $policies = chpprop_retrieve_policies($user->uid, $company_id);
  if (empty($policies)) {
    $form['error'] = array('#value' => '<p>'.t('Lot missing.').'<p>');
    $form['cancel'] =
      array('#type' => 'image_button',
	    '#src' => drupal_get_path('module', 'anai').'/cancel.png',
	    '#submit' => array('chpmob_list_edit_form_submit_cancel'));
    return $form;
  }

  $app = chdbprop_get_mobileapp($app_id);

  // Layout suspension option
  $form['Suspended'] =
    array('#type' => 'checkbox',
	  '#title' => t('Temporary suspended'),
	  '#default_value' => $agent['Suspended'],
	  '#description' =>
	  t('The unit will not be able to connect while suspended'));

  $form['ajax'] =
    array('#prefix' => '<div id="ajax-wrapper">',
	  '#suffix' => '</div>',
	  '#tree' => TRUE);

  // Property/Lot selector
  if ($app['EnforcementPolicy'] or $app['ValetPolicy']) {
    $form['ajax']['property'] = array('#type' => 'fieldset', '#title' => t('Assignment'));

    // Layout property options
    if (isset($form_state['storage']['ajax']['property']['PropertyId']) and
	!in_array($form_state['storage']['ajax']['property']['PropertyId'],
		  array_keys($property_options))) {
      unset($form_state['storage']['ajax']['property']['PropertyId']);
    }
    if (!isset($form_state['storage']['ajax']['property']['PropertyId'])) {
      $form_state['storage']['ajax']['property']['PropertyId'] = key($property_options);
    }
    if (1 < count($property_options)) {
      $form['ajax']['property']['PropertyId'] =
	array('#type' => 'select',
	      '#title' => t('Property'),
	      '#options' => $property_options,
	      '#default_value' => $form_state['storage']['ajax']['property']['PropertyId'],
	      '#ahah' => array('event' => 'change',
			       'path' => ahah_helper_path(array('ajax')),
			       'wrapper' => 'ajax-wrapper'));
    }

    $property_id = $form_state['storage']['ajax']['property']['PropertyId'];

    // Create and validate lot options based on selected property
    $lot_options = array();
    if (isset($policies[$property_id])) {
      foreach ($policies[$property_id] as $lot_id => $policy) {
	// Make sure enforcement app only used when lot is enforced with mobile units
	if ($app['EnforcementPolicy']) {
	  if (empty($policy['data']['EnforcementId'])) {
	    continue;
	  }
	  if (!isset($enforcements[$policy['data']['EnforcementId']])) {
	    $enforcements[$policy['data']['EnforcementId']] =
	      chdbprop_get_enforcement($policy['data']['EnforcementId']);
	  }
	  $enforcement = $enforcements[$policy['data']['EnforcementId']];
	  if ($enforcement['Ticketing'] == 0 and
	      $enforcement['Booting'] == 0 and
	      $enforcement['Towing'] == 0) {
	    continue;
	  }
	  if ($enforcement['MobilePolicy'] == 0) {
	    continue;
	  }
	}
	// Make sure valet app only used when lot contains valet permits
	if ($app['ValetPolicy']) {
	  if (!isset($profiles[$policy['data']['ProfileId']])) {
	    $profiles[$policy['data']['ProfileId']] =
	      chdbprop_get_profile($policy['data']['ProfileId']);
	  }
	  $profile = $profiles[$policy['data']['ProfileId']];
	  if ($profile['ValetPolicy'] == 0) {
	    continue;
	  }
	  if ($profile['ValUnitsPolicy'] == 0) {
	    continue;
	  }
	}
	$lot_options[$lot_id] = decode_entities($policy['data']['Alias']);
      }
    }

    if (empty($lot_options)) {
      $form['ajax']['property']['error'] =
	array('#value' => '<p>'.t('Lot yet to be configured for selected app, impossible to continue.').'<p>');
      $form['ajax']['cancel'] =
	array('#type' => 'image_button',
	      '#src' => drupal_get_path('module', 'anai').'/cancel.png',
	      '#submit' => array('chpmob_list_edit_form_submit_cancel'));
      return $form;
    }

    // Layout lot options
    if (isset($form_state['storage']['ajax']['property']['LotId']) and
	!in_array($form_state['storage']['ajax']['property']['LotId'],
		  array_keys($lot_options))) {
      unset($form_state['storage']['ajax']['property']['LotId']);
    }
    if (!isset($form_state['storage']['ajax']['property']['LotId'])) {
      $form_state['storage']['ajax']['property']['LotId'] = key($lot_options);
    }
    if (1 < count($lot_options)) {
      $form['ajax']['property']['LotId'] =
	array('#type' => 'select',
	      '#title' => t('Lot'),
	      '#options' => $lot_options,
	      '#default_value' => $form_state['storage']['ajax']['property']['LotId']);
    }

    $lot_id = $form_state['storage']['ajax']['property']['LotId'];

    if (1 < count($property_options) or 1 < count($lot_options)) {
      $form['ajax']['property']['addbtn'] = array('#type' => 'button', '#value' => t('Add'));
      $form['ajax']['property']['clearbtn'] = array('#type' => 'button', '#value' => t('Clear'));
      $form['ajax']['property']['allbtn'] = array('#type' => 'button', '#value' => t('All'));
      if (!isset($form_state['storage']['ajax']['property']['List'])) {
	$list = array();
	$props = chpprop_retrieve_agentprops($user->uid, $company_id, $agent_id);
	foreach ($props as $propkey => $values) {
	  foreach ($values as $lotkey => $value) {
	    $list[$propkey][$lotkey] = TRUE;
	  }
	}
	$form_state['storage']['ajax']['property']['List'] = $list;
      } else {
	$list = unserialize($form_state['storage']['ajax']['property']['List']);
      }

      if (strpos($form_state['clicked_button']['#id'], 'addbtn') !== FALSE) {
	$list[$property_id][$lot_id] = TRUE;
      }
      if (strpos($form_state['clicked_button']['#id'], 'clearbtn') !== FALSE) {
	$list = array();
      }
      if (strpos($form_state['clicked_button']['#id'], 'allbtn') !== FALSE) {
	foreach ($property_options as $propkey => $propvalue) {
	  foreach ($policies[$propkey] as $lotkey => $policy) {
	    // Make sure enforcement app only used when lot is enforced with mobile units
	    if ($app['EnforcementPolicy']) {
	      if (empty($policy['data']['EnforcementId'])) {
		continue;
	      }
	      if (!isset($enforcements[$policy['data']['EnforcementId']])) {
		$enforcements[$policy['data']['EnforcementId']] =
		  chdbprop_get_enforcement($policy['data']['EnforcementId']);
	      }
	      $enforcement = $enforcements[$policy['data']['EnforcementId']];
	      if ($enforcement['Ticketing'] == 0 and
		  $enforcement['Booting'] == 0 and
		  $enforcement['Towing'] == 0) {
		continue;
	      }
	      if ($enforcement['MobilePolicy'] == 0) {
		continue;
	      }
	    }
	    // Make sure valet app only used when lot contains valet permits
	    if ($app['ValetPolicy']) {
	      if (!isset($profiles[$policy['data']['ProfileId']])) {
		$profiles[$policy['data']['ProfileId']] =
		  chdbprop_get_profile($policy['data']['ProfileId']);
	      }
	      $profile = $profiles[$policy['data']['ProfileId']];
	      if ($profile['ValetPolicy'] == 0) {
		continue;
	      }
	      if ($profile['ValUnitsPolicy'] == 0) {
		continue;
	      }
	    }
	    $list[$propkey][$lotkey] = TRUE;
	  }
	}
      }
    } else {
      $list[$property_id][$lot_id] = TRUE;
    }

    $form['ajax']['property']['List'] = array('#type' => 'value', '#value' => serialize($list));

    $header = array(t('Property'), t('Lot'));
    $rows = array();
    foreach ($list as $property_id => $values) {
      foreach ($values as $lot_id => $value) {
	$rows[] = array($property_options[$property_id], $lot_options[$lot_id]);
      }
    }
    $form['ajax']['property']['ListView'] = array('#value' => theme_table($header, $rows));

    // Javascript date pickers for demo keys
    if ($form_state['storage']['ajax']['KeyType'] === 'Demo') {
      drupal_add_js
	('(function ($) {
          Drupal.behaviors.ANAIchpmobileExpiry=function(context){
      	    $("#edit-ajax-Expiry:not(.Expiry-processed)",context)
              .addClass("Expiry-processed")
              .AnyTime_picker({format:"%Y-%m-%d 00:00:00",hideInput:true,placement:"inline",
                              labelTitle:"Expiry Date"});
          };
       }(jQuery));', 'inline');

      $form['ajax']['Expiry'] =
	array('#type' => 'textfield',
	      '#default_value' => $agent['ExpiryTime']);
    }

    // Layout person
    $settings = array();
    $settings['tag'] = 'ajax';
    $settings['subtag'] = 'person';
    $settings['subframe'] = TRUE;
    $settings['subframetitle'] = t('Key owner');
    $settings['option']['companynameopt'] = $company_id;
    $settings['option']['skipnotrequired'] = TRUE;
    $settings['option']['skipemailnotification'] = TRUE;
    $settings['option']['skiplogin'] = TRUE;
    $settings['default']['PrenameId'] = $agent['PrenameId'];
    $settings['default']['FirstName'] = decode_entities($agent['FirstName']);
    $settings['default']['MiddleName'] = decode_entities($agent['MiddleName']);
    $settings['default']['LastName'] = decode_entities($agent['LastName']);
    $settings['default']['SufnameId'] = $agent['SufnameId'];
    $settings['default']['Department'] = decode_entities($agent['Department']);
    $settings['default']['Title'] = decode_entities($agent['Title']);
    $settings['default']['Role'] = decode_entities($agent['Role']);
    $settings['default']['Street'] = decode_entities($agent['Street']);
    $settings['default']['City'] = decode_entities($agent['City']);
    $settings['default']['PostalCode'] = decode_entities($agent['PostalCode']);
    $settings['default']['Province'] = $agent['Province'];
    $settings['default']['Country'] = $agent['Country'];
    $settings['default']['Phone'] = decode_entities($agent['Phone']);
    $settings['default']['Email'] = decode_entities($agent['Email']);
    chpprop_produce_person($form, $form_state, $settings);
  } else {
    /* if (!isset($form_state['storage']['ajax']['Renew'])) { */
    /*   $form_state['storage']['ajax']['Renew'] = FALSE; */
    /* } */
    /* $form['ajax']['Renew'] = */
    /*   array('#type' => 'checkbox', */
    /* 	    '#title' => t('Create new key'), */
    /* 	    '#default_value' => $form_state['storage']['ajax']['Renew'], */
    /* 	    '#description' => */
    /* 	    t('The unit must be configured with new key')); */
  }

  // Save
  $form['ajax']['save'] =
    array('#type' => 'image_button',
	  '#src' => drupal_get_path('module', 'anai').'/save.png',
	  '#validate' => array('chpmob_add_form_validate_save'),
	  '#submit' => array('chpmob_list_edit_form_submit_save'));

  $form['ajax']['cancel'] =
    array('#type' => 'image_button',
	  '#src' => drupal_get_path('module', 'anai').'/cancel.png',
	  '#submit' => array('chpmob_list_edit_form_submit_cancel'));

  if (user_access('anai chp delete mobiles') and
      ($app['EnforcementPolicy'] or $app['ValetPolicy'])) {
    $form['ajax']['delete'] =
      array('#type' => 'image_button',
	    '#src' => drupal_get_path('module', 'anai').'/delete.png',
	    '#submit' => array('chpmob_list_edit_form_submit_delete'));
  }
  return $form;
}

function chpmob_list_edit_form_submit_cancel($form, &$form_state) {
  unset($form_state['storage']);
  $form_state['redirect'] = 'chpmoblist';
}

function chpmob_list_edit_form_submit_delete($form, &$form_state) {
  $form_state['storage']['confirm_delete_mobile'] = TRUE;
}

function chpmob_list_edit_form_submit_save($form, &$form_state) {
  global $user;
  $id = $form_state['storage']['id'];
  $agent = chdbprop_get_agent_id($id);
  $company_id = $agent['CompanyId'];
  $agent_id = $agent['AgentId'];
  $app_id = $agent['AppId'];

 if (isset($form_state['values']['ajax']['person']['PrenameId'])) {
    $prename_id = $form_state['values']['ajax']['person']['PrenameId'];
  } else {
    $prename_id = NULL;
  }

  if (isset($form_state['values']['ajax']['person']['FirstName'])) {
    $firstname = check_plain($form_state['values']['ajax']['person']['FirstName']);
  } else {
    $firstname = NULL;
  }

  if (isset($form_state['values']['ajax']['person']['MiddleName'])) {
    $middlename = check_plain($form_state['values']['ajax']['person']['MiddleName']);
  } else {
    $middlename = NULL;
  }

  if (isset($form_state['values']['ajax']['person']['LastName'])) {
    $lastname = check_plain($form_state['values']['ajax']['person']['LastName']);
  } else {
    $lastname = NULL;
  }

  if (isset($form_state['values']['ajax']['person']['SufnameId'])) {
    $sufname_id = $form_state['values']['ajax']['person']['SufnameId'];
  } else {
    $sufname_id = NULL;
  }

  if (isset($form_state['values']['ajax']['person']['Street'])) {
    $street = check_plain($form_state['values']['ajax']['person']['Street']);
  } else {
    $street = NULL;
  }

  if (isset($form_state['values']['ajax']['person']['City'])) {
    $city = check_plain($form_state['values']['ajax']['person']['City']);
  } else {
    $city = NULL;
  }

  if (isset($form_state['values']['ajax']['person']['PostalCode'])) {
    $postalcode = check_plain($form_state['values']['ajax']['person']['PostalCode']);
  } else {
    $postalcode = NULL;
  }

  if (isset($form_state['values']['ajax']['person']['Province'])) {
    $province = $form_state['values']['ajax']['person']['Province'];
  } else {
    $province = NULL;
  }

  if (isset($form_state['values']['ajax']['person']['Country'])) {
    $country = chpprop_retrieve_country($form_state['values']['ajax']['person']['Country']);
  } else {
    $country = NULL;
  }

  if (isset($form_state['values']['ajax']['person']['Phone'])) {
    $phone = check_plain($form_state['values']['ajax']['person']['Phone']);
  } else {
    $phone = NULL;
  }

  if (isset($form_state['values']['ajax']['person']['Email'])) {
    $email = check_plain($form_state['values']['ajax']['person']['Email']);
  } else {
    $email = NULL;
  }

  if (isset($form_state['values']['ajax']['person']['Role'])) {
    $role = check_plain($form_state['values']['ajax']['person']['Role']);
  } else {
    $role = NULL;
  }

  if (isset($form_state['values']['ajax']['person']['Department'])) {
    $department = check_plain($form_state['values']['ajax']['person']['Department']);
  } else {
    $department = NULL;
  }

  if (isset($form_state['values']['ajax']['person']['Title'])) {
    $title = check_plain($form_state['values']['ajax']['person']['Title']);
  } else {
    $title = NULL;
  }

  if (isset($form_state['storage']['ajax']['person']['Lat'])) {
    $lat = $form_state['storage']['ajax']['person']['Lat'];
  } else {
    $lat = NULL;
  }

  if (isset($form_state['storage']['ajax']['person']['Lon'])) {
    $lon = $form_state['storage']['ajax']['person']['Lon'];
  } else {
    $lon = NULL;
  }

  if (isset($form_state['values']['ajax']['Expiry'])) {
    $expiry = $form_state['values']['ajax']['Expiry'];
  } else {
    $expiry = NULL;
  }

  if (isset($form_state['values']['Suspended'])) {
    $suspended = $form_state['values']['Suspended'];
  } else {
    $suspended = FALSE;
  }

  if (chdbprop_update_agent
      ($id, $user->uid, $lat, $lon,
       $prename_id, $firstname, $middlename, $lastname, $sufname_id,
       $street, $city, $postalcode, $province, $country,
       $phone, $email,
       $role, $department, $title,
       $expiry)) {
    drupal_set_message('Could not update agent', 'error');
    return;
  }

  if (chdbprop_update_agent_status
      ($id,
       $suspended)) {
    drupal_set_message('Could not update agent status', 'error');
    return;
  }

  $list = unserialize($form_state['values']['ajax']['property']['List']);

  // Delete property assignments for those not in new list
  $props = chpprop_retrieve_agentprops($user->uid, $company_id, $agent_id);

  foreach ($props as $propkey => $values) {
    foreach ($values as $lotkey => $value) {
      if (isset($list[$propkey][$lotkey])) {
	// Mark as not needing insertion
	$list[$propkey][$lotkey] = FALSE;
      } else {
	if (chdbprop_delete_agentprop
	    ($company_id, $agent_id,
	     $propkey, $lotkey)) {
	  drupal_set_message('Could not delete from property/lot', 'error');
	  return;
	}
      }
    }
  }

  // Insert new assigned properties
  if (!empty($list)) {
    foreach ($list as $propkey => $values) {
      foreach ($values as $lotkey => $value) {
	if ($value) {
	  if (chdbprop_insert_agentprop
	      ($company_id, $agent_id,
	       $propkey, $lotkey,
	       $id)) {
	    drupal_set_message('Could not attach to property/lot', 'error');
	    return;
	  }
	}
      }
    }
  }

  unset($form_state['storage']);
  $form_state['redirect'] = 'chpmoblist';
}

function chpmob_list_form_submit($form, &$form_state) {
  if ($form_state['storage']['confirm_delete_mobile']) {
    $id = $form_state['storage']['id'];
    $agent = chdbprop_get_agent_id($id);
    $company_id = $agent['CompanyId'];
    $agent_id = $agent['AgentIdd'];

    if (chdbprop_retire_agent_id
	($id,
	 $user->uid,
	 t('Deleted by user'))) {
      drupal_set_message('Could not delete agent', 'error');
      return;
    }

    if (chdbprop_delete_agentprops
	($company_id,
	 $agent_id)) {
      drupal_set_message('Could not delete agent on properties', 'error');
      return;
    }

    unset($form_state['storage']);
    $form_state['redirect'] = 'chpmoblist';
    return;
  }

  $id = -1;
  foreach ($form_state['values'] as $key => $value) {
    if (strstr($key, 'op_edit')) {
      $id = substr($key, strlen('op_edit'));
      break;
    }
  }
  if ($id > 0) {
    //drupal_set_message('Detailed edit of id:'.$id);
    $form_state['storage']['id'] = $id;
    $form_state['storage']['mobile_edit'] = TRUE;
    return;
  }
}



/**********
 ********** Mobile key file
 ********** Address: chpmobkeys
 ********** Access:  'anai chp mobile key file'
 *********/



function chpmob_keys_form($form_state) {
  drupal_set_title(t('Key file generator'));

  global $user;
  $account = user_load(array('uid' => $user->uid));
  $form = array();
  ahah_helper_register($form, $form_state);

  $settings = array();
  $settings['tag'] = 'ajax';
  $settings['show_companies'] = TRUE;
  if ((!in_array('Admin', array_values($account->roles)) and $account->status) and
      $account->uid != 1) {
    $settings['show_regions'] = TRUE;
    $settings['show_clients'] = TRUE;
  }
  $settings['buttons']['back']['submit'] = 'chpmob_keys_form_submit_back';
  if (chpprop_produce_header(&$form, &$form_state, $settings)) {
    return $form;
  }
  $company_id = $form_state['storage']['ajax']['CompanyId'];

  $options = array();
  foreach (chdbprop_get_all_apps() as $app) {
    $options[$app['AppId']] = decode_entities($app['Alias']);
  }
  if (empty($options)) {
    // No point of showing more since no keys are applicable on lot
    return $form;
  }

  if (!isset($form_state['storage']['ajax']['AppId'])) {
    $form_state['storage']['ajax']['AppId'] = key($options);
  }
  $form['ajax']['AppId'] =
    array('#type' => 'radios',
	  '#title' => t('AppId'),
	  '#options' => $options,
	  '#default_value' => $form_state['storage']['ajax']['AppId'],
	  '#ahah' => array('event' => 'change',
			   'path' => ahah_helper_path(array('ajax')),
			   'wrapper' => 'ajax-wrapper'));

  $agents = chpprop_retrieve_agents($user->uid, $company_id,
				    $form_state['storage']['ajax']['AppId']);
  if (empty($agents)) {
    $form['ajax']['empty'] =
      array('#value' => '<p>'.t('Empty. No mobile keys registered.').'<p>');
  } else {
    $form['ajax']['list'] = chpmob_keys_table_form($agents);
  }

  return $form;
}

function chpmob_keys_form_submit_back($form, &$form_state) {
  unset($form_state['storage']);
  $form_state['redirect'] = 'chpmoblist';
}

function chpmob_keys_table_form($entries) {
  global $user;
  $form['db'] =
    array('#type' => 'markup', '#value' => '',
	  '#theme' => 'chpmob_keys_table');

  $looper = 0;
  foreach ($entries as $entry) {
    $form['db']['key_'.$looper] = array('#value' => $entry['data']['AgentId']);

    $path = 'chpmobkeyfile/'.$entry['data']['CompanyId'].'/'.$entry['data']['AgentId'];
    $link = l(t('Generate file'), $path,
	      array('attributes' => array('target' => '_blank')));
    $form['db']['link_'.$looper] = array('#value' => $link);
    $looper++;
  }
  return $form;
}

function theme_chpmob_keys_table($form) {
  // Table Header
  $header = array('Key', 'Link');
  $rows = array();
  // Table Rows
  foreach ($form as $key => $value) {
    if (!strstr($key, 'key_')) {
      continue;
    }
    $looper = substr($key, strlen('key_'));
    $rows[] = array(drupal_render($form['key_'.$looper]),
                    drupal_render($form['link_'.$looper]),
                    );
  }
  // Render Table
  return theme_table($header, $rows);
}

function chpmob_keyfile_form($company_id, $agent_id) {
  $agent = chdbprop_get_agent($company_id, $agent_id);
  $app_id = $agent['AppId'];

  if (empty($app_id)) {
    $alias = 'Other';
  } else {
    $app = chdbprop_get_mobileapp($app_id);
    $alias = decode_entities($app['Alias']);
  }

  $server = chdbadmin_get_server();

  drupal_set_header('Content-Type:text/plain;charset=utf-8');
  drupal_set_header('Content-Disposition:attachment;filename=mobilekey.txt');

  // create a file pointer connected to the output stream
  $output = fopen('php://output', 'w');

  // Output the file
  fprintf($output, "%s\n%s\n%s\n%s\n%s\n",
	  $alias,
	  'License Key',
	  decode_entities($server['Domain']),
	  decode_entities($server['Port']),
	  $agent_id);
}



